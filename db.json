{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"source/CNAME","path":"CNAME","modified":0,"renderable":0},{"_id":"themes/next/source/css/main.styl","path":"css/main.styl","modified":0,"renderable":1},{"_id":"themes/next/source/images/algolia_logo.svg","path":"images/algolia_logo.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/apple-touch-icon-next.png","path":"images/apple-touch-icon-next.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/avatar.gif","path":"images/avatar.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","path":"images/cc-by-nc-nd.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","path":"images/cc-by-nc-sa.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc.svg","path":"images/cc-by-nc.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nd.svg","path":"images/cc-by-nd.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-sa.svg","path":"images/cc-by-sa.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by.svg","path":"images/cc-by.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-zero.svg","path":"images/cc-zero.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/favicon-16x16-next.png","path":"images/favicon-16x16-next.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/favicon-32x32-next.png","path":"images/favicon-32x32-next.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/loading.gif","path":"images/loading.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/logo.svg","path":"images/logo.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/placeholder.gif","path":"images/placeholder.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/quote-l.svg","path":"images/quote-l.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/quote-r.svg","path":"images/quote-r.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/searchicon.png","path":"images/searchicon.png","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/affix.js","path":"js/src/affix.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/algolia-search.js","path":"js/src/algolia-search.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/bootstrap.js","path":"js/src/bootstrap.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/exturl.js","path":"js/src/exturl.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/hook-duoshuo.js","path":"js/src/hook-duoshuo.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/js.cookie.js","path":"js/src/js.cookie.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/motion.js","path":"js/src/motion.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/post-details.js","path":"js/src/post-details.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/scroll-cookie.js","path":"js/src/scroll-cookie.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/scrollspy.js","path":"js/src/scrollspy.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/utils.js","path":"js/src/utils.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.css","path":"lib/algolia-instant-search/instantsearch.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/canvas-nest/canvas-nest.min.js","path":"lib/canvas-nest/canvas-nest.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/canvas-ribbon/canvas-ribbon.js","path":"lib/canvas-ribbon/canvas-ribbon.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/LICENSE","path":"lib/fastclick/LICENSE","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/README.md","path":"lib/fastclick/README.md","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/bower.json","path":"lib/fastclick/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","path":"lib/font-awesome/HELP-US-OUT.txt","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/bower.json","path":"lib/font-awesome/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/CONTRIBUTING.md","path":"lib/jquery_lazyload/CONTRIBUTING.md","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/README.md","path":"lib/jquery_lazyload/README.md","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/bower.json","path":"lib/jquery_lazyload/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.lazyload.js","path":"lib/jquery_lazyload/jquery.lazyload.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.scrollstop.js","path":"lib/jquery_lazyload/jquery.scrollstop.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/needsharebutton/font-embedded.css","path":"lib/needsharebutton/font-embedded.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/needsharebutton/needsharebutton.css","path":"lib/needsharebutton/needsharebutton.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/needsharebutton/needsharebutton.js","path":"lib/needsharebutton/needsharebutton.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-barber-shop.min.css","path":"lib/pace/pace-theme-barber-shop.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-big-counter.min.css","path":"lib/pace/pace-theme-big-counter.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-bounce.min.css","path":"lib/pace/pace-theme-bounce.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-atom.min.css","path":"lib/pace/pace-theme-center-atom.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-circle.min.css","path":"lib/pace/pace-theme-center-circle.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-radar.min.css","path":"lib/pace/pace-theme-center-radar.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-simple.min.css","path":"lib/pace/pace-theme-center-simple.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-corner-indicator.min.css","path":"lib/pace/pace-theme-corner-indicator.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-fill-left.min.css","path":"lib/pace/pace-theme-fill-left.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-flash.min.css","path":"lib/pace/pace-theme-flash.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-loading-bar.min.css","path":"lib/pace/pace-theme-loading-bar.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-mac-osx.min.css","path":"lib/pace/pace-theme-mac-osx.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-minimal.min.css","path":"lib/pace/pace-theme-minimal.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace.min.js","path":"lib/pace/pace.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/three/canvas_lines.min.js","path":"lib/three/canvas_lines.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/three/canvas_sphere.min.js","path":"lib/three/canvas_sphere.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/three/three-waves.min.js","path":"lib/three/three-waves.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/bower.json","path":"lib/velocity/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.min.js","path":"lib/velocity/velocity.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","path":"lib/velocity/velocity.ui.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","path":"lib/velocity/velocity.ui.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery/index.js","path":"lib/jquery/index.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/schemes/pisces.js","path":"js/src/schemes/pisces.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.css","path":"lib/Han/dist/han.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.min.css","path":"lib/Han/dist/han.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.min.js","path":"lib/Han/dist/han.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/blank.gif","path":"lib/fancybox/source/blank.gif","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading.gif","path":"lib/fancybox/source/fancybox_loading.gif","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading@2x.gif","path":"lib/fancybox/source/fancybox_loading@2x.gif","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_overlay.png","path":"lib/fancybox/source/fancybox_overlay.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite.png","path":"lib/fancybox/source/fancybox_sprite.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite@2x.png","path":"lib/fancybox/source/fancybox_sprite@2x.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.css","path":"lib/fancybox/source/jquery.fancybox.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.js","path":"lib/fancybox/source/jquery.fancybox.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.pack.js","path":"lib/fancybox/source/jquery.fancybox.pack.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.js","path":"lib/fastclick/lib/fastclick.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.min.js","path":"lib/fastclick/lib/fastclick.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","path":"lib/font-awesome/css/font-awesome.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","path":"lib/font-awesome/css/font-awesome.css.map","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","path":"lib/font-awesome/css/font-awesome.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","path":"lib/ua-parser-js/dist/ua-parser.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","path":"lib/ua-parser-js/dist/ua-parser.pack.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.js","path":"lib/Han/dist/han.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","path":"lib/font-awesome/fonts/fontawesome-webfont.woff","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","path":"lib/font-awesome/fonts/fontawesome-webfont.woff2","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.js","path":"lib/velocity/velocity.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han-space.otf","path":"lib/Han/dist/font/han-space.otf","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han-space.woff","path":"lib/Han/dist/font/han-space.woff","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han.otf","path":"lib/Han/dist/font/han.otf","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han.woff","path":"lib/Han/dist/font/han.woff","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han.woff2","path":"lib/Han/dist/font/han.woff2","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/fancybox_buttons.png","path":"lib/fancybox/source/helpers/fancybox_buttons.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","path":"lib/fancybox/source/helpers/jquery.fancybox-buttons.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","path":"lib/fancybox/source/helpers/jquery.fancybox-buttons.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-media.js","path":"lib/fancybox/source/helpers/jquery.fancybox-media.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","path":"lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","path":"lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/FontAwesome.otf","path":"lib/font-awesome/fonts/FontAwesome.otf","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","path":"lib/font-awesome/fonts/fontawesome-webfont.eot","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.ttf","path":"lib/font-awesome/fonts/fontawesome-webfont.ttf","modified":0,"renderable":1},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.js","path":"lib/algolia-instant-search/instantsearch.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/three/three.min.js","path":"lib/three/three.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.svg","path":"lib/font-awesome/fonts/fontawesome-webfont.svg","modified":0,"renderable":1}],"Cache":[{"_id":"source/CNAME","hash":"700ec67224fab5638bebbb0b908cf4ec19fd0a8f","modified":1553605208981},{"_id":"themes/next/LICENSE","hash":"f293bcfcdc06c0b77ba13570bb8af55eb5c059fd","modified":1553605260961},{"_id":"themes/next/README.cn.md","hash":"2c766b3369ed477bce134a5450dab45bef161504","modified":1553605261328},{"_id":"themes/next/README.md","hash":"8ce60ce578963eb4e1eb5e33e1efc2fc4779af9c","modified":1553605262058},{"_id":"themes/next/_config.yml","hash":"c918def4171a386c388ca47d90cf1cdb9ecddcdb","modified":1553605262742},{"_id":"themes/next/bower.json","hash":"0674f11d3d514e087a176da0e1d85c2286aa5fba","modified":1553605263428},{"_id":"themes/next/gulpfile.coffee","hash":"031bffc483e417b20e90eceb6cf358e7596d2e69","modified":1553605264043},{"_id":"themes/next/package.json","hash":"036d3a1346203d2f1a3958024df7f74e7ac07bfe","modified":1553605264971},{"_id":"source/_posts/Ansible-Inventory-file.md","hash":"dd255e89c32668762c72e7f841e2c17ee92f0b09","modified":1553605208981},{"_id":"source/_posts/YAML-grammar.md","hash":"695afb3ceeb3bf9c011b00daab6edb95db11236c","modified":1553605208981},{"_id":"source/_posts/a-pitfall-of-connecting-failure-to-mysql-in-docker.md","hash":"7c8734f1ba478f368a9d6bb767e79ddec43da6a3","modified":1553605208982},{"_id":"source/_posts/a-pitfall-of-re-findall-with-brackets-in-Python.md","hash":"5b39e309b2b280491942d8bc17cbba66eb588be0","modified":1553605208982},{"_id":"source/_posts/docs.md","hash":"44aa4a399bf27b640bac7d697f379b1807a2f249","modified":1553605208982},{"_id":"source/_posts/filting-data-in-dictionaries-in-Python.md","hash":"78b6f2903fd2613097fb5d089b795b756ab9fb55","modified":1553605208982},{"_id":"source/_posts/how-to-SSH-with-sshekeys.md","hash":"c689378252e53eca9a626c776de0efeb97a64126","modified":1553605208982},{"_id":"source/_posts/how-to-build-LAMP-environment-on-CentOS-7.md","hash":"6e025c0ecc74cdb6fdf7886ddacc3333d5aeed7b","modified":1553605208982},{"_id":"source/_posts/how-to-find-duplicated-lines-in-files.md","hash":"6b9f4cfcfcb918ca2c2ebfb83fc8e5fefb99896f","modified":1553605208982},{"_id":"source/_posts/how-to-fix-Python-UnicodeEncodeError-on-Windows.md","hash":"008ea10a54ab37ef085922f6eb62de2bd5aa3b9c","modified":1553605208982},{"_id":"source/_posts/how-to-grant-sudo-privilege-to-a-normal-user.md","hash":"d411428e8ab253ab9f2ca003c5f1737bc0bbc551","modified":1553605208982},{"_id":"source/_posts/how-to-install-Python-3-quickly.md","hash":"0187291446a1e9a27b5bfdb7f2ebd60528c2d387","modified":1553605208982},{"_id":"source/_posts/how-to-install-and-manage-ruby.md","hash":"44b84c0b343ee1363f7b0a9968820102898ecfa2","modified":1553605208982},{"_id":"source/_posts/how-to-install-zsh-quickly.md","hash":"4b31021fb59848b6aef823a3a1c471d1bf5be6bf","modified":1553605208983},{"_id":"source/_posts/how-to-return-dictionary-when-using-pymysql-module-for-querying.md","hash":"b7dc165001075e0ff47935a2dd0d6c81c5b5f2cd","modified":1553605208983},{"_id":"source/_posts/how-to-save-files-using-sudo-without-quitting-vim.md","hash":"d11a15ff0d75f8cbc873b23f950b4ae062c77172","modified":1553605208983},{"_id":"source/_posts/how-to-use-headless-browser-of-firefox.md","hash":"da6a09c00a1aa1a99ce4886d5b8777678c7c62b6","modified":1553605208983},{"_id":"source/_posts/how-to-use-mysqldump-without-password.md","hash":"514be3997025f3c22abac3014d7701ef8d15a7d6","modified":1553605208983},{"_id":"source/_posts/initiation-of-saltstack.md","hash":"9bd5defce4a6443870c69258feb7c731c865f321","modified":1553605208983},{"_id":"source/_posts/list-deduplication-in-Python.md","hash":"a29e3ae01392be066c1ede5f62288acff4936d14","modified":1553605208983},{"_id":"source/_posts/new-class-and-classic-class-in-Python.md","hash":"560a5a75b66c13072bf151be11b0c858ed4c6e4f","modified":1553605208983},{"_id":"source/_posts/pitfalls-of-online-installing-plugin-in-WordPress.md","hash":"cd5bc4e73baaa4c8338997e1da4128354fc274a3","modified":1553605208983},{"_id":"source/_posts/set-alias-for-remote-hosts.md","hash":"f8e56e895e26aa382046d764e381775ec5e0c059","modified":1553605208983},{"_id":"source/_posts/some-modules-and-related-parameters-in-Ansible.md","hash":"b8e5eff1a9b899f9672b8b0706f08fb6e30899ac","modified":1553605208983},{"_id":"source/_posts/sorting-with-multi-keys-in-Python.md","hash":"1f604f24a6e16d392b6406ef61f218e66c6a85fe","modified":1553605208983},{"_id":"source/_posts/systemctl-configurations-on-CentOS-7.md","hash":"5de74c82b16b48264798e1953173de924bb65b04","modified":1553605208983},{"_id":"source/_posts/the-difference-between-MyISAM-and-InnoDB-in-MySQL.md","hash":"882330b8c1481c646a8597ab93c95b1151f877f6","modified":1553605208984},{"_id":"source/_posts/the-parameter-ensure-ascii-in-json-dumps.md","hash":"c466c944b961db5a43d77401868c1c9100319089","modified":1553605208984},{"_id":"source/_posts/the-transformation-among-timestamp-formatted-time-datetime-and-time-tuple-in-Python.md","hash":"43be1d7b5677c3f539b687c47f79ed77d1ea71da","modified":1553605208984},{"_id":"source/_posts/why-WITH-block-is-recommended-for-reading-and-writing-files.md","hash":"a67f8573ec0b8d754185866a8ae2435340ad11f6","modified":1553605208984},{"_id":"source/about/index.md","hash":"1f944c81a537d6fde276563b34b75404b404f459","modified":1553605208984},{"_id":"source/tags/index.md","hash":"d6f3a9aff6e2fc978ff1409d8f149ae6d83251a9","modified":1553605208984},{"_id":"themes/next/languages/de.yml","hash":"057e7df11ddeb1c8c15a5d7c5ff29430d725ec6b","modified":1553605264046},{"_id":"themes/next/languages/default.yml","hash":"44ef3f26917f467459326c2c8be2f73e4d947f35","modified":1553605264045},{"_id":"themes/next/languages/en.yml","hash":"7e680d9bb8f3a3a9d1ba1c9d312b3d257183dded","modified":1553605264053},{"_id":"themes/next/languages/fr-FR.yml","hash":"7e4eb7011b8feee641cfb11c6e73180b0ded1c0f","modified":1553605264046},{"_id":"themes/next/languages/id.yml","hash":"b5de1ea66dd9ef54cac9a1440eaa4e3f5fc011f5","modified":1553605264050},{"_id":"themes/next/languages/it.yml","hash":"aa595f2bda029f73ef7bfa104b4c55c3f4e9fb4c","modified":1553605264049},{"_id":"themes/next/languages/ja.yml","hash":"3c76e16fd19b262864475faa6854b718bc08c4d8","modified":1553605264051},{"_id":"themes/next/languages/ko.yml","hash":"ea5b46056e73ebcee121d5551627af35cbffc900","modified":1553605264048},{"_id":"themes/next/languages/nl-NL.yml","hash":"edca4f3598857dbc3cbf19ed412213329b6edd47","modified":1553605264052},{"_id":"themes/next/languages/pt-BR.yml","hash":"b1694ae766ed90277bcc4daca4b1cfa19cdcb72b","modified":1553605264048},{"_id":"themes/next/languages/pt.yml","hash":"44b61f2d085b827b507909a0b8f8ce31c6ef5d04","modified":1553605264049},{"_id":"themes/next/languages/ru.yml","hash":"98ec6f0b7183282e11cffc7ff586ceb82400dd75","modified":1553605264050},{"_id":"themes/next/languages/vi.yml","hash":"fd08d3c8d2c62965a98ac420fdaf95e54c25d97c","modified":1553605264051},{"_id":"themes/next/languages/zh-Hans.yml","hash":"16ef56d0dea94638de7d200984c90ae56f26b4fe","modified":1553605264047},{"_id":"themes/next/languages/zh-hk.yml","hash":"9396f41ae76e4fef99b257c93c7354e661f6e0fa","modified":1553605264052},{"_id":"themes/next/languages/zh-tw.yml","hash":"50b71abb3ecc0686f9739e179e2f829cd074ecd9","modified":1553605264045},{"_id":"themes/next/layout/_layout.swig","hash":"da0929166674ea637e0ad454f85ad0d7bac4aff2","modified":1553605264060},{"_id":"themes/next/layout/archive.swig","hash":"f0a8225feafd971419837cdb4bcfec98a4a59b2f","modified":1553605264060},{"_id":"themes/next/layout/category.swig","hash":"4472255f4a3e3dd6d79201523a9526dcabdfbf18","modified":1553605264061},{"_id":"themes/next/layout/index.swig","hash":"783611349c941848a0e26ee2f1dc44dd14879bd1","modified":1553605264101},{"_id":"themes/next/layout/page.swig","hash":"969caaee05bdea725e99016eb63d810893a73e99","modified":1553605264084},{"_id":"themes/next/layout/post.swig","hash":"b3589a8e46288a10d20e41c7a5985d2493725aec","modified":1553605264083},{"_id":"themes/next/layout/schedule.swig","hash":"d86f8de4e118f8c4d778b285c140474084a271db","modified":1553605264101},{"_id":"themes/next/layout/tag.swig","hash":"7e0a7d7d832883eddb1297483ad22c184e4368de","modified":1553605264061},{"_id":"themes/next/scripts/merge-configs.js","hash":"81e86717ecfb775986b945d17f0a4ba27532ef07","modified":1553605264972},{"_id":"themes/next/scripts/merge.js","hash":"9130dabe6a674c54b535f322b17d75fe6081472f","modified":1553605264979},{"_id":"themes/next/test/.jshintrc","hash":"19f93d13d1689fe033c82eb2d5f3ce30b6543cc0","modified":1553605265060},{"_id":"themes/next/test/helpers.js","hash":"a1f5de25154c3724ffc24a91ddc576cdbd60864f","modified":1553605265061},{"_id":"themes/next/test/intern.js","hash":"11fa8a4f5c3b4119a179ae0a2584c8187f907a73","modified":1553605265061},{"_id":"themes/next/source/fonts/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1553605265059},{"_id":"themes/next/layout/_custom/header.swig","hash":"adc83b19e793491b1c6ea0fd8b46cd9f32e592fc","modified":1553605264059},{"_id":"themes/next/layout/_custom/sidebar.swig","hash":"adc83b19e793491b1c6ea0fd8b46cd9f32e592fc","modified":1553605264059},{"_id":"themes/next/layout/_macro/post-collapse.swig","hash":"31322a7f57936cf2dc62e824af5490da5354cf02","modified":1553605264054},{"_id":"themes/next/layout/_macro/post-copyright.swig","hash":"665a928604f99d2ba7dc4a4a9150178229568cc6","modified":1553605264056},{"_id":"themes/next/layout/_macro/post.swig","hash":"446a35a2cd389f8cfc3aa38973a9b44ad0740134","modified":1553605264057},{"_id":"themes/next/layout/_macro/reward.swig","hash":"56e8d8556cf474c56ae1bef9cb7bbd26554adb07","modified":1553605264057},{"_id":"themes/next/layout/_macro/sidebar.swig","hash":"6a54c3c85ff6b19d275827a327abbf4bd99b2ebf","modified":1553605264055},{"_id":"themes/next/layout/_macro/wechat-subscriber.swig","hash":"39852700e4084ecccffa6d4669168e5cc0514c9e","modified":1553605264056},{"_id":"themes/next/layout/_partials/comments.swig","hash":"4a6f5b1792b2e5262b7fdab9a716b3108e2f09c7","modified":1553605264100},{"_id":"themes/next/layout/_partials/footer.swig","hash":"c4d6181f5d3db5365e622f78714af8cc58d7a45e","modified":1553605264099},{"_id":"themes/next/layout/_partials/head.swig","hash":"6b94fe8f3279daea5623c49ef4bb35917ba57510","modified":1553605264090},{"_id":"themes/next/layout/_partials/header.swig","hash":"ed042be6252848058c90109236ec988e392d91d4","modified":1553605264100},{"_id":"themes/next/layout/_partials/page-header.swig","hash":"1efd925d34a5d4ba2dc0838d9c86ba911e705fc9","modified":1553605264099},{"_id":"themes/next/layout/_partials/pagination.swig","hash":"9e8e21d194ef44d271b1cca0bc1448c14d7edf4f","modified":1553605264096},{"_id":"themes/next/layout/_partials/search.swig","hash":"9dbd378e94abfcb3f864a5b8dbbf18d212ca2ee0","modified":1553605264093},{"_id":"themes/next/layout/_scripts/boostrap.swig","hash":"03aaebe9d50f6acb007ec38cc04acd1cfceb404d","modified":1553605264086},{"_id":"themes/next/layout/_scripts/commons.swig","hash":"766b2bdda29523ed6cd8d7aa197f996022f8fd94","modified":1553605264085},{"_id":"themes/next/layout/_scripts/vendors.swig","hash":"a266f96ad06ee87bdeae6e105a4b53cd587bbd04","modified":1553605264086},{"_id":"themes/next/layout/_third-party/duoshuo-hot-articles.swig","hash":"5d4638c46aef65bf32a01681495b62416ccc98db","modified":1553605264063},{"_id":"themes/next/layout/_third-party/exturl.swig","hash":"7c04a42319d728be356746363aff8ea247791d24","modified":1553605264082},{"_id":"themes/next/layout/_third-party/mathjax.swig","hash":"6d25596d6a7c57700d37b607f8d9a62d89708683","modified":1553605264063},{"_id":"themes/next/layout/_third-party/needsharebutton.swig","hash":"5fe0447cc88a5a63b530cf0426f93c4634811876","modified":1553605264074},{"_id":"themes/next/layout/_third-party/rating.swig","hash":"fc93b1a7e6aed0dddb1f3910142b48d8ab61174e","modified":1553605264068},{"_id":"themes/next/layout/_third-party/schedule.swig","hash":"22369026c87fc23893c35a7f250b42f3bb1b60f1","modified":1553605264083},{"_id":"themes/next/layout/_third-party/scroll-cookie.swig","hash":"1ddb2336a1a19b47af3017047012c01ec5f54529","modified":1553605264062},{"_id":"themes/next/scripts/tags/button.js","hash":"d023f10a00077f47082b0517e2ad666e6e994f60","modified":1553605264974},{"_id":"themes/next/scripts/tags/center-quote.js","hash":"535fc542781021c4326dec24d8495cbb1387634a","modified":1553605264977},{"_id":"themes/next/scripts/tags/exturl.js","hash":"8d7e60f60779bde050d20fd76f6fdc36fc85e06d","modified":1553605264977},{"_id":"themes/next/scripts/tags/full-image.js","hash":"8eeb3fb89540299bdbb799edfdfdac3743b50596","modified":1553605264975},{"_id":"themes/next/scripts/tags/group-pictures.js","hash":"49252824cd53184dc9b97b2f2d87ff28e1b3ef27","modified":1553605264976},{"_id":"themes/next/scripts/tags/label.js","hash":"2f8f41a7316372f0d1ed6b51190dc4acd3e16fff","modified":1553605264973},{"_id":"themes/next/scripts/tags/lazy-image.js","hash":"eeeabede68cf263de9e6593ecf682f620da16f0a","modified":1553605264978},{"_id":"themes/next/scripts/tags/note.js","hash":"64de4e9d01cf3b491ffc7d53afdf148ee5ad9779","modified":1553605264975},{"_id":"themes/next/scripts/tags/tabs.js","hash":"5786545d51c38e8ca38d1bfc7dd9e946fc70a316","modified":1553605264976},{"_id":"themes/next/source/css/main.styl","hash":"20702c48d6053c92c5bcdbc68e8d0ef1369848a0","modified":1553605265001},{"_id":"themes/next/source/images/algolia_logo.svg","hash":"ec119560b382b2624e00144ae01c137186e91621","modified":1553605264984},{"_id":"themes/next/source/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1553605264981},{"_id":"themes/next/source/images/avatar.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1553605264983},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1553605264985},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1553605264983},{"_id":"themes/next/source/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1553605264984},{"_id":"themes/next/source/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1553605264982},{"_id":"themes/next/source/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1553605264981},{"_id":"themes/next/source/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1553605264982},{"_id":"themes/next/source/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1553605264984},{"_id":"themes/next/source/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1553605264982},{"_id":"themes/next/source/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1553605264985},{"_id":"themes/next/source/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1553605264982},{"_id":"themes/next/source/images/logo.svg","hash":"d29cacbae1bdc4bbccb542107ee0524fe55ad6de","modified":1553605264983},{"_id":"themes/next/source/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1553605264984},{"_id":"themes/next/source/images/quote-l.svg","hash":"94e870b4c8c48da61d09522196d4dd40e277a98f","modified":1553605264983},{"_id":"themes/next/source/images/quote-r.svg","hash":"e60ae504f9d99b712c793c3740c6b100d057d4ec","modified":1553605264982},{"_id":"themes/next/source/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1553605264983},{"_id":"themes/next/layout/_scripts/schemes/mist.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1553605264088},{"_id":"themes/next/layout/_scripts/schemes/muse.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1553605264087},{"_id":"themes/next/source/css/_mixins/Mist.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1553605265002},{"_id":"themes/next/source/css/_mixins/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1553605265002},{"_id":"themes/next/source/css/_mixins/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1553605265002},{"_id":"themes/next/source/css/_variables/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1553605265003},{"_id":"themes/next/source/css/_variables/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1553605265003},{"_id":"themes/next/layout/_partials/head/custom-head.swig","hash":"9e1b9666efa77f4cf8d8261bcfa445a9ac608e53","modified":1553605264098},{"_id":"themes/next/layout/_partials/head/external-fonts.swig","hash":"7ce76358411184482bb0934e70037949dd0da8ca","modified":1553605264097},{"_id":"themes/next/layout/_partials/search/localsearch.swig","hash":"957701729b85fb0c5bfcf2fb99c19d54582f91ed","modified":1553605264092},{"_id":"themes/next/layout/_partials/search/swiftype.swig","hash":"959b7e04a96a5596056e4009b73b6489c117597e","modified":1553605264092},{"_id":"themes/next/layout/_partials/search/tinysou.swig","hash":"eefe2388ff3d424694045eda21346989b123977c","modified":1553605264093},{"_id":"themes/next/layout/_partials/share/add-this.swig","hash":"23e23dc0f76ef3c631f24c65277adf7ea517b383","modified":1553605264094},{"_id":"themes/next/layout/_partials/share/baidushare.swig","hash":"1f1107468aaf03f7d0dcd7eb2b653e2813a675b4","modified":1553605264096},{"_id":"themes/next/layout/_partials/share/duoshuo_share.swig","hash":"89c5a5240ecb223acfe1d12377df5562a943fd5d","modified":1553605264095},{"_id":"themes/next/layout/_partials/share/jiathis.swig","hash":"048fd5e98149469f8c28c21ba3561a7a67952c9b","modified":1553605264095},{"_id":"themes/next/layout/_scripts/pages/post-details.swig","hash":"069d1357c717572256e5cdee09574ebce529cbae","modified":1553605264089},{"_id":"themes/next/layout/_scripts/schemes/gemini.swig","hash":"a44acf9b0d0f44ef3dfc767376a95c984cc127de","modified":1553605264088},{"_id":"themes/next/layout/_scripts/schemes/pisces.swig","hash":"a44acf9b0d0f44ef3dfc767376a95c984cc127de","modified":1553605264087},{"_id":"themes/next/layout/_third-party/analytics/analytics-with-widget.swig","hash":"98df9d72e37dd071e882f2d5623c9d817815b139","modified":1553605264079},{"_id":"themes/next/layout/_third-party/analytics/application-insights.swig","hash":"60426bf73f8a89ba61fb1be2df3ad5398e32c4ef","modified":1553605264079},{"_id":"themes/next/layout/_third-party/analytics/baidu-analytics.swig","hash":"deda6a814ed48debc694c4e0c466f06c127163d0","modified":1553605264078},{"_id":"themes/next/layout/_third-party/analytics/busuanzi-counter.swig","hash":"18e7bef8923d83ea42df6c97405e515a876cede4","modified":1553605264078},{"_id":"themes/next/layout/_third-party/analytics/cnzz-analytics.swig","hash":"8160b27bee0aa372c7dc7c8476c05bae57f58d0f","modified":1553605264076},{"_id":"themes/next/layout/_third-party/analytics/facebook-sdk.swig","hash":"a234c5cd1f75ca5731e814d0dbb92fdcf9240d1b","modified":1553605264078},{"_id":"themes/next/layout/_third-party/analytics/firestore.swig","hash":"1cd01c6e92ab1913d48e556a92bb4f28b6dc4996","modified":1553605264077},{"_id":"themes/next/layout/_third-party/analytics/google-analytics.swig","hash":"5d9943d74cc2e0a91badcf4f755c6de77eab193a","modified":1553605264081},{"_id":"themes/next/layout/_third-party/analytics/index.swig","hash":"5e9bb24c750b49513d9a65799e832f07410002ac","modified":1553605264081},{"_id":"themes/next/layout/_third-party/analytics/lean-analytics.swig","hash":"fc65b9c98a0a8ab43a5e7aabff6c5f03838e09c8","modified":1553605264080},{"_id":"themes/next/layout/_third-party/analytics/tencent-analytics.swig","hash":"3658414379e0e8a34c45c40feadc3edc8dc55f88","modified":1553605264080},{"_id":"themes/next/layout/_third-party/analytics/tencent-mta.swig","hash":"0ddc94ed4ba0c19627765fdf1abc4d8efbe53d5a","modified":1553605264078},{"_id":"themes/next/layout/_third-party/analytics/vkontakte-api.swig","hash":"c3971fd154d781088e1cc665035f8561a4098f4c","modified":1553605264077},{"_id":"themes/next/layout/_third-party/comments/changyan.swig","hash":"0e3378f7c39b2b0f69638290873ede6b6b6825c0","modified":1553605264070},{"_id":"themes/next/layout/_third-party/comments/disqus.swig","hash":"c316758546dc9ba6c60cb4d852c17ca6bb6d6724","modified":1553605264069},{"_id":"themes/next/layout/_third-party/comments/duoshuo.swig","hash":"a356b2185d40914447fde817eb3d358ab6b3e4c3","modified":1553605264073},{"_id":"themes/next/layout/_third-party/comments/gitment.swig","hash":"10160daceaa6f1ecf632323d422ebe2caae49ddf","modified":1553605264070},{"_id":"themes/next/layout/_third-party/comments/hypercomments.swig","hash":"3e8dc5c6c912628a37e3b5f886bec7b2e5ed14ea","modified":1553605264071},{"_id":"themes/next/layout/_third-party/comments/index.swig","hash":"aa0629277d751c55c6d973e7691bf84af9b17a60","modified":1553605264073},{"_id":"themes/next/layout/_third-party/comments/livere.swig","hash":"8a2e393d2e49f7bf560766d8a07cd461bf3fce4f","modified":1553605264071},{"_id":"themes/next/layout/_third-party/comments/valine.swig","hash":"fcabbb241f894c9a6309c44e126cf3e8fea81fd4","modified":1553605264072},{"_id":"themes/next/layout/_third-party/comments/youyan.swig","hash":"8b6650f77fe0a824c8075b2659e0403e0c78a705","modified":1553605264074},{"_id":"themes/next/layout/_third-party/search/index.swig","hash":"c747fb5c6b1f500e8f0c583e44195878b66e4e29","modified":1553605264067},{"_id":"themes/next/layout/_third-party/search/localsearch.swig","hash":"385c066af96bee30be2459dbec8aae1f15d382f5","modified":1553605264066},{"_id":"themes/next/layout/_third-party/search/tinysou.swig","hash":"cb3a5d36dbe1630bab84e03a52733a46df7c219b","modified":1553605264067},{"_id":"themes/next/layout/_third-party/seo/baidu-push.swig","hash":"c057b17f79e8261680fbae8dc4e81317a127c799","modified":1553605264075},{"_id":"themes/next/source/css/_custom/custom.styl","hash":"328d9a9696cc2ccf59c67d3c26000d569f46344c","modified":1553605264986},{"_id":"themes/next/source/css/_mixins/Gemini.styl","hash":"2aa5b7166a85a8aa34b17792ae4f58a5a96df6cc","modified":1553605265002},{"_id":"themes/next/source/css/_mixins/Pisces.styl","hash":"9ab65361ba0a12a986edd103e56492644c2db0b8","modified":1553605265002},{"_id":"themes/next/source/css/_mixins/base.styl","hash":"82f9055955920ed88a2ab6a20ab02169abb2c634","modified":1553605265002},{"_id":"themes/next/source/css/_variables/Gemini.styl","hash":"99fbb4686ea9a3e03a4726ed7cf4d8f529034452","modified":1553605265003},{"_id":"themes/next/source/css/_variables/Mist.styl","hash":"be087dcc060e8179f7e7f60ab4feb65817bd3d9f","modified":1553605265003},{"_id":"themes/next/source/css/_variables/Pisces.styl","hash":"f29165e36489a87ba32d17dddfd2720d84e3f3ec","modified":1553605265004},{"_id":"themes/next/source/css/_variables/base.styl","hash":"29c261fa6b4046322559074d75239c6b272fb8a3","modified":1553605265003},{"_id":"themes/next/source/js/src/affix.js","hash":"978e0422b5bf1b560236d8d10ebc1adcf66392e3","modified":1553605265018},{"_id":"themes/next/source/js/src/algolia-search.js","hash":"b172f697ed339a24b1e80261075232978d164c35","modified":1553605265018},{"_id":"themes/next/source/js/src/bootstrap.js","hash":"034bc8113e0966fe2096ba5b56061bbf10ef0512","modified":1553605265015},{"_id":"themes/next/source/js/src/exturl.js","hash":"e42e2aaab7bf4c19a0c8e779140e079c6aa5c0b1","modified":1553605265018},{"_id":"themes/next/source/js/src/hook-duoshuo.js","hash":"a6119070c0119f33e08b29da7d2cce2635eb40a0","modified":1553605265017},{"_id":"themes/next/source/js/src/js.cookie.js","hash":"9b37973a90fd50e71ea91682265715e45ae82c75","modified":1553605265017},{"_id":"themes/next/source/js/src/motion.js","hash":"754b294394f102c8fd9423a1789ddb1201677898","modified":1553605265017},{"_id":"themes/next/source/js/src/post-details.js","hash":"a13f45f7aa8291cf7244ec5ba93907d119c5dbdd","modified":1553605265018},{"_id":"themes/next/source/js/src/scroll-cookie.js","hash":"09dc828cbf5f31158ff6250d2bf7c3cde6365c67","modified":1553605265017},{"_id":"themes/next/source/js/src/scrollspy.js","hash":"fe4da1b9fe73518226446f5f27d2831e4426fc35","modified":1553605265017},{"_id":"themes/next/source/js/src/utils.js","hash":"9b1325801d27213083d1487a12b1a62b539ab6f8","modified":1553605265017},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.css","hash":"90ef19edc982645b118b095615838d9c5eaba0de","modified":1553605265054},{"_id":"themes/next/source/lib/canvas-nest/canvas-nest.min.js","hash":"0387e75e23b1db108a755073fe52a0d03eb391a7","modified":1553605265031},{"_id":"themes/next/source/lib/canvas-ribbon/canvas-ribbon.js","hash":"ff5915eb2596e890a2fc6697c864f861a1995ec0","modified":1553605265024},{"_id":"themes/next/source/lib/fancybox/.bower.json","hash":"cc40a9b11e52348e554c84e4a5c058056f6b7aeb","modified":1553605265029},{"_id":"themes/next/source/lib/fancybox/.gitattributes","hash":"2db21acfbd457452462f71cc4048a943ee61b8e0","modified":1553605265030},{"_id":"themes/next/source/lib/fastclick/.bower.json","hash":"93ebd5b35e632f714dcf1753e1f6db77ec74449b","modified":1553605265025},{"_id":"themes/next/source/lib/fastclick/LICENSE","hash":"dcd5b6b43095d9e90353a28b09cb269de8d4838e","modified":1553605265025},{"_id":"themes/next/source/lib/fastclick/README.md","hash":"1decd8e1adad2cd6db0ab50cf56de6035156f4ea","modified":1553605265025},{"_id":"themes/next/source/lib/fastclick/bower.json","hash":"13379463c7463b4b96d13556b46faa4cc38d81e6","modified":1553605265025},{"_id":"themes/next/source/lib/font-awesome/.bower.json","hash":"a2aaaf12378db56bd10596ba3daae30950eac051","modified":1553605265042},{"_id":"themes/next/source/lib/font-awesome/.gitignore","hash":"69d152fa46b517141ec3b1114dd6134724494d83","modified":1553605265041},{"_id":"themes/next/source/lib/font-awesome/.npmignore","hash":"dcf470ab3a358103bb896a539cc03caeda10fa8b","modified":1553605265042},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","hash":"4f7bf961f1bed448f6ba99aeb9219fabf930ba96","modified":1553605265043},{"_id":"themes/next/source/lib/font-awesome/bower.json","hash":"279a8a718ab6c930a67c41237f0aac166c1b9440","modified":1553605265042},{"_id":"themes/next/source/lib/jquery/.bower.json","hash":"91745c2cc6c946c7275f952b2b0760b880cea69e","modified":1553605265031},{"_id":"themes/next/source/lib/jquery_lazyload/.bower.json","hash":"b7638afc93e9cd350d0783565ee9a7da6805ad8e","modified":1553605265057},{"_id":"themes/next/source/lib/jquery_lazyload/CONTRIBUTING.md","hash":"4891864c24c28efecd81a6a8d3f261145190f901","modified":1553605265058},{"_id":"themes/next/source/lib/jquery_lazyload/README.md","hash":"895d50fa29759af7835256522e9dd7dac597765c","modified":1553605265057},{"_id":"themes/next/source/lib/jquery_lazyload/bower.json","hash":"65bc85d12197e71c40a55c0cd7f6823995a05222","modified":1553605265057},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.lazyload.js","hash":"481fd478650e12b67c201a0ea41e92743f8b45a3","modified":1553605265057},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.scrollstop.js","hash":"0e9a81785a011c98be5ea821a8ed7d411818cfd1","modified":1553605265057},{"_id":"themes/next/source/lib/needsharebutton/font-embedded.css","hash":"c39d37278c1e178838732af21bd26cd0baeddfe0","modified":1553605265058},{"_id":"themes/next/source/lib/needsharebutton/needsharebutton.css","hash":"3ef0020a1815ca6151ea4886cd0d37421ae3695c","modified":1553605265059},{"_id":"themes/next/source/lib/needsharebutton/needsharebutton.js","hash":"9885fd9bea5e7ebafc5b1de9d17be5e106248d96","modified":1553605265059},{"_id":"themes/next/source/lib/pace/pace-theme-barber-shop.min.css","hash":"ee0d51446cb4ffe1bb96bd7bc8c8e046dddfcf46","modified":1553605265055},{"_id":"themes/next/source/lib/pace/pace-theme-big-counter.min.css","hash":"5b561dc328af4c4d512e20a76fe964d113a32ba8","modified":1553605265056},{"_id":"themes/next/source/lib/pace/pace-theme-bounce.min.css","hash":"f6bdb9a785b7979dd8ec5c60e278af955ef1e585","modified":1553605265055},{"_id":"themes/next/source/lib/pace/pace-theme-center-atom.min.css","hash":"dcf79c24fe5350fb73d8038573a104e73639e9d3","modified":1553605265055},{"_id":"themes/next/source/lib/pace/pace-theme-center-circle.min.css","hash":"a4066769c78affbfbc5e30a600e2c7862cd532e0","modified":1553605265056},{"_id":"themes/next/source/lib/pace/pace-theme-center-radar.min.css","hash":"ab7cba998bf4c03b13df342bf43647fa4f419783","modified":1553605265056},{"_id":"themes/next/source/lib/pace/pace-theme-center-simple.min.css","hash":"67f44c947548bd4d77e7590d3f59e236cbf9e98a","modified":1553605265056},{"_id":"themes/next/source/lib/pace/pace-theme-corner-indicator.min.css","hash":"b3c64c973f31884e3d8145989476707333406b9a","modified":1553605265055},{"_id":"themes/next/source/lib/pace/pace-theme-fill-left.min.css","hash":"0bec1e235a4a2cccda3f993b205424e1441a44ae","modified":1553605265055},{"_id":"themes/next/source/lib/pace/pace-theme-flash.min.css","hash":"13ace22c40312d7bbd8d9c1e50eff897a7a497d8","modified":1553605265055},{"_id":"themes/next/source/lib/pace/pace-theme-loading-bar.min.css","hash":"7ee28875dfc1230d76c537f6605766e8d4011e9f","modified":1553605265056},{"_id":"themes/next/source/lib/pace/pace-theme-mac-osx.min.css","hash":"9f2e7b51b084da407863826b25265b31150b3821","modified":1553605265056},{"_id":"themes/next/source/lib/pace/pace-theme-minimal.min.css","hash":"9cd783cceb8a191f3c8b5d81f7a430ecc3e489d3","modified":1553605265056},{"_id":"themes/next/source/lib/pace/pace.min.js","hash":"9944dfb7814b911090e96446cea4d36e2b487234","modified":1553605265055},{"_id":"themes/next/source/lib/three/canvas_lines.min.js","hash":"dce4a3b65f8bf958f973690caa7ec4952f353b0c","modified":1553605265021},{"_id":"themes/next/source/lib/three/canvas_sphere.min.js","hash":"d8ea241a53c135a650f7335d2b6982b899fd58a9","modified":1553605265024},{"_id":"themes/next/source/lib/three/three-waves.min.js","hash":"d968cba6b3a50b3626a02d67b544f349d83b147c","modified":1553605265024},{"_id":"themes/next/source/lib/velocity/.bower.json","hash":"05f960846f1c7a93dab1d3f9a1121e86812e8c88","modified":1553605265039},{"_id":"themes/next/source/lib/velocity/bower.json","hash":"2ec99573e84c7117368beccb9e94b6bf35d2db03","modified":1553605265032},{"_id":"themes/next/source/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1553605265032},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","hash":"6a1d101eab3de87527bb54fcc8c7b36b79d8f0df","modified":1553605265032},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1553605265032},{"_id":"themes/next/source/lib/jquery/index.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1553605265030},{"_id":"themes/next/layout/_third-party/search/algolia-search/assets.swig","hash":"28ff4ed6714c59124569ffcbd10f1173d53ca923","modified":1553605264066},{"_id":"themes/next/layout/_third-party/search/algolia-search/dom.swig","hash":"ba698f49dd3a868c95b240d802f5b1b24ff287e4","modified":1553605264065},{"_id":"themes/next/source/css/_common/components/back-to-top-sidebar.styl","hash":"4719ce717962663c5c33ef97b1119a0b3a4ecdc3","modified":1553605264989},{"_id":"themes/next/source/css/_common/components/back-to-top.styl","hash":"31050fc7a25784805b4843550151c93bfa55c9c8","modified":1553605265001},{"_id":"themes/next/source/css/_common/components/buttons.styl","hash":"7e509c7c28c59f905b847304dd3d14d94b6f3b8e","modified":1553605265001},{"_id":"themes/next/source/css/_common/components/comments.styl","hash":"471f1627891aca5c0e1973e09fbcb01e1510d193","modified":1553605264993},{"_id":"themes/next/source/css/_common/components/components.styl","hash":"a6bb5256be6195e76addbda12f4ed7c662d65e7a","modified":1553605264994},{"_id":"themes/next/source/css/_common/components/pagination.styl","hash":"c5d48863f332ff8ce7c88dec2c893f709d7331d3","modified":1553605264999},{"_id":"themes/next/source/css/_common/components/tag-cloud.styl","hash":"dd8a3b22fc2f222ac6e6c05bd8a773fb039169c0","modified":1553605264994},{"_id":"themes/next/source/css/_common/outline/outline.styl","hash":"2186be20e317505cd31886f1291429cc21f76703","modified":1553605264988},{"_id":"themes/next/source/css/_common/scaffolding/base.styl","hash":"f7c44b0ee46cf2cf82a4c9455ba8d8b55299976f","modified":1553605264987},{"_id":"themes/next/source/css/_common/scaffolding/helpers.styl","hash":"9c25c75311e1bd4d68df031d3f2ae6d141a90766","modified":1553605264988},{"_id":"themes/next/source/css/_common/scaffolding/mobile.styl","hash":"47a46583a1f3731157a3f53f80ed1ed5e2753e8e","modified":1553605264987},{"_id":"themes/next/source/css/_common/scaffolding/normalize.styl","hash":"ece571f38180febaf02ace8187ead8318a300ea7","modified":1553605264987},{"_id":"themes/next/source/css/_common/scaffolding/scaffolding.styl","hash":"a280a583b7615e939aaddbf778f5c108ef8a2a6c","modified":1553605264988},{"_id":"themes/next/source/css/_common/scaffolding/tables.styl","hash":"64f5d56c08d74a338813df1265580ca0cbf0190b","modified":1553605264986},{"_id":"themes/next/source/css/_schemes/Gemini/index.styl","hash":"18c3336ee3d09bd2da6a876e1336539f03d5a973","modified":1553605265004},{"_id":"themes/next/source/css/_schemes/Mist/_base.styl","hash":"c2d079788d6fc2e9a191ccdae94e50d55bf849dc","modified":1553605265009},{"_id":"themes/next/source/css/_schemes/Mist/_header.styl","hash":"5ae7906dc7c1d9468c7f4b4a6feddddc555797a1","modified":1553605265006},{"_id":"themes/next/source/css/_schemes/Mist/_logo.styl","hash":"38e5df90c8689a71c978fd83ba74af3d4e4e5386","modified":1553605265008},{"_id":"themes/next/source/css/_schemes/Mist/_menu.styl","hash":"b0dcca862cd0cc6e732e33d975b476d744911742","modified":1553605265008},{"_id":"themes/next/source/css/_schemes/Mist/_posts-expanded.styl","hash":"3b25edfa187d1bbbd0d38b50dd013cef54758abf","modified":1553605265007},{"_id":"themes/next/source/css/_schemes/Mist/_search.styl","hash":"1452cbe674cc1d008e1e9640eb4283841058fc64","modified":1553605265009},{"_id":"themes/next/source/css/_schemes/Mist/index.styl","hash":"9a5581a770af8964064fef7afd3e16963e45547f","modified":1553605265007},{"_id":"themes/next/source/css/_schemes/Muse/_layout.styl","hash":"0efa036a15c18f5abb058b7c0fad1dd9ac5eed4c","modified":1553605265013},{"_id":"themes/next/source/css/_schemes/Muse/_logo.styl","hash":"8829bc556ca38bfec4add4f15a2f028092ac6d46","modified":1553605265011},{"_id":"themes/next/source/css/_schemes/Muse/_menu.styl","hash":"4aac01962520d60b03b23022ab601ad4bd19c08c","modified":1553605265011},{"_id":"themes/next/source/css/_schemes/Muse/_search.styl","hash":"1452cbe674cc1d008e1e9640eb4283841058fc64","modified":1553605265012},{"_id":"themes/next/source/css/_schemes/Muse/index.styl","hash":"a0e2030a606c934fb2c5c7373aaae04a1caac4c5","modified":1553605265011},{"_id":"themes/next/source/css/_schemes/Pisces/_brand.styl","hash":"c4ed249798296f60bda02351fe6404fb3ef2126f","modified":1553605265005},{"_id":"themes/next/source/css/_schemes/Pisces/_layout.styl","hash":"5b93958239d3d2bf9aeaede44eced2434d784462","modified":1553605265005},{"_id":"themes/next/source/css/_schemes/Pisces/_menu.styl","hash":"215de948be49bcf14f06d500cef9f7035e406a43","modified":1553605265005},{"_id":"themes/next/source/css/_schemes/Pisces/_posts.styl","hash":"2f878213cb24c5ddc18877f6d15ec5c5f57745ac","modified":1553605265006},{"_id":"themes/next/source/css/_schemes/Pisces/_sidebar.styl","hash":"9d16fa3c14ed76b71229f022b63a02fd0f580958","modified":1553605265005},{"_id":"themes/next/source/css/_schemes/Pisces/index.styl","hash":"69ecd6c97e7cdfd822ac8102b45ad0ede85050db","modified":1553605265005},{"_id":"themes/next/source/js/src/schemes/pisces.js","hash":"8050a5b2683d1d77238c5762b6bd89c543daed6e","modified":1553605265018},{"_id":"themes/next/source/lib/Han/dist/han.css","hash":"bd40da3fba8735df5850956814e312bd7b3193d7","modified":1553605265050},{"_id":"themes/next/source/lib/Han/dist/han.min.css","hash":"a0c9e32549a8b8cf327ab9227b037f323cdb60ee","modified":1553605265050},{"_id":"themes/next/source/lib/Han/dist/han.min.js","hash":"f559c68a25065a14f47da954a7617d87263e409d","modified":1553605265050},{"_id":"themes/next/source/lib/fancybox/source/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1553605265029},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1553605265029},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1553605265027},{"_id":"themes/next/source/lib/fancybox/source/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1553605265028},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1553605265027},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1553605265029},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.css","hash":"5f163444617b6cf267342f06ac166a237bb62df9","modified":1553605265027},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.js","hash":"1cf3d47b5ccb7cb6e9019c64f2a88d03a64853e4","modified":1553605265028},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.pack.js","hash":"53360764b429c212f424399384417ccc233bb3be","modified":1553605265029},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.js","hash":"06cef196733a710e77ad7e386ced6963f092dc55","modified":1553605265026},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.min.js","hash":"2cae0f5a6c5d6f3cb993015e6863f9483fc4de18","modified":1553605265026},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","hash":"0140952c64e3f2b74ef64e050f2fe86eab6624c8","modified":1553605265041},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","hash":"0189d278706509412bac4745f96c83984e1d59f4","modified":1553605265041},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","hash":"512c7d79033e3028a9be61b540cf1a6870c896f8","modified":1553605265041},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","hash":"38628e75e4412cc6f11074e03e1c6d257aae495b","modified":1553605265020},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","hash":"214dad442a92d36af77ed0ca1d9092b16687f02f","modified":1553605265020},{"_id":"themes/next/source/lib/Han/dist/han.js","hash":"e345397e0585c9fed1449e614ec13e0224acf2ab","modified":1553605265050},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1553605265048},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1553605265047},{"_id":"themes/next/source/lib/velocity/velocity.js","hash":"9f08181baea0cc0e906703b7e5df9111b9ef3373","modified":1553605265033},{"_id":"themes/next/source/css/_common/components/footer/footer.styl","hash":"7905a7f625702b45645d8be1268cb8af3f698c70","modified":1553605264989},{"_id":"themes/next/source/css/_common/components/header/header.styl","hash":"ae1ca14e51de67b07dba8f61ec79ee0e2e344574","modified":1553605264995},{"_id":"themes/next/source/css/_common/components/header/headerband.styl","hash":"d27448f199fc2f9980b601bc22b87f08b5d64dd1","modified":1553605264995},{"_id":"themes/next/source/css/_common/components/header/menu.styl","hash":"8a2421cb9005352905fae9d41a847ae56957247e","modified":1553605264995},{"_id":"themes/next/source/css/_common/components/header/site-meta.styl","hash":"6c00f6e0978f4d8f9a846a15579963728aaa6a17","modified":1553605264995},{"_id":"themes/next/source/css/_common/components/header/site-nav.styl","hash":"49c2b2c14a1e7fcc810c6be4b632975d0204c281","modified":1553605264995},{"_id":"themes/next/source/css/_common/components/highlight/diff.styl","hash":"96f32ea6c3265a3889e6abe57587f6e2a2a40dfb","modified":1553605264994},{"_id":"themes/next/source/css/_common/components/highlight/highlight.styl","hash":"25dc25f61a232f03ca72472b7852f882448ec185","modified":1553605264994},{"_id":"themes/next/source/css/_common/components/highlight/theme.styl","hash":"b76387934fb6bb75212b23c1a194486892cc495e","modified":1553605264994},{"_id":"themes/next/source/css/_common/components/pages/archive.styl","hash":"f5aa2ba3bfffc15475e7e72a55b5c9d18609fdf5","modified":1553605265000},{"_id":"themes/next/source/css/_common/components/pages/categories.styl","hash":"4eff5b252d7b614e500fc7d52c97ce325e57d3ab","modified":1553605265000},{"_id":"themes/next/source/css/_common/components/pages/pages.styl","hash":"2039590632bba3943c39319d80ef630af7928185","modified":1553605265000},{"_id":"themes/next/source/css/_common/components/pages/post-detail.styl","hash":"9bf4362a4d0ae151ada84b219d39fbe5bb8c790e","modified":1553605265000},{"_id":"themes/next/source/css/_common/components/pages/schedule.styl","hash":"a82afbb72d83ee394aedc7b37ac0008a9823b4f4","modified":1553605265000},{"_id":"themes/next/source/css/_common/components/post/post-button.styl","hash":"e72a89e0f421444453e149ba32c77a64bd8e44e8","modified":1553605264991},{"_id":"themes/next/source/css/_common/components/post/post-collapse.styl","hash":"0f7f522cc6bfb3401d5afd62b0fcdf48bb2d604b","modified":1553605264991},{"_id":"themes/next/source/css/_common/components/post/post-copyright.styl","hash":"f54367c0feda6986c030cc4d15a0ca6ceea14bcb","modified":1553605264990},{"_id":"themes/next/source/css/_common/components/post/post-eof.styl","hash":"2cdc094ecf907a02fce25ad4a607cd5c40da0f2b","modified":1553605264992},{"_id":"themes/next/source/css/_common/components/post/post-expand.styl","hash":"535b3b4f8cb1eec2558e094320e7dfb01f94c0e7","modified":1553605264992},{"_id":"themes/next/source/css/_common/components/post/post-gallery.styl","hash":"387ce23bba52b22a586b2dfb4ec618fe1ffd3926","modified":1553605264992},{"_id":"themes/next/source/css/_common/components/post/post-meta.styl","hash":"aea21141015ca8c409d8b33e3e34ec505f464e93","modified":1553605264993},{"_id":"themes/next/source/css/_common/components/post/post-nav.styl","hash":"a5d8617a24d7cb6c5ad91ea621183ca2c0917331","modified":1553605264992},{"_id":"themes/next/source/css/_common/components/post/post-reward.styl","hash":"36332c8a91f089f545f3c3e8ea90d08aa4d6e60c","modified":1553605264991},{"_id":"themes/next/source/css/_common/components/post/post-rtl.styl","hash":"017074ef58166e2d69c53bb7590a0e7a8947a1ed","modified":1553605264990},{"_id":"themes/next/source/css/_common/components/post/post-tags.styl","hash":"a352ae5b1f8857393bf770d2e638bf15f0c9585d","modified":1553605264992},{"_id":"themes/next/source/css/_common/components/post/post-title.styl","hash":"d5a4e4fc17f1f7e7c3a61b52d8e2e9677e139de7","modified":1553605264990},{"_id":"themes/next/source/css/_common/components/post/post-type.styl","hash":"10251257aceecb117233c9554dcf8ecfef8e2104","modified":1553605264992},{"_id":"themes/next/source/css/_common/components/post/post-widgets.styl","hash":"e4055a0d2cd2b0ad9dc55928e2f3e7bd4e499da3","modified":1553605264993},{"_id":"themes/next/source/css/_common/components/post/post.styl","hash":"262debfd4442fa03d9919ceb88b948339df03fb0","modified":1553605264992},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author-links.styl","hash":"0a6c0efffdf18bddbc1d1238feaed282b09cd0fe","modified":1553605265000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author.styl","hash":"920343e41c124221a17f050bbb989494d44f7a24","modified":1553605265000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-blogroll.styl","hash":"89dd4f8b1f1cce3ad46cf2256038472712387d02","modified":1553605265000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-dimmer.styl","hash":"efa5e5022e205b52786ce495d4879f5e7b8f84b2","modified":1553605265001},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-feed-link.styl","hash":"9486ddd2cb255227db102d09a7df4cae0fabad72","modified":1553605265000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-nav.styl","hash":"45fa7193435a8eae9960267438750b4c9fa9587f","modified":1553605265001},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toc.styl","hash":"12937cae17c96c74d5c58db6cb29de3b2dfa14a2","modified":1553605265001},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toggle.styl","hash":"f7784aba0c1cd20d824c918c120012d57a5eaa2a","modified":1553605265000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar.styl","hash":"50305b6ad7d09d2ffa4854e39f41ec1f4fe984fd","modified":1553605265001},{"_id":"themes/next/source/css/_common/components/sidebar/site-state.styl","hash":"3623e7fa4324ec1307370f33d8f287a9e20a5578","modified":1553605265001},{"_id":"themes/next/source/css/_common/components/tags/blockquote-center.styl","hash":"c2abe4d87148e23e15d49ee225bc650de60baf46","modified":1553605264999},{"_id":"themes/next/source/css/_common/components/tags/exturl.styl","hash":"1b3cc9f4e5a7f6e05b4100e9990b37b20d4a2005","modified":1553605264999},{"_id":"themes/next/source/css/_common/components/tags/full-image.styl","hash":"37e951e734a252fe8a81f452b963df2ba90bfe90","modified":1553605264999},{"_id":"themes/next/source/css/_common/components/tags/group-pictures.styl","hash":"4851b981020c5cbc354a1af9b831a2dcb3cf9d39","modified":1553605264998},{"_id":"themes/next/source/css/_common/components/tags/label.styl","hash":"4a457d265d62f287c63d48764ce45d9bcfc9ec5a","modified":1553605264997},{"_id":"themes/next/source/css/_common/components/tags/note-modern.styl","hash":"ee7528900578ef4753effe05b346381c40de5499","modified":1553605264998},{"_id":"themes/next/source/css/_common/components/tags/note.styl","hash":"32c9156bea5bac9e9ad0b4c08ffbca8b3d9aac4b","modified":1553605264998},{"_id":"themes/next/source/css/_common/components/tags/tabs.styl","hash":"4ab5deed8c3b0c338212380f678f8382672e1bcb","modified":1553605264998},{"_id":"themes/next/source/css/_common/components/tags/tags.styl","hash":"ead0d0f2321dc71505788c7f689f92257cf14947","modified":1553605264999},{"_id":"themes/next/source/css/_common/components/third-party/algolia-search.styl","hash":"fd42777b9125fd8969dc39d4f15473e2b91b4142","modified":1553605264996},{"_id":"themes/next/source/css/_common/components/third-party/baidushare.styl","hash":"93b08815c4d17e2b96fef8530ec1f1064dede6ef","modified":1553605264996},{"_id":"themes/next/source/css/_common/components/third-party/busuanzi-counter.styl","hash":"d4e6d8d7b34dc69994593c208f875ae8f7e8a3ae","modified":1553605264996},{"_id":"themes/next/source/css/_common/components/third-party/duoshuo.styl","hash":"2340dd9b3202c61d73cc708b790fac5adddbfc7f","modified":1553605264997},{"_id":"themes/next/source/css/_common/components/third-party/gitment.styl","hash":"34935b40237c074be5f5e8818c14ccfd802b7439","modified":1553605264996},{"_id":"themes/next/source/css/_common/components/third-party/han.styl","hash":"cce6772e2cdb4db85d35486ae4c6c59367fbdd40","modified":1553605264996},{"_id":"themes/next/source/css/_common/components/third-party/jiathis.styl","hash":"327b5f63d55ec26f7663185c1a778440588d9803","modified":1553605264996},{"_id":"themes/next/source/css/_common/components/third-party/localsearch.styl","hash":"d89c4b562b528e4746696b2ad8935764d133bdae","modified":1553605264995},{"_id":"themes/next/source/css/_common/components/third-party/needsharebutton.styl","hash":"a5e3e6b4b4b814a9fe40b34d784fed67d6d977fa","modified":1553605264997},{"_id":"themes/next/source/css/_common/components/third-party/third-party.styl","hash":"1ccfbd4d0f5754b2dc2719a91245c95f547a7652","modified":1553605264995},{"_id":"themes/next/source/css/_schemes/Mist/outline/outline.styl","hash":"5dc4859c66305f871e56cba78f64bfe3bf1b5f01","modified":1553605265008},{"_id":"themes/next/source/css/_schemes/Mist/sidebar/sidebar-blogroll.styl","hash":"817587e46df49e819858c8ecbafa08b53d5ff040","modified":1553605265010},{"_id":"themes/next/source/css/_schemes/Muse/sidebar/sidebar-blogroll.styl","hash":"817587e46df49e819858c8ecbafa08b53d5ff040","modified":1553605265014},{"_id":"themes/next/source/lib/Han/dist/font/han-space.otf","hash":"07436f011b44051f61b8329c99de4bec64e86f4b","modified":1553605265052},{"_id":"themes/next/source/lib/Han/dist/font/han-space.woff","hash":"7a635062b10bf5662ae1d218ba0980171005d060","modified":1553605265052},{"_id":"themes/next/source/lib/Han/dist/font/han.otf","hash":"f1f6bb8f461f5672e000380195d3d2358a28494c","modified":1553605265051},{"_id":"themes/next/source/lib/Han/dist/font/han.woff","hash":"f38ff9b2eecaa17b50b66aa2dae87e9e7436d195","modified":1553605265052},{"_id":"themes/next/source/lib/Han/dist/font/han.woff2","hash":"623af3ed5423371ac136a4fe0e8cc7bb7396037a","modified":1553605265051},{"_id":"themes/next/source/lib/fancybox/source/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1553605265028},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1553605265028},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","hash":"91e41741c2e93f732c82aaacec4cfc6e3f3ec876","modified":1553605265028},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-media.js","hash":"3bdf69ed2469e4fb57f5a95f17300eef891ff90d","modified":1553605265028},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1553605265028},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","hash":"53e194f4a72e649c04fb586dd57762b8c022800b","modified":1553605265028},{"_id":"themes/next/source/lib/font-awesome/fonts/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":1553605265048},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1553605265044},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":1553605265047},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.js","hash":"9ccc6f8144f54e86df9a3fd33a18368d81cf3a4f","modified":1553605265054},{"_id":"themes/next/source/lib/three/three.min.js","hash":"73f4cdc17e51a72b9bf5b9291f65386d615c483b","modified":1553605265023},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.svg","hash":"98a8aa5cf7d62c2eff5f07ede8d844b874ef06ed","modified":1553605265046},{"_id":"public/search.xml","hash":"c42da1f7f817811bffd0c03ccf596db9c7368237","modified":1553605308201},{"_id":"public/about/index.html","hash":"35ce78662265b790e7876d4ee57b12b2fdefaddf","modified":1553605308348},{"_id":"public/tags/index.html","hash":"d839b1c92f95c9f531fc9367d965d5db20d6c084","modified":1553605308348},{"_id":"public/2018/12/25/how-to-install-and-manage-ruby/index.html","hash":"97c58c4a155ca827f62a14533bfeba15f89a34b1","modified":1553605308348},{"_id":"public/2018/11/21/a-pitfall-of-connecting-failure-to-mysql-in-docker/index.html","hash":"99a83e57d447af578b39d9d5ae113993709e99f4","modified":1553605308348},{"_id":"public/2018/10/20/the-parameter-ensure-ascii-in-json-dumps/index.html","hash":"72f1dbcff1dc5959f0d19fbc8483edef87d21172","modified":1553605308348},{"_id":"public/2018/08/11/a-pitfall-of-re-findall-with-brackets-in-Python/index.html","hash":"61b99519f5293505232a5b8df1409fe05000ce18","modified":1553605308349},{"_id":"public/2018/07/11/filting-data-in-dictionaries-in-Python/index.html","hash":"96f3ee8a4ae351c24057c532c2a3b521c6dcf0f1","modified":1553605308349},{"_id":"public/2018/07/10/initiation-of-saltstack/index.html","hash":"b36f3409b0fa03071cf3c6024c30ae52802e8589","modified":1553605308349},{"_id":"public/2018/04/09/how-to-use-mysqldump-without-password/index.html","hash":"b48fb5d92d572e73a8919001439888e6a79078cd","modified":1553605308349},{"_id":"public/2017/08/16/sorting-with-multi-keys-in-Python/index.html","hash":"10ad8733e881a4ebd378889df2465beee5a30e6a","modified":1553605308349},{"_id":"public/2017/04/28/how-to-install-zsh-quickly/index.html","hash":"ca7f12a6e623614fd499be4f337a18403e92fc67","modified":1553605308349},{"_id":"public/2017/04/01/how-to-grant-sudo-privilege-to-a-normal-user/index.html","hash":"5bef243316e67362622943ac44ce4adb41fb7d27","modified":1553605308349},{"_id":"public/2017/03/04/how-to-use-headless-browser-of-firefox/index.html","hash":"23bd44dec960fc4d6d09e00f8c56766e0b6c544a","modified":1553605308350},{"_id":"public/2017/02/16/some-modules-and-related-parameters-in-Ansible/index.html","hash":"5fc6a62d742bcdafb12d9fca6c2874661ce0c403","modified":1553605308350},{"_id":"public/2016/12/12/how-to-find-duplicated-lines-in-files/index.html","hash":"db9a4d21027e76ee20565535cfc7ce64923100b9","modified":1553605308350},{"_id":"public/2016/12/01/how-to-return-dictionary-when-using-pymysql-module-for-querying/index.html","hash":"fff48b4a3f9f09ffeecdf585c767997e1063cb18","modified":1553605308350},{"_id":"public/2016/09/09/systemctl-configurations-on-CentOS-7/index.html","hash":"77a976ea90e06ad82f23e41dcdec3208c3d482a0","modified":1553605308350},{"_id":"public/2016/07/20/YAML-grammar/index.html","hash":"d49183e1ef3492b01bd57bb5497c01ea0c2f05d8","modified":1553605308350},{"_id":"public/2016/07/18/Ansible-Inventory-file/index.html","hash":"9767165ec731ff169a7ff201648af8ee4b054db6","modified":1553605308350},{"_id":"public/2016/03/01/docs/index.html","hash":"1818c2a5bf89daabfa96103b43c33875d2169167","modified":1553605308351},{"_id":"public/2016/02/14/how-to-install-Python-3-quickly/index.html","hash":"816c5d6ff88fd6ae3d4c35e7491206a697780497","modified":1553605308351},{"_id":"public/2016/01/29/how-to-save-files-using-sudo-without-quitting-vim/index.html","hash":"4a9d28495072355fa9239cf471a40f894cf847ba","modified":1553605308351},{"_id":"public/2015/12/13/the-difference-between-MyISAM-and-InnoDB-in-MySQL/index.html","hash":"07004238d2b0dcd14c31b352ea4c868f8977b73d","modified":1553605308351},{"_id":"public/2015/10/13/list-deduplication-in-Python/index.html","hash":"9ccdb61a21e8fec7a7464a01a8202504fc66cae7","modified":1553605308351},{"_id":"public/2015/10/11/why-WITH-block-is-recommended-for-reading-and-writing-files/index.html","hash":"17c28cf1df138c1f4083ef655ceaa1a287218e23","modified":1553605308351},{"_id":"public/2015/08/19/new-class-and-classic-class-in-Python/index.html","hash":"8700c284be24a7297efde36224f60bb4e3c00044","modified":1553605308364},{"_id":"public/2015/06/28/how-to-fix-Python-UnicodeEncodeError-on-Windows/index.html","hash":"81a30ca310ec00c8397483e43de013634f519998","modified":1553605308364},{"_id":"public/2015/03/15/how-to-SSH-with-sshekeys/index.html","hash":"49ae5613d4e605a4801b66d46239db4484e5c4bd","modified":1553605308364},{"_id":"public/2015/03/01/set-alias-for-remote-hosts/index.html","hash":"80ea3de53059ba23d64a769210e03239b0ddf435","modified":1553605308364},{"_id":"public/2015/02/13/pitfalls-of-online-installing-plugin-in-WordPress/index.html","hash":"d7adc9f7bfd0233b83f1893646ac97c3700e7091","modified":1553605308365},{"_id":"public/2014/12/03/the-transformation-among-timestamp-formatted-time-datetime-and-time-tuple-in-Python/index.html","hash":"8d861fb67fd4c531198728db89487d4c95d7fbea","modified":1553605308365},{"_id":"public/2014/11/29/how-to-build-LAMP-environment-on-CentOS-7/index.html","hash":"24da06d3180ca6638eb7e5d0298c030986f285ee","modified":1553605308365},{"_id":"public/archives/index.html","hash":"47eff2c344eb5c72191dee2542b87ed026a97812","modified":1553605308365},{"_id":"public/archives/page/2/index.html","hash":"b734a2bfa8c1b2966503c5adc16db23860b91c70","modified":1553605308365},{"_id":"public/archives/page/3/index.html","hash":"462653ab6ad9accaa782122a4433288d403f202f","modified":1553605308365},{"_id":"public/archives/2014/index.html","hash":"851ccf66f9672b284c5f133903cdcd0d59b6da84","modified":1553605308365},{"_id":"public/archives/2014/11/index.html","hash":"6c92f40795f823c61c6c6d20677e2eecd8115d6d","modified":1553605308365},{"_id":"public/archives/2014/12/index.html","hash":"37cf1cbd9db5591913e8c7a6d42723b495dc4f90","modified":1553605308365},{"_id":"public/archives/2015/index.html","hash":"17770081b6e54b69d3a8467f12008aa01093cd9e","modified":1553605308365},{"_id":"public/archives/2015/02/index.html","hash":"0c31b8c00d021b9ee4e1ea9508c4de6df403ff15","modified":1553605308365},{"_id":"public/archives/2015/03/index.html","hash":"c3610bd4861e20a66d60bbb03fd54351645dd083","modified":1553605308365},{"_id":"public/archives/2015/06/index.html","hash":"50c6f6dce40b1f630beefd35bfba52d0bf151600","modified":1553605308366},{"_id":"public/archives/2015/08/index.html","hash":"c71426b5647c3cd902726d3ece72755a30ec494f","modified":1553605308366},{"_id":"public/archives/2015/10/index.html","hash":"2e2cb9bc5563e08744246b5f734ec74e902208d9","modified":1553605308366},{"_id":"public/archives/2015/12/index.html","hash":"864d9481621bcfcac640e381d853db2e0edf9ae5","modified":1553605308366},{"_id":"public/archives/2016/index.html","hash":"1ed1195be25a25e890af106427d4599150a664bb","modified":1553605308366},{"_id":"public/archives/2016/01/index.html","hash":"df9d9de67426c7cdf7dad0ea542c12811a04bf6d","modified":1553605308366},{"_id":"public/archives/2016/02/index.html","hash":"ccb7e74a1ec58495f6c38674b5b62b44d569134d","modified":1553605308366},{"_id":"public/archives/2016/03/index.html","hash":"b549826932f7f6dd81d049c225f30460b30640cd","modified":1553605308366},{"_id":"public/archives/2016/07/index.html","hash":"7bd0ad854ebc7443844fa731f3edf63cc114754e","modified":1553605308368},{"_id":"public/archives/2016/09/index.html","hash":"f82f3ffd308995312d627ba7c1325e0ada7d5b54","modified":1553605308369},{"_id":"public/archives/2016/12/index.html","hash":"c3802cc51fee9e91fb936534dacef52ee68f36c3","modified":1553605308369},{"_id":"public/archives/2017/index.html","hash":"d8f79d11e982a6f5be2d493056fde215783fbcdc","modified":1553605308369},{"_id":"public/archives/2017/02/index.html","hash":"8bee6b168f82521eb947350de700726f9af84651","modified":1553605308369},{"_id":"public/archives/2017/03/index.html","hash":"7b0c790915b67cf5e91b8b6ba075dde372672837","modified":1553605308369},{"_id":"public/archives/2017/04/index.html","hash":"ccc71d9d5e2616422030cf70025dc08ff59651d9","modified":1553605308369},{"_id":"public/archives/2017/08/index.html","hash":"54040a8926f6ea88fb88c743fd0eac98685fb280","modified":1553605308369},{"_id":"public/archives/2018/index.html","hash":"8ea9c727d06f84c5b49f3fd83738823a0052b18c","modified":1553605308369},{"_id":"public/archives/2018/04/index.html","hash":"2c615d87e11426a10a70f37d008c83e59b6f3ad9","modified":1553605308369},{"_id":"public/archives/2018/07/index.html","hash":"c6e7ae31955fc6d6d0880c44b0210a3878a6c974","modified":1553605308370},{"_id":"public/archives/2018/08/index.html","hash":"589900dc9c9f7c59acf937a01e1d68421302f0f3","modified":1553605308370},{"_id":"public/archives/2018/10/index.html","hash":"df7f0898b0588a44cbc352adaf5ce4a6a44f3340","modified":1553605308370},{"_id":"public/archives/2018/11/index.html","hash":"9022166626137be5c0d70f5f8957f2559039c599","modified":1553605308370},{"_id":"public/archives/2018/12/index.html","hash":"c55b458490ceaaa79a109f2ef20cd814de874c67","modified":1553605308370},{"_id":"public/index.html","hash":"c1b56f9af23210ff663e6a92912bbfab67e3ce24","modified":1553605308370},{"_id":"public/page/2/index.html","hash":"03751227110d0e1cad8101e8d62ff9fb2261625d","modified":1553605308370},{"_id":"public/page/3/index.html","hash":"f0ebee65c326e0e2ec08111027a6f0cc23961a43","modified":1553605308370},{"_id":"public/page/4/index.html","hash":"1eb9d053b2b7eae4f2e8e11fa3c1fa3e4303dc33","modified":1553605308370},{"_id":"public/page/5/index.html","hash":"5b7f274848aedabeea73bea65cf8b722ab8da77a","modified":1553605308371},{"_id":"public/page/6/index.html","hash":"f6f4cb0bfb85fe0c20c09bbd0a6a1ace27d5c9af","modified":1553605308371},{"_id":"public/tags/Ansible/index.html","hash":"f853b8d490adf3bcee41b846a3634fe562338da0","modified":1553605308371},{"_id":"public/tags/YAML/index.html","hash":"b10c56770989f68421c1d7f20337a46a9af40e5d","modified":1553605308371},{"_id":"public/tags/Docker/index.html","hash":"a7bcee44c44702bc404548efe7f6d53d6f3c63e4","modified":1553605308371},{"_id":"public/tags/MySQL/index.html","hash":"cedeb45222c60b236348d8cd955e36720a4b4488","modified":1553605308371},{"_id":"public/tags/坑/index.html","hash":"0c3cd440c6d009ec8461f9ff111c36639cc2447b","modified":1553605308371},{"_id":"public/tags/Python/index.html","hash":"f1d9d9576b724016e0920a2f76a36068c99e6bf8","modified":1553605308372},{"_id":"public/tags/Python/page/2/index.html","hash":"508e60af812673b4de209c3e2cf6cfd670d95cc0","modified":1553605308372},{"_id":"public/tags/正则表达式/index.html","hash":"dda078c4a2ac60a574a3f843fba20365ba13c289","modified":1553605308372},{"_id":"public/tags/文档/index.html","hash":"5647e075f07cd21a3170e60fde9f5b58370ea053","modified":1553605308372},{"_id":"public/tags/奇技淫巧/index.html","hash":"aec422bf5ddcf5edbfb6b3927af37d8abe9ada18","modified":1553605308372},{"_id":"public/tags/Linux/index.html","hash":"fbf8d79cccc331d8b88cd9c9cf28bf736c33b65a","modified":1553605308372},{"_id":"public/tags/ssh/index.html","hash":"517b45d708db0aefb08192c9e9025bb57f8ad0bd","modified":1553605308372},{"_id":"public/tags/Apache/index.html","hash":"8326ad26b6b785a173b92353b90537b44fbe7a9e","modified":1553605308372},{"_id":"public/tags/LAMP/index.html","hash":"1e3c4c52f61f2e4d5ae816ff084ae2b7de61c759","modified":1553605308375},{"_id":"public/tags/PHP/index.html","hash":"0f3823a14d2c825fafeabac1ab596036d9e0473a","modified":1553605308375},{"_id":"public/tags/Windows/index.html","hash":"e28c9b722371f5cf9d960780fa1ebb37f383b6a5","modified":1553605308375},{"_id":"public/tags/编码/index.html","hash":"6ac52c8c229190dedc8df69065be6d4d0d44f1d1","modified":1553605308375},{"_id":"public/tags/快速安装/index.html","hash":"9eb9488b4d04813bda7c9e71d1204c5d109d7ce3","modified":1553605308375},{"_id":"public/tags/Ruby/index.html","hash":"2aa1e01d99e204d92090e9cbd95bffb7858dd35f","modified":1553605308375},{"_id":"public/tags/zsh/index.html","hash":"debbac7640fe404ae5108d1f5e655a530bda9134","modified":1553605308375},{"_id":"public/tags/vim/index.html","hash":"3cca525b5b8de71a010691cfb31747628b64a6e9","modified":1553605308376},{"_id":"public/tags/Firefox/index.html","hash":"18161457bf517960738a608d9c17ae58a9cb88f7","modified":1553605308376},{"_id":"public/tags/PhantomJS/index.html","hash":"2ba1faee79cb189dfcb2512fe49f2515eb8b73fa","modified":1553605308376},{"_id":"public/tags/Selenium/index.html","hash":"a35a17d75a1b187e555ab63aae4d32f03a009f90","modified":1553605308376},{"_id":"public/tags/Saltstack/index.html","hash":"00b3e169004093b2b497d2c14eb16f23ed2d7f6e","modified":1553605308376},{"_id":"public/tags/类/index.html","hash":"ed09fb12011bc4485231738de5d5016d374c18eb","modified":1553605308376},{"_id":"public/tags/WordPress/index.html","hash":"23847ec1ee9a687b51a749849942a60dcd32e28f","modified":1553605308376},{"_id":"public/CNAME","hash":"700ec67224fab5638bebbb0b908cf4ec19fd0a8f","modified":1553605308403},{"_id":"public/images/algolia_logo.svg","hash":"ec119560b382b2624e00144ae01c137186e91621","modified":1553605308403},{"_id":"public/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1553605308404},{"_id":"public/images/avatar.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1553605308404},{"_id":"public/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1553605308404},{"_id":"public/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1553605308404},{"_id":"public/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1553605308404},{"_id":"public/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1553605308404},{"_id":"public/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1553605308404},{"_id":"public/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1553605308404},{"_id":"public/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1553605308404},{"_id":"public/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1553605308404},{"_id":"public/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1553605308404},{"_id":"public/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1553605308404},{"_id":"public/images/logo.svg","hash":"d29cacbae1bdc4bbccb542107ee0524fe55ad6de","modified":1553605308405},{"_id":"public/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1553605308405},{"_id":"public/images/quote-l.svg","hash":"94e870b4c8c48da61d09522196d4dd40e277a98f","modified":1553605308405},{"_id":"public/images/quote-r.svg","hash":"e60ae504f9d99b712c793c3740c6b100d057d4ec","modified":1553605308405},{"_id":"public/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1553605308405},{"_id":"public/lib/fastclick/LICENSE","hash":"dcd5b6b43095d9e90353a28b09cb269de8d4838e","modified":1553605308405},{"_id":"public/lib/font-awesome/HELP-US-OUT.txt","hash":"4f7bf961f1bed448f6ba99aeb9219fabf930ba96","modified":1553605308405},{"_id":"public/lib/fancybox/source/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1553605308405},{"_id":"public/lib/fancybox/source/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1553605308405},{"_id":"public/lib/fancybox/source/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1553605308405},{"_id":"public/lib/fancybox/source/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1553605308405},{"_id":"public/lib/fancybox/source/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1553605308406},{"_id":"public/lib/fancybox/source/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1553605308406},{"_id":"public/lib/font-awesome/css/font-awesome.css.map","hash":"0189d278706509412bac4745f96c83984e1d59f4","modified":1553605308406},{"_id":"public/lib/Han/dist/font/han-space.otf","hash":"07436f011b44051f61b8329c99de4bec64e86f4b","modified":1553605308406},{"_id":"public/lib/Han/dist/font/han-space.woff","hash":"7a635062b10bf5662ae1d218ba0980171005d060","modified":1553605308406},{"_id":"public/lib/Han/dist/font/han.otf","hash":"f1f6bb8f461f5672e000380195d3d2358a28494c","modified":1553605308406},{"_id":"public/lib/Han/dist/font/han.woff","hash":"f38ff9b2eecaa17b50b66aa2dae87e9e7436d195","modified":1553605308406},{"_id":"public/lib/Han/dist/font/han.woff2","hash":"623af3ed5423371ac136a4fe0e8cc7bb7396037a","modified":1553605308406},{"_id":"public/lib/fancybox/source/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1553605308407},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1553605310352},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1553605310394},{"_id":"public/js/src/affix.js","hash":"978e0422b5bf1b560236d8d10ebc1adcf66392e3","modified":1553605310562},{"_id":"public/js/src/algolia-search.js","hash":"b172f697ed339a24b1e80261075232978d164c35","modified":1553605310562},{"_id":"public/js/src/bootstrap.js","hash":"034bc8113e0966fe2096ba5b56061bbf10ef0512","modified":1553605310562},{"_id":"public/js/src/exturl.js","hash":"e42e2aaab7bf4c19a0c8e779140e079c6aa5c0b1","modified":1553605310562},{"_id":"public/js/src/hook-duoshuo.js","hash":"a6119070c0119f33e08b29da7d2cce2635eb40a0","modified":1553605310562},{"_id":"public/js/src/js.cookie.js","hash":"9b37973a90fd50e71ea91682265715e45ae82c75","modified":1553605310562},{"_id":"public/js/src/motion.js","hash":"754b294394f102c8fd9423a1789ddb1201677898","modified":1553605310563},{"_id":"public/js/src/post-details.js","hash":"a13f45f7aa8291cf7244ec5ba93907d119c5dbdd","modified":1553605310563},{"_id":"public/js/src/scroll-cookie.js","hash":"09dc828cbf5f31158ff6250d2bf7c3cde6365c67","modified":1553605310563},{"_id":"public/js/src/scrollspy.js","hash":"fe4da1b9fe73518226446f5f27d2831e4426fc35","modified":1553605310563},{"_id":"public/js/src/utils.js","hash":"9b1325801d27213083d1487a12b1a62b539ab6f8","modified":1553605310563},{"_id":"public/lib/algolia-instant-search/instantsearch.min.css","hash":"90ef19edc982645b118b095615838d9c5eaba0de","modified":1553605310563},{"_id":"public/lib/canvas-nest/canvas-nest.min.js","hash":"0387e75e23b1db108a755073fe52a0d03eb391a7","modified":1553605310563},{"_id":"public/lib/canvas-ribbon/canvas-ribbon.js","hash":"ff5915eb2596e890a2fc6697c864f861a1995ec0","modified":1553605310563},{"_id":"public/lib/fastclick/bower.json","hash":"4dcecf83afddba148464d5339c93f6d0aa9f42e9","modified":1553605310563},{"_id":"public/lib/font-awesome/bower.json","hash":"64394a2a9aa00f8e321d8daa5e51a420f0e96dad","modified":1553605310563},{"_id":"public/lib/jquery_lazyload/bower.json","hash":"ae3c3b61e6e7f9e1d7e3585ad854380ecc04cf53","modified":1553605310563},{"_id":"public/lib/jquery_lazyload/jquery.lazyload.js","hash":"481fd478650e12b67c201a0ea41e92743f8b45a3","modified":1553605310564},{"_id":"public/lib/jquery_lazyload/jquery.scrollstop.js","hash":"0e9a81785a011c98be5ea821a8ed7d411818cfd1","modified":1553605310564},{"_id":"public/lib/needsharebutton/needsharebutton.css","hash":"3ef0020a1815ca6151ea4886cd0d37421ae3695c","modified":1553605310564},{"_id":"public/lib/pace/pace-theme-barber-shop.min.css","hash":"ee0d51446cb4ffe1bb96bd7bc8c8e046dddfcf46","modified":1553605310564},{"_id":"public/lib/pace/pace-theme-big-counter.min.css","hash":"5b561dc328af4c4d512e20a76fe964d113a32ba8","modified":1553605310564},{"_id":"public/lib/pace/pace-theme-bounce.min.css","hash":"f6bdb9a785b7979dd8ec5c60e278af955ef1e585","modified":1553605310564},{"_id":"public/lib/pace/pace-theme-center-atom.min.css","hash":"dcf79c24fe5350fb73d8038573a104e73639e9d3","modified":1553605310564},{"_id":"public/lib/pace/pace-theme-center-circle.min.css","hash":"a4066769c78affbfbc5e30a600e2c7862cd532e0","modified":1553605310564},{"_id":"public/lib/pace/pace-theme-center-radar.min.css","hash":"ab7cba998bf4c03b13df342bf43647fa4f419783","modified":1553605310565},{"_id":"public/lib/pace/pace-theme-center-simple.min.css","hash":"67f44c947548bd4d77e7590d3f59e236cbf9e98a","modified":1553605310565},{"_id":"public/lib/pace/pace-theme-corner-indicator.min.css","hash":"b3c64c973f31884e3d8145989476707333406b9a","modified":1553605310565},{"_id":"public/lib/pace/pace-theme-fill-left.min.css","hash":"0bec1e235a4a2cccda3f993b205424e1441a44ae","modified":1553605310565},{"_id":"public/lib/pace/pace-theme-flash.min.css","hash":"13ace22c40312d7bbd8d9c1e50eff897a7a497d8","modified":1553605310565},{"_id":"public/lib/pace/pace-theme-loading-bar.min.css","hash":"7ee28875dfc1230d76c537f6605766e8d4011e9f","modified":1553605310565},{"_id":"public/lib/pace/pace-theme-mac-osx.min.css","hash":"9f2e7b51b084da407863826b25265b31150b3821","modified":1553605310565},{"_id":"public/lib/pace/pace-theme-minimal.min.css","hash":"9cd783cceb8a191f3c8b5d81f7a430ecc3e489d3","modified":1553605310565},{"_id":"public/lib/pace/pace.min.js","hash":"9944dfb7814b911090e96446cea4d36e2b487234","modified":1553605310565},{"_id":"public/lib/velocity/bower.json","hash":"0ef14e7ccdfba5db6eb3f8fc6aa3b47282c36409","modified":1553605310566},{"_id":"public/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1553605310566},{"_id":"public/js/src/schemes/pisces.js","hash":"8050a5b2683d1d77238c5762b6bd89c543daed6e","modified":1553605310566},{"_id":"public/lib/fancybox/source/jquery.fancybox.css","hash":"5f163444617b6cf267342f06ac166a237bb62df9","modified":1553605310566},{"_id":"public/lib/fastclick/lib/fastclick.min.js","hash":"2cae0f5a6c5d6f3cb993015e6863f9483fc4de18","modified":1553605310566},{"_id":"public/lib/ua-parser-js/dist/ua-parser.min.js","hash":"38628e75e4412cc6f11074e03e1c6d257aae495b","modified":1553605310566},{"_id":"public/lib/ua-parser-js/dist/ua-parser.pack.js","hash":"214dad442a92d36af77ed0ca1d9092b16687f02f","modified":1553605310566},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1553605310566},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","hash":"91e41741c2e93f732c82aaacec4cfc6e3f3ec876","modified":1553605310566},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-media.js","hash":"3bdf69ed2469e4fb57f5a95f17300eef891ff90d","modified":1553605310567},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1553605310567},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","hash":"53e194f4a72e649c04fb586dd57762b8c022800b","modified":1553605310567},{"_id":"public/lib/fastclick/README.html","hash":"da3c74d484c73cc7df565e8abbfa4d6a5a18d4da","modified":1553605310567},{"_id":"public/lib/jquery_lazyload/CONTRIBUTING.html","hash":"a6358170d346af13b1452ac157b60505bec7015c","modified":1553605310567},{"_id":"public/lib/jquery_lazyload/README.html","hash":"bde24335f6bc09d8801c0dcd7274f71b466552bd","modified":1553605310601},{"_id":"public/lib/needsharebutton/font-embedded.css","hash":"c39d37278c1e178838732af21bd26cd0baeddfe0","modified":1553605310601},{"_id":"public/lib/needsharebutton/needsharebutton.js","hash":"9885fd9bea5e7ebafc5b1de9d17be5e106248d96","modified":1553605310601},{"_id":"public/lib/three/canvas_lines.min.js","hash":"dce4a3b65f8bf958f973690caa7ec4952f353b0c","modified":1553605310601},{"_id":"public/lib/three/canvas_sphere.min.js","hash":"d8ea241a53c135a650f7335d2b6982b899fd58a9","modified":1553605310601},{"_id":"public/lib/three/three-waves.min.js","hash":"d968cba6b3a50b3626a02d67b544f349d83b147c","modified":1553605310601},{"_id":"public/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1553605310601},{"_id":"public/lib/velocity/velocity.ui.js","hash":"6a1d101eab3de87527bb54fcc8c7b36b79d8f0df","modified":1553605310601},{"_id":"public/lib/jquery/index.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1553605310602},{"_id":"public/lib/Han/dist/han.css","hash":"bd40da3fba8735df5850956814e312bd7b3193d7","modified":1553605310602},{"_id":"public/lib/Han/dist/han.min.css","hash":"a0c9e32549a8b8cf327ab9227b037f323cdb60ee","modified":1553605310602},{"_id":"public/lib/Han/dist/han.min.js","hash":"f559c68a25065a14f47da954a7617d87263e409d","modified":1553605310602},{"_id":"public/lib/fancybox/source/jquery.fancybox.js","hash":"1cf3d47b5ccb7cb6e9019c64f2a88d03a64853e4","modified":1553605310602},{"_id":"public/lib/fancybox/source/jquery.fancybox.pack.js","hash":"53360764b429c212f424399384417ccc233bb3be","modified":1553605310602},{"_id":"public/lib/fastclick/lib/fastclick.js","hash":"06cef196733a710e77ad7e386ced6963f092dc55","modified":1553605310602},{"_id":"public/lib/font-awesome/css/font-awesome.css","hash":"0140952c64e3f2b74ef64e050f2fe86eab6624c8","modified":1553605310602},{"_id":"public/lib/font-awesome/css/font-awesome.min.css","hash":"512c7d79033e3028a9be61b540cf1a6870c896f8","modified":1553605310603},{"_id":"public/lib/Han/dist/han.js","hash":"e345397e0585c9fed1449e614ec13e0224acf2ab","modified":1553605310603},{"_id":"public/css/main.css","hash":"5d82b853287b24ce3f040b8bd2580f94884abb39","modified":1553605310603},{"_id":"public/lib/velocity/velocity.js","hash":"9f08181baea0cc0e906703b7e5df9111b9ef3373","modified":1553605310603},{"_id":"public/lib/algolia-instant-search/instantsearch.min.js","hash":"9ccc6f8144f54e86df9a3fd33a18368d81cf3a4f","modified":1553605310603},{"_id":"public/lib/three/three.min.js","hash":"73f4cdc17e51a72b9bf5b9291f65386d615c483b","modified":1553605310603},{"_id":"public/lib/font-awesome/fonts/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":1553605310604},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1553605310604},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":1553605310604},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.svg","hash":"98a8aa5cf7d62c2eff5f07ede8d844b874ef06ed","modified":1553605310669}],"Category":[],"Data":[],"Page":[{"title":"Something about this site...","date":"2018-11-29T01:51:31.000Z","_content":"\n## 2018.11\n\n阿里云越来越贵了，不得已只能将 [hankchow.net](http://hankchow.net) 迁移至此。\n\n反正对于博客来说基本都是静态内容，不会造成太大的影响。 \n\n## 2014.7\n\n[hankchow.net](http://hankchow.net) 开始部署在阿里云。\n","source":"about/index.md","raw":"---\ntitle: Something about this site...\ndate: 2018-11-29 09:51:31\n---\n\n## 2018.11\n\n阿里云越来越贵了，不得已只能将 [hankchow.net](http://hankchow.net) 迁移至此。\n\n反正对于博客来说基本都是静态内容，不会造成太大的影响。 \n\n## 2014.7\n\n[hankchow.net](http://hankchow.net) 开始部署在阿里云。\n","updated":"2019-03-26T13:00:08.984Z","path":"about/index.html","comments":1,"layout":"page","_id":"cjtpsharf0001lrpqhqrkrmke","content":"<h2 id=\"2018-11\"><a href=\"#2018-11\" class=\"headerlink\" title=\"2018.11\"></a>2018.11</h2><p>阿里云越来越贵了，不得已只能将 <a href=\"http://hankchow.net\" target=\"_blank\" rel=\"noopener\">hankchow.net</a> 迁移至此。</p>\n<p>反正对于博客来说基本都是静态内容，不会造成太大的影响。 </p>\n<h2 id=\"2014-7\"><a href=\"#2014-7\" class=\"headerlink\" title=\"2014.7\"></a>2014.7</h2><p><a href=\"http://hankchow.net\" target=\"_blank\" rel=\"noopener\">hankchow.net</a> 开始部署在阿里云。</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"2018-11\"><a href=\"#2018-11\" class=\"headerlink\" title=\"2018.11\"></a>2018.11</h2><p>阿里云越来越贵了，不得已只能将 <a href=\"http://hankchow.net\" target=\"_blank\" rel=\"noopener\">hankchow.net</a> 迁移至此。</p>\n<p>反正对于博客来说基本都是静态内容，不会造成太大的影响。 </p>\n<h2 id=\"2014-7\"><a href=\"#2014-7\" class=\"headerlink\" title=\"2014.7\"></a>2014.7</h2><p><a href=\"http://hankchow.net\" target=\"_blank\" rel=\"noopener\">hankchow.net</a> 开始部署在阿里云。</p>\n"},{"title":"tags","date":"2018-11-29T04:11:00.000Z","_content":"","source":"tags/index.md","raw":"---\ntitle: tags\ndate: 2018-11-29 12:11:00\n---\n","updated":"2019-03-26T13:00:08.984Z","path":"tags/index.html","comments":1,"layout":"page","_id":"cjtpsharj0003lrpq6z9hpd0l","content":"","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"title":"Ansible Inventory 文件","date":"2016-07-18T02:07:21.000Z","_content":"\nAnsible 的 Inventory 文件主要记录了连接主机的信息和配置，默认路径为 `/etc/ansible/hosts`。\n\n在 Inventory 文件中以行为单位直接写入主机的 `host`，如果仅填写了 `host`，则其它信息均按照默认值（如 ssh 端口为22）。也可以按照组的格式进行配置：\n\n```\n[group1]\nhost1\nhost2\n\n[group2]\nhost2\nhost3\n\n[group3:children]\ngroup1\ngroup2\n```\n\n同一个主机可以同时属于多个组，如 host2 可以同时属于 group1 组和 group2 组。组也可以作为另一个组的成员，如 group1 和 group2 就是 group3 的成员，因此 host1、host2、host3 均属于 group3 组。\n\n在每个 host 后可以使用变量来设置一些具体的参数，例如端口、登录用户名等。也可以为整个组设定变量：\n\n```\n[group1:vars]\nansible_ssh_port=2222\nansible_ssh_user=root\n```\n\n常用的 Inventory 参数：\n\n```\nansible_ssh_host\n      将要连接的远程主机名.与你想要设定的主机的别名不同的话,可通过此变量设置.\n\nansible_ssh_port\n      ssh端口号.如果不是默认的端口号,通过此变量设置.\n\nansible_ssh_user\n      默认的 ssh 用户名\n\nansible_ssh_pass\n      ssh 密码(这种方式并不安全,我们强烈建议使用 --ask-pass 或 SSH 密钥)\n\nansible_sudo_pass\n      sudo 密码(这种方式并不安全,我们强烈建议使用 --ask-sudo-pass)\n\nansible_sudo_exe (new in version 1.8)\n      sudo 命令路径(适用于1.8及以上版本)\n\nansible_connection\n      与主机的连接类型.比如:local, ssh 或者 paramiko. Ansible 1.2 以前默认使用paramiko.1.2 以后默认使用 'smart','smart' 方式会根据是否支持 ControlPersist, 来判断'ssh' 方式是否可行.\n\nansible_ssh_private_key_file\n      ssh 使用的私钥文件.适用于有多个密钥,而你不想使用 SSH 代理的情况.\n\nansible_shell_type\n      目标系统的shell类型.默认情况下,命令的执行使用 'sh' 语法,可设置为 'csh' 或 'fish'.\n\nansible_python_interpreter\n      目标主机的 python 路径.适用于的情况: 系统中有多个 Python, 或者命令路径不是\"/usr/bin/python\",比如  \\*BSD, 或者 /usr/bin/python\n      不是 2.X 版本的 Python.我们不使用 \"/usr/bin/env\" 机制,因为这要求远程用户的路径设置正确,且要求 \"python\" 可执行程序名不可为 python以外的名字(实际有可能名为python26).\n\n      与 ansible_python_interpreter 的工作方式相同,可设定如 ruby 或 perl 的路径....\n```\n","source":"_posts/Ansible-Inventory-file.md","raw":"---\ntitle: Ansible Inventory 文件\ndate: 2016-07-18 10:07:21\ntags:\n  - Ansible\n---\n\nAnsible 的 Inventory 文件主要记录了连接主机的信息和配置，默认路径为 `/etc/ansible/hosts`。\n\n在 Inventory 文件中以行为单位直接写入主机的 `host`，如果仅填写了 `host`，则其它信息均按照默认值（如 ssh 端口为22）。也可以按照组的格式进行配置：\n\n```\n[group1]\nhost1\nhost2\n\n[group2]\nhost2\nhost3\n\n[group3:children]\ngroup1\ngroup2\n```\n\n同一个主机可以同时属于多个组，如 host2 可以同时属于 group1 组和 group2 组。组也可以作为另一个组的成员，如 group1 和 group2 就是 group3 的成员，因此 host1、host2、host3 均属于 group3 组。\n\n在每个 host 后可以使用变量来设置一些具体的参数，例如端口、登录用户名等。也可以为整个组设定变量：\n\n```\n[group1:vars]\nansible_ssh_port=2222\nansible_ssh_user=root\n```\n\n常用的 Inventory 参数：\n\n```\nansible_ssh_host\n      将要连接的远程主机名.与你想要设定的主机的别名不同的话,可通过此变量设置.\n\nansible_ssh_port\n      ssh端口号.如果不是默认的端口号,通过此变量设置.\n\nansible_ssh_user\n      默认的 ssh 用户名\n\nansible_ssh_pass\n      ssh 密码(这种方式并不安全,我们强烈建议使用 --ask-pass 或 SSH 密钥)\n\nansible_sudo_pass\n      sudo 密码(这种方式并不安全,我们强烈建议使用 --ask-sudo-pass)\n\nansible_sudo_exe (new in version 1.8)\n      sudo 命令路径(适用于1.8及以上版本)\n\nansible_connection\n      与主机的连接类型.比如:local, ssh 或者 paramiko. Ansible 1.2 以前默认使用paramiko.1.2 以后默认使用 'smart','smart' 方式会根据是否支持 ControlPersist, 来判断'ssh' 方式是否可行.\n\nansible_ssh_private_key_file\n      ssh 使用的私钥文件.适用于有多个密钥,而你不想使用 SSH 代理的情况.\n\nansible_shell_type\n      目标系统的shell类型.默认情况下,命令的执行使用 'sh' 语法,可设置为 'csh' 或 'fish'.\n\nansible_python_interpreter\n      目标主机的 python 路径.适用于的情况: 系统中有多个 Python, 或者命令路径不是\"/usr/bin/python\",比如  \\*BSD, 或者 /usr/bin/python\n      不是 2.X 版本的 Python.我们不使用 \"/usr/bin/env\" 机制,因为这要求远程用户的路径设置正确,且要求 \"python\" 可执行程序名不可为 python以外的名字(实际有可能名为python26).\n\n      与 ansible_python_interpreter 的工作方式相同,可设定如 ruby 或 perl 的路径....\n```\n","slug":"Ansible-Inventory-file","published":1,"updated":"2019-03-26T13:00:08.981Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjtpshar40000lrpqpixvlw9n","content":"<p>Ansible 的 Inventory 文件主要记录了连接主机的信息和配置，默认路径为 <code>/etc/ansible/hosts</code>。</p>\n<p>在 Inventory 文件中以行为单位直接写入主机的 <code>host</code>，如果仅填写了 <code>host</code>，则其它信息均按照默认值（如 ssh 端口为22）。也可以按照组的格式进行配置：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[group1]</span><br><span class=\"line\">host1</span><br><span class=\"line\">host2</span><br><span class=\"line\"></span><br><span class=\"line\">[group2]</span><br><span class=\"line\">host2</span><br><span class=\"line\">host3</span><br><span class=\"line\"></span><br><span class=\"line\">[group3:children]</span><br><span class=\"line\">group1</span><br><span class=\"line\">group2</span><br></pre></td></tr></table></figure>\n<p>同一个主机可以同时属于多个组，如 host2 可以同时属于 group1 组和 group2 组。组也可以作为另一个组的成员，如 group1 和 group2 就是 group3 的成员，因此 host1、host2、host3 均属于 group3 组。</p>\n<p>在每个 host 后可以使用变量来设置一些具体的参数，例如端口、登录用户名等。也可以为整个组设定变量：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[group1:vars]</span><br><span class=\"line\">ansible_ssh_port=2222</span><br><span class=\"line\">ansible_ssh_user=root</span><br></pre></td></tr></table></figure>\n<p>常用的 Inventory 参数：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ansible_ssh_host</span><br><span class=\"line\">      将要连接的远程主机名.与你想要设定的主机的别名不同的话,可通过此变量设置.</span><br><span class=\"line\"></span><br><span class=\"line\">ansible_ssh_port</span><br><span class=\"line\">      ssh端口号.如果不是默认的端口号,通过此变量设置.</span><br><span class=\"line\"></span><br><span class=\"line\">ansible_ssh_user</span><br><span class=\"line\">      默认的 ssh 用户名</span><br><span class=\"line\"></span><br><span class=\"line\">ansible_ssh_pass</span><br><span class=\"line\">      ssh 密码(这种方式并不安全,我们强烈建议使用 --ask-pass 或 SSH 密钥)</span><br><span class=\"line\"></span><br><span class=\"line\">ansible_sudo_pass</span><br><span class=\"line\">      sudo 密码(这种方式并不安全,我们强烈建议使用 --ask-sudo-pass)</span><br><span class=\"line\"></span><br><span class=\"line\">ansible_sudo_exe (new in version 1.8)</span><br><span class=\"line\">      sudo 命令路径(适用于1.8及以上版本)</span><br><span class=\"line\"></span><br><span class=\"line\">ansible_connection</span><br><span class=\"line\">      与主机的连接类型.比如:local, ssh 或者 paramiko. Ansible 1.2 以前默认使用paramiko.1.2 以后默认使用 &apos;smart&apos;,&apos;smart&apos; 方式会根据是否支持 ControlPersist, 来判断&apos;ssh&apos; 方式是否可行.</span><br><span class=\"line\"></span><br><span class=\"line\">ansible_ssh_private_key_file</span><br><span class=\"line\">      ssh 使用的私钥文件.适用于有多个密钥,而你不想使用 SSH 代理的情况.</span><br><span class=\"line\"></span><br><span class=\"line\">ansible_shell_type</span><br><span class=\"line\">      目标系统的shell类型.默认情况下,命令的执行使用 &apos;sh&apos; 语法,可设置为 &apos;csh&apos; 或 &apos;fish&apos;.</span><br><span class=\"line\"></span><br><span class=\"line\">ansible_python_interpreter</span><br><span class=\"line\">      目标主机的 python 路径.适用于的情况: 系统中有多个 Python, 或者命令路径不是&quot;/usr/bin/python&quot;,比如  \\*BSD, 或者 /usr/bin/python</span><br><span class=\"line\">      不是 2.X 版本的 Python.我们不使用 &quot;/usr/bin/env&quot; 机制,因为这要求远程用户的路径设置正确,且要求 &quot;python&quot; 可执行程序名不可为 python以外的名字(实际有可能名为python26).</span><br><span class=\"line\"></span><br><span class=\"line\">      与 ansible_python_interpreter 的工作方式相同,可设定如 ruby 或 perl 的路径....</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<p>Ansible 的 Inventory 文件主要记录了连接主机的信息和配置，默认路径为 <code>/etc/ansible/hosts</code>。</p>\n<p>在 Inventory 文件中以行为单位直接写入主机的 <code>host</code>，如果仅填写了 <code>host</code>，则其它信息均按照默认值（如 ssh 端口为22）。也可以按照组的格式进行配置：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[group1]</span><br><span class=\"line\">host1</span><br><span class=\"line\">host2</span><br><span class=\"line\"></span><br><span class=\"line\">[group2]</span><br><span class=\"line\">host2</span><br><span class=\"line\">host3</span><br><span class=\"line\"></span><br><span class=\"line\">[group3:children]</span><br><span class=\"line\">group1</span><br><span class=\"line\">group2</span><br></pre></td></tr></table></figure>\n<p>同一个主机可以同时属于多个组，如 host2 可以同时属于 group1 组和 group2 组。组也可以作为另一个组的成员，如 group1 和 group2 就是 group3 的成员，因此 host1、host2、host3 均属于 group3 组。</p>\n<p>在每个 host 后可以使用变量来设置一些具体的参数，例如端口、登录用户名等。也可以为整个组设定变量：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[group1:vars]</span><br><span class=\"line\">ansible_ssh_port=2222</span><br><span class=\"line\">ansible_ssh_user=root</span><br></pre></td></tr></table></figure>\n<p>常用的 Inventory 参数：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ansible_ssh_host</span><br><span class=\"line\">      将要连接的远程主机名.与你想要设定的主机的别名不同的话,可通过此变量设置.</span><br><span class=\"line\"></span><br><span class=\"line\">ansible_ssh_port</span><br><span class=\"line\">      ssh端口号.如果不是默认的端口号,通过此变量设置.</span><br><span class=\"line\"></span><br><span class=\"line\">ansible_ssh_user</span><br><span class=\"line\">      默认的 ssh 用户名</span><br><span class=\"line\"></span><br><span class=\"line\">ansible_ssh_pass</span><br><span class=\"line\">      ssh 密码(这种方式并不安全,我们强烈建议使用 --ask-pass 或 SSH 密钥)</span><br><span class=\"line\"></span><br><span class=\"line\">ansible_sudo_pass</span><br><span class=\"line\">      sudo 密码(这种方式并不安全,我们强烈建议使用 --ask-sudo-pass)</span><br><span class=\"line\"></span><br><span class=\"line\">ansible_sudo_exe (new in version 1.8)</span><br><span class=\"line\">      sudo 命令路径(适用于1.8及以上版本)</span><br><span class=\"line\"></span><br><span class=\"line\">ansible_connection</span><br><span class=\"line\">      与主机的连接类型.比如:local, ssh 或者 paramiko. Ansible 1.2 以前默认使用paramiko.1.2 以后默认使用 &apos;smart&apos;,&apos;smart&apos; 方式会根据是否支持 ControlPersist, 来判断&apos;ssh&apos; 方式是否可行.</span><br><span class=\"line\"></span><br><span class=\"line\">ansible_ssh_private_key_file</span><br><span class=\"line\">      ssh 使用的私钥文件.适用于有多个密钥,而你不想使用 SSH 代理的情况.</span><br><span class=\"line\"></span><br><span class=\"line\">ansible_shell_type</span><br><span class=\"line\">      目标系统的shell类型.默认情况下,命令的执行使用 &apos;sh&apos; 语法,可设置为 &apos;csh&apos; 或 &apos;fish&apos;.</span><br><span class=\"line\"></span><br><span class=\"line\">ansible_python_interpreter</span><br><span class=\"line\">      目标主机的 python 路径.适用于的情况: 系统中有多个 Python, 或者命令路径不是&quot;/usr/bin/python&quot;,比如  \\*BSD, 或者 /usr/bin/python</span><br><span class=\"line\">      不是 2.X 版本的 Python.我们不使用 &quot;/usr/bin/env&quot; 机制,因为这要求远程用户的路径设置正确,且要求 &quot;python&quot; 可执行程序名不可为 python以外的名字(实际有可能名为python26).</span><br><span class=\"line\"></span><br><span class=\"line\">      与 ansible_python_interpreter 的工作方式相同,可设定如 ruby 或 perl 的路径....</span><br></pre></td></tr></table></figure>\n"},{"title":"YAML 语法","date":"2016-07-20T02:07:35.000Z","_content":"\nYMAL：YMAL Ain’t Markup Language\n\n```yaml\n---\n# 一位职工记录\nname: Example Developer\njob: Developer\nskill: Elite\nemployed: True\nfoods:\n    - Apple\n    - Orange\n    - Strawberry\n    - Mango\nlanguages:\n    ruby: Elite\n    python: Elite\n    dotnet: Lame\n```\n\n\n* YAML 总是以 --- （三个横杠）作为文件的开始，这是 YAML 格式的一部分；\n* 普通的键值对直接以 key: value 的格式每行存储，冒号后面必须为一个空格；\n* 对于列表，列表中的每个元素都以 - （一个横杠 + 一个空格）开始，且每个元素的缩进相同；\n* 对于字典，字典中的每一个键值对和普通的键值对一样（其实整个文件存储的形式就是键值对），但同一个字典中每个键值对的缩进也要相同；\n* 在值中含有冒号等引起解析歧义的字符时，需要用双引号将整个值包住；\n* 使用 {{ var }} 来引用变量。\n","source":"_posts/YAML-grammar.md","raw":"---\ntitle: YAML 语法\ndate: 2016-07-20 10:07:35\ntags:\n  - YAML\n---\n\nYMAL：YMAL Ain’t Markup Language\n\n```yaml\n---\n# 一位职工记录\nname: Example Developer\njob: Developer\nskill: Elite\nemployed: True\nfoods:\n    - Apple\n    - Orange\n    - Strawberry\n    - Mango\nlanguages:\n    ruby: Elite\n    python: Elite\n    dotnet: Lame\n```\n\n\n* YAML 总是以 --- （三个横杠）作为文件的开始，这是 YAML 格式的一部分；\n* 普通的键值对直接以 key: value 的格式每行存储，冒号后面必须为一个空格；\n* 对于列表，列表中的每个元素都以 - （一个横杠 + 一个空格）开始，且每个元素的缩进相同；\n* 对于字典，字典中的每一个键值对和普通的键值对一样（其实整个文件存储的形式就是键值对），但同一个字典中每个键值对的缩进也要相同；\n* 在值中含有冒号等引起解析歧义的字符时，需要用双引号将整个值包住；\n* 使用 {{ var }} 来引用变量。\n","slug":"YAML-grammar","published":1,"updated":"2019-03-26T13:00:08.981Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjtpsharh0002lrpqocchjs0g","content":"<p>YMAL：YMAL Ain’t Markup Language</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">---</span></span><br><span class=\"line\"><span class=\"comment\"># 一位职工记录</span></span><br><span class=\"line\"><span class=\"attr\">name:</span> <span class=\"string\">Example</span> <span class=\"string\">Developer</span></span><br><span class=\"line\"><span class=\"attr\">job:</span> <span class=\"string\">Developer</span></span><br><span class=\"line\"><span class=\"attr\">skill:</span> <span class=\"string\">Elite</span></span><br><span class=\"line\"><span class=\"attr\">employed:</span> <span class=\"literal\">True</span></span><br><span class=\"line\"><span class=\"attr\">foods:</span></span><br><span class=\"line\"><span class=\"bullet\">    -</span> <span class=\"string\">Apple</span></span><br><span class=\"line\"><span class=\"bullet\">    -</span> <span class=\"string\">Orange</span></span><br><span class=\"line\"><span class=\"bullet\">    -</span> <span class=\"string\">Strawberry</span></span><br><span class=\"line\"><span class=\"bullet\">    -</span> <span class=\"string\">Mango</span></span><br><span class=\"line\"><span class=\"attr\">languages:</span></span><br><span class=\"line\"><span class=\"attr\">    ruby:</span> <span class=\"string\">Elite</span></span><br><span class=\"line\"><span class=\"attr\">    python:</span> <span class=\"string\">Elite</span></span><br><span class=\"line\"><span class=\"attr\">    dotnet:</span> <span class=\"string\">Lame</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li>YAML 总是以 — （三个横杠）作为文件的开始，这是 YAML 格式的一部分；</li>\n<li>普通的键值对直接以 key: value 的格式每行存储，冒号后面必须为一个空格；</li>\n<li>对于列表，列表中的每个元素都以 - （一个横杠 + 一个空格）开始，且每个元素的缩进相同；</li>\n<li>对于字典，字典中的每一个键值对和普通的键值对一样（其实整个文件存储的形式就是键值对），但同一个字典中每个键值对的缩进也要相同；</li>\n<li>在值中含有冒号等引起解析歧义的字符时，需要用双引号将整个值包住；</li>\n<li>使用  来引用变量。</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<p>YMAL：YMAL Ain’t Markup Language</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">---</span></span><br><span class=\"line\"><span class=\"comment\"># 一位职工记录</span></span><br><span class=\"line\"><span class=\"attr\">name:</span> <span class=\"string\">Example</span> <span class=\"string\">Developer</span></span><br><span class=\"line\"><span class=\"attr\">job:</span> <span class=\"string\">Developer</span></span><br><span class=\"line\"><span class=\"attr\">skill:</span> <span class=\"string\">Elite</span></span><br><span class=\"line\"><span class=\"attr\">employed:</span> <span class=\"literal\">True</span></span><br><span class=\"line\"><span class=\"attr\">foods:</span></span><br><span class=\"line\"><span class=\"bullet\">    -</span> <span class=\"string\">Apple</span></span><br><span class=\"line\"><span class=\"bullet\">    -</span> <span class=\"string\">Orange</span></span><br><span class=\"line\"><span class=\"bullet\">    -</span> <span class=\"string\">Strawberry</span></span><br><span class=\"line\"><span class=\"bullet\">    -</span> <span class=\"string\">Mango</span></span><br><span class=\"line\"><span class=\"attr\">languages:</span></span><br><span class=\"line\"><span class=\"attr\">    ruby:</span> <span class=\"string\">Elite</span></span><br><span class=\"line\"><span class=\"attr\">    python:</span> <span class=\"string\">Elite</span></span><br><span class=\"line\"><span class=\"attr\">    dotnet:</span> <span class=\"string\">Lame</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li>YAML 总是以 — （三个横杠）作为文件的开始，这是 YAML 格式的一部分；</li>\n<li>普通的键值对直接以 key: value 的格式每行存储，冒号后面必须为一个空格；</li>\n<li>对于列表，列表中的每个元素都以 - （一个横杠 + 一个空格）开始，且每个元素的缩进相同；</li>\n<li>对于字典，字典中的每一个键值对和普通的键值对一样（其实整个文件存储的形式就是键值对），但同一个字典中每个键值对的缩进也要相同；</li>\n<li>在值中含有冒号等引起解析歧义的字符时，需要用双引号将整个值包住；</li>\n<li>使用  来引用变量。</li>\n</ul>\n"},{"title":"Docker 运行官方 MySQL 镜像无法远程连接的坑","date":"2018-11-21T06:28:52.000Z","_content":"\n使用 Docker 官方提供的 MySQL 镜像进行安装、建立容器（必须指定端口映射和 root 口令）。\n\n```shell\ndocker pull mysql:latest\ndocker run -p 9527:3306 -e MYSQL_ROOT_PASSWORD=root -d mysql\n```\n\n但此时如果直接远程连接该容器中的 MySQL 并输入口令后，则会出现报错信息：\n\n```\nERROR 2059 (HY000): Authentication plugin 'caching_sha2_password' cannot be loaded: /usr/lib64/mysql/plugin/caching_sha2_password.so: cannot open shared object file: No such file or directory\n```\n\n根据报错信息，连接失败原因为口令使用了 `caching_sha2_password` 方式进行加密，通过 `SELECT user, host, plugin, authentication_string FROM user WHERE user='root';` 查询可以看到 root 用户的口令确实是使用 `caching_sha2_password` 方式进行加密，而客户端找不到 `caching_sha2_password` 插件，因此连接失败。\n\n根据官方文档，可以将加密方式更改为 `mysql_native_password`。通过 `ALTER USER 'root'@'%' IDENTIFIED WITH mysql_native_password BY 'root';` 将 root 用户的口令加密方式更改为 `mysql_native_password`，在远程即可正常连接 MySQL。\n","source":"_posts/a-pitfall-of-connecting-failure-to-mysql-in-docker.md","raw":"---\ntitle: Docker 运行官方 MySQL 镜像无法远程连接的坑\ndate: 2018-11-21 14:28:52\ntags:\n  - Docker\n  - MySQL\n  - 坑\n---\n\n使用 Docker 官方提供的 MySQL 镜像进行安装、建立容器（必须指定端口映射和 root 口令）。\n\n```shell\ndocker pull mysql:latest\ndocker run -p 9527:3306 -e MYSQL_ROOT_PASSWORD=root -d mysql\n```\n\n但此时如果直接远程连接该容器中的 MySQL 并输入口令后，则会出现报错信息：\n\n```\nERROR 2059 (HY000): Authentication plugin 'caching_sha2_password' cannot be loaded: /usr/lib64/mysql/plugin/caching_sha2_password.so: cannot open shared object file: No such file or directory\n```\n\n根据报错信息，连接失败原因为口令使用了 `caching_sha2_password` 方式进行加密，通过 `SELECT user, host, plugin, authentication_string FROM user WHERE user='root';` 查询可以看到 root 用户的口令确实是使用 `caching_sha2_password` 方式进行加密，而客户端找不到 `caching_sha2_password` 插件，因此连接失败。\n\n根据官方文档，可以将加密方式更改为 `mysql_native_password`。通过 `ALTER USER 'root'@'%' IDENTIFIED WITH mysql_native_password BY 'root';` 将 root 用户的口令加密方式更改为 `mysql_native_password`，在远程即可正常连接 MySQL。\n","slug":"a-pitfall-of-connecting-failure-to-mysql-in-docker","published":1,"updated":"2019-03-26T13:00:08.982Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjtpshars0005lrpqfkqgrrq8","content":"<p>使用 Docker 官方提供的 MySQL 镜像进行安装、建立容器（必须指定端口映射和 root 口令）。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker pull mysql:latest</span><br><span class=\"line\">docker run -p 9527:3306 -e MYSQL_ROOT_PASSWORD=root -d mysql</span><br></pre></td></tr></table></figure>\n<p>但此时如果直接远程连接该容器中的 MySQL 并输入口令后，则会出现报错信息：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ERROR 2059 (HY000): Authentication plugin &apos;caching_sha2_password&apos; cannot be loaded: /usr/lib64/mysql/plugin/caching_sha2_password.so: cannot open shared object file: No such file or directory</span><br></pre></td></tr></table></figure>\n<p>根据报错信息，连接失败原因为口令使用了 <code>caching_sha2_password</code> 方式进行加密，通过 <code>SELECT user, host, plugin, authentication_string FROM user WHERE user=&#39;root&#39;;</code> 查询可以看到 root 用户的口令确实是使用 <code>caching_sha2_password</code> 方式进行加密，而客户端找不到 <code>caching_sha2_password</code> 插件，因此连接失败。</p>\n<p>根据官方文档，可以将加密方式更改为 <code>mysql_native_password</code>。通过 <code>ALTER USER &#39;root&#39;@&#39;%&#39; IDENTIFIED WITH mysql_native_password BY &#39;root&#39;;</code> 将 root 用户的口令加密方式更改为 <code>mysql_native_password</code>，在远程即可正常连接 MySQL。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>使用 Docker 官方提供的 MySQL 镜像进行安装、建立容器（必须指定端口映射和 root 口令）。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker pull mysql:latest</span><br><span class=\"line\">docker run -p 9527:3306 -e MYSQL_ROOT_PASSWORD=root -d mysql</span><br></pre></td></tr></table></figure>\n<p>但此时如果直接远程连接该容器中的 MySQL 并输入口令后，则会出现报错信息：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ERROR 2059 (HY000): Authentication plugin &apos;caching_sha2_password&apos; cannot be loaded: /usr/lib64/mysql/plugin/caching_sha2_password.so: cannot open shared object file: No such file or directory</span><br></pre></td></tr></table></figure>\n<p>根据报错信息，连接失败原因为口令使用了 <code>caching_sha2_password</code> 方式进行加密，通过 <code>SELECT user, host, plugin, authentication_string FROM user WHERE user=&#39;root&#39;;</code> 查询可以看到 root 用户的口令确实是使用 <code>caching_sha2_password</code> 方式进行加密，而客户端找不到 <code>caching_sha2_password</code> 插件，因此连接失败。</p>\n<p>根据官方文档，可以将加密方式更改为 <code>mysql_native_password</code>。通过 <code>ALTER USER &#39;root&#39;@&#39;%&#39; IDENTIFIED WITH mysql_native_password BY &#39;root&#39;;</code> 将 root 用户的口令加密方式更改为 <code>mysql_native_password</code>，在远程即可正常连接 MySQL。</p>\n"},{"title":"Python re.findall() 中的关于括号的坑","date":"2018-08-11T06:27:45.000Z","_content":"\n在 Python 中使用正则表达式进行匹配时，使用 `re.search()` 和 `re.findall()` 时对正则表达式的处理有所不同。\n\n例如使用正则表达式 `([0-9A-F]{2}:){5}[0-9A-F]{2}` 匹配一个 MAC 地址，待处理的字符串为 12:34:56:78:90:AB 。\n\n使用 `re.search()` 进行匹配：\n\n```python\nimport re\nmatch = re.search('([0-9A-F]{2}:){5}[0-9A-F]{2}', '12:34:56:78:90:AB').group()\nprint(match)\n```\n\n结果为 '12:34:56:78:90:AB' ，符合预期；\n\n使用 `re.findall()` 进行匹配：\n\n```python\nimport re\nmatch = re.findall('([0-9A-F]{2}:){5}[0-9A-F]{2}', '12:34:56:78:90:AB')\nprint(match)\n```\n\n结果为 ['90:']，不符合预期。\n\n主要原因是 `re.findall()` 在匹配的时候，返回的是括号所匹配到的结果，在这里是只返回 `[0-9A-F]{2}:` 的匹配结果，而且后面带有 `{5}` ，因此返回第五个符合的匹配；对于多个括号，则返回多个括号分别匹配到的结果；如果没有括号，则返回就返回整条语句所匹配到的结果。\n\n解决方案是使用括号将整个正则表达式括起来，这样 `re.findall()` 将会从外到内将每一组括号匹配到的结果列出。\n\n```python\nimport re\nmatch = re.findall('(([0-9A-F]{2}:){5}[0-9A-F]{2})', '12:34:56:78:90:AB')\nprint(match)\n```\n\n结果为 [('12:34:56:78:90:AB', '90:')] ，获取第一个元素即可。\n\n实际上这是正则表达式所特有的 ， 任何一门高级语言使用正则都满足这个特点：有括号时只能匹配到括号中的内容，没有括号（相当于在最外层增加了一个括号）。在正则表达式里面 “()” 代表的是分组的意思，一个括号代表一个分组，匹配是只能匹配到 ”()” 中的内容。\n","source":"_posts/a-pitfall-of-re-findall-with-brackets-in-Python.md","raw":"---\ntitle: Python re.findall() 中的关于括号的坑\ndate: 2018-08-11 14:27:45\ntags:\n  - Python\n  - 坑\n  - 正则表达式\n---\n\n在 Python 中使用正则表达式进行匹配时，使用 `re.search()` 和 `re.findall()` 时对正则表达式的处理有所不同。\n\n例如使用正则表达式 `([0-9A-F]{2}:){5}[0-9A-F]{2}` 匹配一个 MAC 地址，待处理的字符串为 12:34:56:78:90:AB 。\n\n使用 `re.search()` 进行匹配：\n\n```python\nimport re\nmatch = re.search('([0-9A-F]{2}:){5}[0-9A-F]{2}', '12:34:56:78:90:AB').group()\nprint(match)\n```\n\n结果为 '12:34:56:78:90:AB' ，符合预期；\n\n使用 `re.findall()` 进行匹配：\n\n```python\nimport re\nmatch = re.findall('([0-9A-F]{2}:){5}[0-9A-F]{2}', '12:34:56:78:90:AB')\nprint(match)\n```\n\n结果为 ['90:']，不符合预期。\n\n主要原因是 `re.findall()` 在匹配的时候，返回的是括号所匹配到的结果，在这里是只返回 `[0-9A-F]{2}:` 的匹配结果，而且后面带有 `{5}` ，因此返回第五个符合的匹配；对于多个括号，则返回多个括号分别匹配到的结果；如果没有括号，则返回就返回整条语句所匹配到的结果。\n\n解决方案是使用括号将整个正则表达式括起来，这样 `re.findall()` 将会从外到内将每一组括号匹配到的结果列出。\n\n```python\nimport re\nmatch = re.findall('(([0-9A-F]{2}:){5}[0-9A-F]{2})', '12:34:56:78:90:AB')\nprint(match)\n```\n\n结果为 [('12:34:56:78:90:AB', '90:')] ，获取第一个元素即可。\n\n实际上这是正则表达式所特有的 ， 任何一门高级语言使用正则都满足这个特点：有括号时只能匹配到括号中的内容，没有括号（相当于在最外层增加了一个括号）。在正则表达式里面 “()” 代表的是分组的意思，一个括号代表一个分组，匹配是只能匹配到 ”()” 中的内容。\n","slug":"a-pitfall-of-re-findall-with-brackets-in-Python","published":1,"updated":"2019-03-26T13:00:08.982Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjtpsharv0006lrpqdbk2h2t4","content":"<p>在 Python 中使用正则表达式进行匹配时，使用 <code>re.search()</code> 和 <code>re.findall()</code> 时对正则表达式的处理有所不同。</p>\n<p>例如使用正则表达式 <code>([0-9A-F]{2}:){5}[0-9A-F]{2}</code> 匹配一个 MAC 地址，待处理的字符串为 12:34:56:78:90:AB 。</p>\n<p>使用 <code>re.search()</code> 进行匹配：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> re</span><br><span class=\"line\">match = re.search(<span class=\"string\">'([0-9A-F]&#123;2&#125;:)&#123;5&#125;[0-9A-F]&#123;2&#125;'</span>, <span class=\"string\">'12:34:56:78:90:AB'</span>).group()</span><br><span class=\"line\">print(match)</span><br></pre></td></tr></table></figure>\n<p>结果为 ‘12:34:56:78:90:AB’ ，符合预期；</p>\n<p>使用 <code>re.findall()</code> 进行匹配：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> re</span><br><span class=\"line\">match = re.findall(<span class=\"string\">'([0-9A-F]&#123;2&#125;:)&#123;5&#125;[0-9A-F]&#123;2&#125;'</span>, <span class=\"string\">'12:34:56:78:90:AB'</span>)</span><br><span class=\"line\">print(match)</span><br></pre></td></tr></table></figure>\n<p>结果为 [‘90:’]，不符合预期。</p>\n<p>主要原因是 <code>re.findall()</code> 在匹配的时候，返回的是括号所匹配到的结果，在这里是只返回 <code>[0-9A-F]{2}:</code> 的匹配结果，而且后面带有 <code>{5}</code> ，因此返回第五个符合的匹配；对于多个括号，则返回多个括号分别匹配到的结果；如果没有括号，则返回就返回整条语句所匹配到的结果。</p>\n<p>解决方案是使用括号将整个正则表达式括起来，这样 <code>re.findall()</code> 将会从外到内将每一组括号匹配到的结果列出。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> re</span><br><span class=\"line\">match = re.findall(<span class=\"string\">'(([0-9A-F]&#123;2&#125;:)&#123;5&#125;[0-9A-F]&#123;2&#125;)'</span>, <span class=\"string\">'12:34:56:78:90:AB'</span>)</span><br><span class=\"line\">print(match)</span><br></pre></td></tr></table></figure>\n<p>结果为 [(‘12:34:56:78:90:AB’, ‘90:’)] ，获取第一个元素即可。</p>\n<p>实际上这是正则表达式所特有的 ， 任何一门高级语言使用正则都满足这个特点：有括号时只能匹配到括号中的内容，没有括号（相当于在最外层增加了一个括号）。在正则表达式里面 “()” 代表的是分组的意思，一个括号代表一个分组，匹配是只能匹配到 ”()” 中的内容。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>在 Python 中使用正则表达式进行匹配时，使用 <code>re.search()</code> 和 <code>re.findall()</code> 时对正则表达式的处理有所不同。</p>\n<p>例如使用正则表达式 <code>([0-9A-F]{2}:){5}[0-9A-F]{2}</code> 匹配一个 MAC 地址，待处理的字符串为 12:34:56:78:90:AB 。</p>\n<p>使用 <code>re.search()</code> 进行匹配：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> re</span><br><span class=\"line\">match = re.search(<span class=\"string\">'([0-9A-F]&#123;2&#125;:)&#123;5&#125;[0-9A-F]&#123;2&#125;'</span>, <span class=\"string\">'12:34:56:78:90:AB'</span>).group()</span><br><span class=\"line\">print(match)</span><br></pre></td></tr></table></figure>\n<p>结果为 ‘12:34:56:78:90:AB’ ，符合预期；</p>\n<p>使用 <code>re.findall()</code> 进行匹配：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> re</span><br><span class=\"line\">match = re.findall(<span class=\"string\">'([0-9A-F]&#123;2&#125;:)&#123;5&#125;[0-9A-F]&#123;2&#125;'</span>, <span class=\"string\">'12:34:56:78:90:AB'</span>)</span><br><span class=\"line\">print(match)</span><br></pre></td></tr></table></figure>\n<p>结果为 [‘90:’]，不符合预期。</p>\n<p>主要原因是 <code>re.findall()</code> 在匹配的时候，返回的是括号所匹配到的结果，在这里是只返回 <code>[0-9A-F]{2}:</code> 的匹配结果，而且后面带有 <code>{5}</code> ，因此返回第五个符合的匹配；对于多个括号，则返回多个括号分别匹配到的结果；如果没有括号，则返回就返回整条语句所匹配到的结果。</p>\n<p>解决方案是使用括号将整个正则表达式括起来，这样 <code>re.findall()</code> 将会从外到内将每一组括号匹配到的结果列出。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> re</span><br><span class=\"line\">match = re.findall(<span class=\"string\">'(([0-9A-F]&#123;2&#125;:)&#123;5&#125;[0-9A-F]&#123;2&#125;)'</span>, <span class=\"string\">'12:34:56:78:90:AB'</span>)</span><br><span class=\"line\">print(match)</span><br></pre></td></tr></table></figure>\n<p>结果为 [(‘12:34:56:78:90:AB’, ‘90:’)] ，获取第一个元素即可。</p>\n<p>实际上这是正则表达式所特有的 ， 任何一门高级语言使用正则都满足这个特点：有括号时只能匹配到括号中的内容，没有括号（相当于在最外层增加了一个括号）。在正则表达式里面 “()” 代表的是分组的意思，一个括号代表一个分组，匹配是只能匹配到 ”()” 中的内容。</p>\n"},{"title":"各种文档链接","date":"2016-03-01T05:56:01.000Z","_content":"\n[Ansible](http://www.ansible.com.cn/index.html)\n\n[BeautifulSoup](http://beautifulsoup.readthedocs.io/zh_CN/v4.4.0/)\n\n[itchat](http://itchat.readthedocs.io/zh/latest/)\n\n[requests](http://cn.python-requests.org/zh_CN/latest/)\n\n[scrapy](http://scrapy-chs.readthedocs.io/zh_CN/0.24/index.html)\n","source":"_posts/docs.md","raw":"---\ntitle: 各种文档链接\ndate: 2016-03-01 13:56:01\ntags:\n  - 文档\n---\n\n[Ansible](http://www.ansible.com.cn/index.html)\n\n[BeautifulSoup](http://beautifulsoup.readthedocs.io/zh_CN/v4.4.0/)\n\n[itchat](http://itchat.readthedocs.io/zh/latest/)\n\n[requests](http://cn.python-requests.org/zh_CN/latest/)\n\n[scrapy](http://scrapy-chs.readthedocs.io/zh_CN/0.24/index.html)\n","slug":"docs","published":1,"updated":"2019-03-26T13:00:08.982Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjtpsharx0007lrpqoulflu82","content":"<p><a href=\"http://www.ansible.com.cn/index.html\" target=\"_blank\" rel=\"noopener\">Ansible</a></p>\n<p><a href=\"http://beautifulsoup.readthedocs.io/zh_CN/v4.4.0/\" target=\"_blank\" rel=\"noopener\">BeautifulSoup</a></p>\n<p><a href=\"http://itchat.readthedocs.io/zh/latest/\" target=\"_blank\" rel=\"noopener\">itchat</a></p>\n<p><a href=\"http://cn.python-requests.org/zh_CN/latest/\" target=\"_blank\" rel=\"noopener\">requests</a></p>\n<p><a href=\"http://scrapy-chs.readthedocs.io/zh_CN/0.24/index.html\" target=\"_blank\" rel=\"noopener\">scrapy</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p><a href=\"http://www.ansible.com.cn/index.html\" target=\"_blank\" rel=\"noopener\">Ansible</a></p>\n<p><a href=\"http://beautifulsoup.readthedocs.io/zh_CN/v4.4.0/\" target=\"_blank\" rel=\"noopener\">BeautifulSoup</a></p>\n<p><a href=\"http://itchat.readthedocs.io/zh/latest/\" target=\"_blank\" rel=\"noopener\">itchat</a></p>\n<p><a href=\"http://cn.python-requests.org/zh_CN/latest/\" target=\"_blank\" rel=\"noopener\">requests</a></p>\n<p><a href=\"http://scrapy-chs.readthedocs.io/zh_CN/0.24/index.html\" target=\"_blank\" rel=\"noopener\">scrapy</a></p>\n"},{"title":"Python 在字典中根据条件筛选数据","date":"2018-07-11T06:26:51.000Z","_content":"\n首先创建一个字典\n\n```python\nimport random\n\nd = {str(x): random.randint(60, 100) for x in range(1, 21)}\nprint(d)\n```\n\n执行结果为\n\n```python\n{'1': 65, '2': 75, '3': 96, '4': 85, '5': 78, '6': 94, '7': 92, '8': 68, '9': 94, '10': 72, '11': 97, '12': 65, '13': 64, '14': 72, '15': 88, '16': 93, '17': 75, '18': 61, '19': 83, '20': 71}\n```\n\n如果需要在字典中筛选出值大于 90 的 id(key) 都有哪些，有以下四种实现方式：\n\n* 循环迭代\n\n```python\ndd = {}\nfor k in d:\n    if d[k] > 90:\n        dd[k] = d[k]\nprint(dd)\n```\n\n  结果为：\n\n```python\n{'3': 96, '6': 94, '7': 92, '9': 94, '11': 97, '16': 93}\n```\n\n* `filter()` 函数\n\n```python\ndd = list(filter(lambda x: d[x] > 90, d))\nprint(dd)\n```\n\n  结果为：\n\n```python\n['3', '6', '7', '9', '11', '16']\n```\n\n* 字典解析式\n\n```python\ndd = {k: v for k, v in d.items() if v > 90}\nprint(dd)\n```\n\n  结果为：\n\n```python\n{'3': 96, '6': 94, '7': 92, '9': 94, '11': 97, '16': 93}\n```\n\n* 生成器解析式\n\n```python\ndd = ({k: v} for k, v in d.items() if v > 90)\nfor i in dd:\n    print(i)\n```\n\n  结果为：\n\n```python\n{'3': 96}\n{'6': 94}\n{'7': 92}\n{'9': 94}\n{'11': 97}\n{'16': 93}\n```\n\n","source":"_posts/filting-data-in-dictionaries-in-Python.md","raw":"---\ntitle: Python 在字典中根据条件筛选数据\ndate: 2018-07-11 14:26:51\ntags:\n  - Python\n  - 奇技淫巧\n---\n\n首先创建一个字典\n\n```python\nimport random\n\nd = {str(x): random.randint(60, 100) for x in range(1, 21)}\nprint(d)\n```\n\n执行结果为\n\n```python\n{'1': 65, '2': 75, '3': 96, '4': 85, '5': 78, '6': 94, '7': 92, '8': 68, '9': 94, '10': 72, '11': 97, '12': 65, '13': 64, '14': 72, '15': 88, '16': 93, '17': 75, '18': 61, '19': 83, '20': 71}\n```\n\n如果需要在字典中筛选出值大于 90 的 id(key) 都有哪些，有以下四种实现方式：\n\n* 循环迭代\n\n```python\ndd = {}\nfor k in d:\n    if d[k] > 90:\n        dd[k] = d[k]\nprint(dd)\n```\n\n  结果为：\n\n```python\n{'3': 96, '6': 94, '7': 92, '9': 94, '11': 97, '16': 93}\n```\n\n* `filter()` 函数\n\n```python\ndd = list(filter(lambda x: d[x] > 90, d))\nprint(dd)\n```\n\n  结果为：\n\n```python\n['3', '6', '7', '9', '11', '16']\n```\n\n* 字典解析式\n\n```python\ndd = {k: v for k, v in d.items() if v > 90}\nprint(dd)\n```\n\n  结果为：\n\n```python\n{'3': 96, '6': 94, '7': 92, '9': 94, '11': 97, '16': 93}\n```\n\n* 生成器解析式\n\n```python\ndd = ({k: v} for k, v in d.items() if v > 90)\nfor i in dd:\n    print(i)\n```\n\n  结果为：\n\n```python\n{'3': 96}\n{'6': 94}\n{'7': 92}\n{'9': 94}\n{'11': 97}\n{'16': 93}\n```\n\n","slug":"filting-data-in-dictionaries-in-Python","published":1,"updated":"2019-03-26T13:00:08.982Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjtpshas1000alrpq1t27f1nt","content":"<p>首先创建一个字典</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> random</span><br><span class=\"line\"></span><br><span class=\"line\">d = &#123;str(x): random.randint(<span class=\"number\">60</span>, <span class=\"number\">100</span>) <span class=\"keyword\">for</span> x <span class=\"keyword\">in</span> range(<span class=\"number\">1</span>, <span class=\"number\">21</span>)&#125;</span><br><span class=\"line\">print(d)</span><br></pre></td></tr></table></figure>\n<p>执行结果为</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;<span class=\"string\">'1'</span>: <span class=\"number\">65</span>, <span class=\"string\">'2'</span>: <span class=\"number\">75</span>, <span class=\"string\">'3'</span>: <span class=\"number\">96</span>, <span class=\"string\">'4'</span>: <span class=\"number\">85</span>, <span class=\"string\">'5'</span>: <span class=\"number\">78</span>, <span class=\"string\">'6'</span>: <span class=\"number\">94</span>, <span class=\"string\">'7'</span>: <span class=\"number\">92</span>, <span class=\"string\">'8'</span>: <span class=\"number\">68</span>, <span class=\"string\">'9'</span>: <span class=\"number\">94</span>, <span class=\"string\">'10'</span>: <span class=\"number\">72</span>, <span class=\"string\">'11'</span>: <span class=\"number\">97</span>, <span class=\"string\">'12'</span>: <span class=\"number\">65</span>, <span class=\"string\">'13'</span>: <span class=\"number\">64</span>, <span class=\"string\">'14'</span>: <span class=\"number\">72</span>, <span class=\"string\">'15'</span>: <span class=\"number\">88</span>, <span class=\"string\">'16'</span>: <span class=\"number\">93</span>, <span class=\"string\">'17'</span>: <span class=\"number\">75</span>, <span class=\"string\">'18'</span>: <span class=\"number\">61</span>, <span class=\"string\">'19'</span>: <span class=\"number\">83</span>, <span class=\"string\">'20'</span>: <span class=\"number\">71</span>&#125;</span><br></pre></td></tr></table></figure>\n<p>如果需要在字典中筛选出值大于 90 的 id(key) 都有哪些，有以下四种实现方式：</p>\n<ul>\n<li>循环迭代</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">dd = &#123;&#125;</span><br><span class=\"line\"><span class=\"keyword\">for</span> k <span class=\"keyword\">in</span> d:</span><br><span class=\"line\">    <span class=\"keyword\">if</span> d[k] &gt; <span class=\"number\">90</span>:</span><br><span class=\"line\">        dd[k] = d[k]</span><br><span class=\"line\">print(dd)</span><br></pre></td></tr></table></figure>\n<p>  结果为：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;<span class=\"string\">'3'</span>: <span class=\"number\">96</span>, <span class=\"string\">'6'</span>: <span class=\"number\">94</span>, <span class=\"string\">'7'</span>: <span class=\"number\">92</span>, <span class=\"string\">'9'</span>: <span class=\"number\">94</span>, <span class=\"string\">'11'</span>: <span class=\"number\">97</span>, <span class=\"string\">'16'</span>: <span class=\"number\">93</span>&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li><code>filter()</code> 函数</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">dd = list(filter(<span class=\"keyword\">lambda</span> x: d[x] &gt; <span class=\"number\">90</span>, d))</span><br><span class=\"line\">print(dd)</span><br></pre></td></tr></table></figure>\n<p>  结果为：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[<span class=\"string\">'3'</span>, <span class=\"string\">'6'</span>, <span class=\"string\">'7'</span>, <span class=\"string\">'9'</span>, <span class=\"string\">'11'</span>, <span class=\"string\">'16'</span>]</span><br></pre></td></tr></table></figure>\n<ul>\n<li>字典解析式</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">dd = &#123;k: v <span class=\"keyword\">for</span> k, v <span class=\"keyword\">in</span> d.items() <span class=\"keyword\">if</span> v &gt; <span class=\"number\">90</span>&#125;</span><br><span class=\"line\">print(dd)</span><br></pre></td></tr></table></figure>\n<p>  结果为：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;<span class=\"string\">'3'</span>: <span class=\"number\">96</span>, <span class=\"string\">'6'</span>: <span class=\"number\">94</span>, <span class=\"string\">'7'</span>: <span class=\"number\">92</span>, <span class=\"string\">'9'</span>: <span class=\"number\">94</span>, <span class=\"string\">'11'</span>: <span class=\"number\">97</span>, <span class=\"string\">'16'</span>: <span class=\"number\">93</span>&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>生成器解析式</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">dd = (&#123;k: v&#125; <span class=\"keyword\">for</span> k, v <span class=\"keyword\">in</span> d.items() <span class=\"keyword\">if</span> v &gt; <span class=\"number\">90</span>)</span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> dd:</span><br><span class=\"line\">    print(i)</span><br></pre></td></tr></table></figure>\n<p>  结果为：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;<span class=\"string\">'3'</span>: <span class=\"number\">96</span>&#125;</span><br><span class=\"line\">&#123;<span class=\"string\">'6'</span>: <span class=\"number\">94</span>&#125;</span><br><span class=\"line\">&#123;<span class=\"string\">'7'</span>: <span class=\"number\">92</span>&#125;</span><br><span class=\"line\">&#123;<span class=\"string\">'9'</span>: <span class=\"number\">94</span>&#125;</span><br><span class=\"line\">&#123;<span class=\"string\">'11'</span>: <span class=\"number\">97</span>&#125;</span><br><span class=\"line\">&#123;<span class=\"string\">'16'</span>: <span class=\"number\">93</span>&#125;</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<p>首先创建一个字典</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> random</span><br><span class=\"line\"></span><br><span class=\"line\">d = &#123;str(x): random.randint(<span class=\"number\">60</span>, <span class=\"number\">100</span>) <span class=\"keyword\">for</span> x <span class=\"keyword\">in</span> range(<span class=\"number\">1</span>, <span class=\"number\">21</span>)&#125;</span><br><span class=\"line\">print(d)</span><br></pre></td></tr></table></figure>\n<p>执行结果为</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;<span class=\"string\">'1'</span>: <span class=\"number\">65</span>, <span class=\"string\">'2'</span>: <span class=\"number\">75</span>, <span class=\"string\">'3'</span>: <span class=\"number\">96</span>, <span class=\"string\">'4'</span>: <span class=\"number\">85</span>, <span class=\"string\">'5'</span>: <span class=\"number\">78</span>, <span class=\"string\">'6'</span>: <span class=\"number\">94</span>, <span class=\"string\">'7'</span>: <span class=\"number\">92</span>, <span class=\"string\">'8'</span>: <span class=\"number\">68</span>, <span class=\"string\">'9'</span>: <span class=\"number\">94</span>, <span class=\"string\">'10'</span>: <span class=\"number\">72</span>, <span class=\"string\">'11'</span>: <span class=\"number\">97</span>, <span class=\"string\">'12'</span>: <span class=\"number\">65</span>, <span class=\"string\">'13'</span>: <span class=\"number\">64</span>, <span class=\"string\">'14'</span>: <span class=\"number\">72</span>, <span class=\"string\">'15'</span>: <span class=\"number\">88</span>, <span class=\"string\">'16'</span>: <span class=\"number\">93</span>, <span class=\"string\">'17'</span>: <span class=\"number\">75</span>, <span class=\"string\">'18'</span>: <span class=\"number\">61</span>, <span class=\"string\">'19'</span>: <span class=\"number\">83</span>, <span class=\"string\">'20'</span>: <span class=\"number\">71</span>&#125;</span><br></pre></td></tr></table></figure>\n<p>如果需要在字典中筛选出值大于 90 的 id(key) 都有哪些，有以下四种实现方式：</p>\n<ul>\n<li>循环迭代</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">dd = &#123;&#125;</span><br><span class=\"line\"><span class=\"keyword\">for</span> k <span class=\"keyword\">in</span> d:</span><br><span class=\"line\">    <span class=\"keyword\">if</span> d[k] &gt; <span class=\"number\">90</span>:</span><br><span class=\"line\">        dd[k] = d[k]</span><br><span class=\"line\">print(dd)</span><br></pre></td></tr></table></figure>\n<p>  结果为：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;<span class=\"string\">'3'</span>: <span class=\"number\">96</span>, <span class=\"string\">'6'</span>: <span class=\"number\">94</span>, <span class=\"string\">'7'</span>: <span class=\"number\">92</span>, <span class=\"string\">'9'</span>: <span class=\"number\">94</span>, <span class=\"string\">'11'</span>: <span class=\"number\">97</span>, <span class=\"string\">'16'</span>: <span class=\"number\">93</span>&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li><code>filter()</code> 函数</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">dd = list(filter(<span class=\"keyword\">lambda</span> x: d[x] &gt; <span class=\"number\">90</span>, d))</span><br><span class=\"line\">print(dd)</span><br></pre></td></tr></table></figure>\n<p>  结果为：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[<span class=\"string\">'3'</span>, <span class=\"string\">'6'</span>, <span class=\"string\">'7'</span>, <span class=\"string\">'9'</span>, <span class=\"string\">'11'</span>, <span class=\"string\">'16'</span>]</span><br></pre></td></tr></table></figure>\n<ul>\n<li>字典解析式</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">dd = &#123;k: v <span class=\"keyword\">for</span> k, v <span class=\"keyword\">in</span> d.items() <span class=\"keyword\">if</span> v &gt; <span class=\"number\">90</span>&#125;</span><br><span class=\"line\">print(dd)</span><br></pre></td></tr></table></figure>\n<p>  结果为：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;<span class=\"string\">'3'</span>: <span class=\"number\">96</span>, <span class=\"string\">'6'</span>: <span class=\"number\">94</span>, <span class=\"string\">'7'</span>: <span class=\"number\">92</span>, <span class=\"string\">'9'</span>: <span class=\"number\">94</span>, <span class=\"string\">'11'</span>: <span class=\"number\">97</span>, <span class=\"string\">'16'</span>: <span class=\"number\">93</span>&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>生成器解析式</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">dd = (&#123;k: v&#125; <span class=\"keyword\">for</span> k, v <span class=\"keyword\">in</span> d.items() <span class=\"keyword\">if</span> v &gt; <span class=\"number\">90</span>)</span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> dd:</span><br><span class=\"line\">    print(i)</span><br></pre></td></tr></table></figure>\n<p>  结果为：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;<span class=\"string\">'3'</span>: <span class=\"number\">96</span>&#125;</span><br><span class=\"line\">&#123;<span class=\"string\">'6'</span>: <span class=\"number\">94</span>&#125;</span><br><span class=\"line\">&#123;<span class=\"string\">'7'</span>: <span class=\"number\">92</span>&#125;</span><br><span class=\"line\">&#123;<span class=\"string\">'9'</span>: <span class=\"number\">94</span>&#125;</span><br><span class=\"line\">&#123;<span class=\"string\">'11'</span>: <span class=\"number\">97</span>&#125;</span><br><span class=\"line\">&#123;<span class=\"string\">'16'</span>: <span class=\"number\">93</span>&#125;</span><br></pre></td></tr></table></figure>\n"},{"title":"使用 sshkey 实现免密码 ssh","date":"2015-03-15T03:41:27.000Z","_content":"\n在使用公有云的时候，可能会受到大量的扫描，其中大部分都是对常用用户（例如 root）的口令暴力猜测。虽说使用由各种字母、数字、符号混杂的口令能够大大提高安全性，但登录后看到那几万个 failed logins 总是有点碍眼。把 ssh 的端口从 22 改成其它不常见的端口也算是一个方法，但始终是治标不治本，毕竟这只能防一防那些随意乱扫的人，对于指定要 hack 某一台主机的，总能找到开放的 ssh 端口。\n\n从另一个角度来说，在自己反复连接远程主机的时候，每次都需要重新输入口令，也是一键比较烦的事情。\n\n使用 sshkey 来免口令 ssh 就可以避免以上两个问题。即使把 ssh 端口保持在 22，只要 sshkey 不符合，直接就拒绝连接了。同时，在ssh key 符合的情况下，能够不需要输入口令秒连接。\n\n首先在本地 ssh-keygen -t rsa 生成密钥，就会在 `~/.ssh` 目录下生成 `id_rsa` 和 `id_rsa.pub` 两个文件，分别是私钥和公钥。私钥是自己本地保存的，而公钥是可以公开分发的，因此将公钥文件 `id_rsa.pub` 通过能想到的各种方法放置到远程主机的 `~/.ssh` 下，并执行 `cat id_rsa.pub >> authorized_keys` 追加写入，这样就相当于让远程主机认识到本地主机，可以免口令登录了。\n\n然后修改 ssh 服务的配置文件 `/etc/ssh/sshd_config` ，把 `PasswordAuthentication` 字段的值改为 `no`，并重启 ssh 服务，就把 ssh 口令登录禁用了。\n\n","source":"_posts/how-to-SSH-with-sshekeys.md","raw":"---\ntitle: 使用 sshkey 实现免密码 ssh\ndate: 2015-03-15 11:41:27\ntags:\n  - Linux\n  - ssh\n---\n\n在使用公有云的时候，可能会受到大量的扫描，其中大部分都是对常用用户（例如 root）的口令暴力猜测。虽说使用由各种字母、数字、符号混杂的口令能够大大提高安全性，但登录后看到那几万个 failed logins 总是有点碍眼。把 ssh 的端口从 22 改成其它不常见的端口也算是一个方法，但始终是治标不治本，毕竟这只能防一防那些随意乱扫的人，对于指定要 hack 某一台主机的，总能找到开放的 ssh 端口。\n\n从另一个角度来说，在自己反复连接远程主机的时候，每次都需要重新输入口令，也是一键比较烦的事情。\n\n使用 sshkey 来免口令 ssh 就可以避免以上两个问题。即使把 ssh 端口保持在 22，只要 sshkey 不符合，直接就拒绝连接了。同时，在ssh key 符合的情况下，能够不需要输入口令秒连接。\n\n首先在本地 ssh-keygen -t rsa 生成密钥，就会在 `~/.ssh` 目录下生成 `id_rsa` 和 `id_rsa.pub` 两个文件，分别是私钥和公钥。私钥是自己本地保存的，而公钥是可以公开分发的，因此将公钥文件 `id_rsa.pub` 通过能想到的各种方法放置到远程主机的 `~/.ssh` 下，并执行 `cat id_rsa.pub >> authorized_keys` 追加写入，这样就相当于让远程主机认识到本地主机，可以免口令登录了。\n\n然后修改 ssh 服务的配置文件 `/etc/ssh/sshd_config` ，把 `PasswordAuthentication` 字段的值改为 `no`，并重启 ssh 服务，就把 ssh 口令登录禁用了。\n\n","slug":"how-to-SSH-with-sshekeys","published":1,"updated":"2019-03-26T13:00:08.982Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjtpshas4000blrpq2vpopaxd","content":"<p>在使用公有云的时候，可能会受到大量的扫描，其中大部分都是对常用用户（例如 root）的口令暴力猜测。虽说使用由各种字母、数字、符号混杂的口令能够大大提高安全性，但登录后看到那几万个 failed logins 总是有点碍眼。把 ssh 的端口从 22 改成其它不常见的端口也算是一个方法，但始终是治标不治本，毕竟这只能防一防那些随意乱扫的人，对于指定要 hack 某一台主机的，总能找到开放的 ssh 端口。</p>\n<p>从另一个角度来说，在自己反复连接远程主机的时候，每次都需要重新输入口令，也是一键比较烦的事情。</p>\n<p>使用 sshkey 来免口令 ssh 就可以避免以上两个问题。即使把 ssh 端口保持在 22，只要 sshkey 不符合，直接就拒绝连接了。同时，在ssh key 符合的情况下，能够不需要输入口令秒连接。</p>\n<p>首先在本地 ssh-keygen -t rsa 生成密钥，就会在 <code>~/.ssh</code> 目录下生成 <code>id_rsa</code> 和 <code>id_rsa.pub</code> 两个文件，分别是私钥和公钥。私钥是自己本地保存的，而公钥是可以公开分发的，因此将公钥文件 <code>id_rsa.pub</code> 通过能想到的各种方法放置到远程主机的 <code>~/.ssh</code> 下，并执行 <code>cat id_rsa.pub &gt;&gt; authorized_keys</code> 追加写入，这样就相当于让远程主机认识到本地主机，可以免口令登录了。</p>\n<p>然后修改 ssh 服务的配置文件 <code>/etc/ssh/sshd_config</code> ，把 <code>PasswordAuthentication</code> 字段的值改为 <code>no</code>，并重启 ssh 服务，就把 ssh 口令登录禁用了。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>在使用公有云的时候，可能会受到大量的扫描，其中大部分都是对常用用户（例如 root）的口令暴力猜测。虽说使用由各种字母、数字、符号混杂的口令能够大大提高安全性，但登录后看到那几万个 failed logins 总是有点碍眼。把 ssh 的端口从 22 改成其它不常见的端口也算是一个方法，但始终是治标不治本，毕竟这只能防一防那些随意乱扫的人，对于指定要 hack 某一台主机的，总能找到开放的 ssh 端口。</p>\n<p>从另一个角度来说，在自己反复连接远程主机的时候，每次都需要重新输入口令，也是一键比较烦的事情。</p>\n<p>使用 sshkey 来免口令 ssh 就可以避免以上两个问题。即使把 ssh 端口保持在 22，只要 sshkey 不符合，直接就拒绝连接了。同时，在ssh key 符合的情况下，能够不需要输入口令秒连接。</p>\n<p>首先在本地 ssh-keygen -t rsa 生成密钥，就会在 <code>~/.ssh</code> 目录下生成 <code>id_rsa</code> 和 <code>id_rsa.pub</code> 两个文件，分别是私钥和公钥。私钥是自己本地保存的，而公钥是可以公开分发的，因此将公钥文件 <code>id_rsa.pub</code> 通过能想到的各种方法放置到远程主机的 <code>~/.ssh</code> 下，并执行 <code>cat id_rsa.pub &gt;&gt; authorized_keys</code> 追加写入，这样就相当于让远程主机认识到本地主机，可以免口令登录了。</p>\n<p>然后修改 ssh 服务的配置文件 <code>/etc/ssh/sshd_config</code> ，把 <code>PasswordAuthentication</code> 字段的值改为 <code>no</code>，并重启 ssh 服务，就把 ssh 口令登录禁用了。</p>\n"},{"title":"如何在 CentOS 7 上手动搭建 LAMP 环境","date":"2014-11-29T02:00:58.000Z","_content":"\n拿到一台新的服务器之后，如果要搭 WordPress 之类的服务，就需要搭建一个 LAMP 环境。\n\n鉴于网上各种一键 LAMP 的质量稂莠不齐，自己搭一个还是比较妥当的做法，而且后续如果需要自定义配置的话更加方便，不至于发生太多关于包依赖的问题。\n\n```shell\n# 安装 Apache\nyum -y install httpd\n# 启动服务\nsystemctl start httpd.service\n# 设置开机自动启动\nsystemctl enable httpd.service\n \n# 安装 MySQL（在 CentOS 7 上其实是 MariaDB，但兼容 MySQL）\nyum -y install mariadb mariadb-server\n# 启动服务\nsystemctl start mariadb.service\n# 设置开机启动服务\nsystemctl enable mariadb.service\n# 设置数据库管理员密码\nmysql_secure_installation\n \n# 安装 PHP\nyum -y install php\n# 安装各种 PHP 的组件\nyum -y install php-gd php-ldap php-odbc php-pear php-xml php-xmlrpc php-mbstring php-snmp php-soap curl curl-devel php-mysql\n# 重启一下\nsystemctl restart httpd.service\n```\n\n这样基本就可以直接安装 WordPress 了。\n","source":"_posts/how-to-build-LAMP-environment-on-CentOS-7.md","raw":"---\ntitle: 如何在 CentOS 7 上手动搭建 LAMP 环境\ndate: 2014-11-29 10:00:58\ntags: \n  - Apache\n  - LAMP\n  - MySQL\n  - PHP\n---\n\n拿到一台新的服务器之后，如果要搭 WordPress 之类的服务，就需要搭建一个 LAMP 环境。\n\n鉴于网上各种一键 LAMP 的质量稂莠不齐，自己搭一个还是比较妥当的做法，而且后续如果需要自定义配置的话更加方便，不至于发生太多关于包依赖的问题。\n\n```shell\n# 安装 Apache\nyum -y install httpd\n# 启动服务\nsystemctl start httpd.service\n# 设置开机自动启动\nsystemctl enable httpd.service\n \n# 安装 MySQL（在 CentOS 7 上其实是 MariaDB，但兼容 MySQL）\nyum -y install mariadb mariadb-server\n# 启动服务\nsystemctl start mariadb.service\n# 设置开机启动服务\nsystemctl enable mariadb.service\n# 设置数据库管理员密码\nmysql_secure_installation\n \n# 安装 PHP\nyum -y install php\n# 安装各种 PHP 的组件\nyum -y install php-gd php-ldap php-odbc php-pear php-xml php-xmlrpc php-mbstring php-snmp php-soap curl curl-devel php-mysql\n# 重启一下\nsystemctl restart httpd.service\n```\n\n这样基本就可以直接安装 WordPress 了。\n","slug":"how-to-build-LAMP-environment-on-CentOS-7","published":1,"updated":"2019-03-26T13:00:08.982Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjtpshas6000dlrpqxrwjjvn1","content":"<p>拿到一台新的服务器之后，如果要搭 WordPress 之类的服务，就需要搭建一个 LAMP 环境。</p>\n<p>鉴于网上各种一键 LAMP 的质量稂莠不齐，自己搭一个还是比较妥当的做法，而且后续如果需要自定义配置的话更加方便，不至于发生太多关于包依赖的问题。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span> 安装 Apache</span><br><span class=\"line\">yum -y install httpd</span><br><span class=\"line\"><span class=\"meta\">#</span> 启动服务</span><br><span class=\"line\">systemctl start httpd.service</span><br><span class=\"line\"><span class=\"meta\">#</span> 设置开机自动启动</span><br><span class=\"line\">systemctl enable httpd.service</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"meta\">#</span> 安装 MySQL（在 CentOS 7 上其实是 MariaDB，但兼容 MySQL）</span><br><span class=\"line\">yum -y install mariadb mariadb-server</span><br><span class=\"line\"><span class=\"meta\">#</span> 启动服务</span><br><span class=\"line\">systemctl start mariadb.service</span><br><span class=\"line\"><span class=\"meta\">#</span> 设置开机启动服务</span><br><span class=\"line\">systemctl enable mariadb.service</span><br><span class=\"line\"><span class=\"meta\">#</span> 设置数据库管理员密码</span><br><span class=\"line\">mysql_secure_installation</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"meta\">#</span> 安装 PHP</span><br><span class=\"line\">yum -y install php</span><br><span class=\"line\"><span class=\"meta\">#</span> 安装各种 PHP 的组件</span><br><span class=\"line\">yum -y install php-gd php-ldap php-odbc php-pear php-xml php-xmlrpc php-mbstring php-snmp php-soap curl curl-devel php-mysql</span><br><span class=\"line\"><span class=\"meta\">#</span> 重启一下</span><br><span class=\"line\">systemctl restart httpd.service</span><br></pre></td></tr></table></figure>\n<p>这样基本就可以直接安装 WordPress 了。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>拿到一台新的服务器之后，如果要搭 WordPress 之类的服务，就需要搭建一个 LAMP 环境。</p>\n<p>鉴于网上各种一键 LAMP 的质量稂莠不齐，自己搭一个还是比较妥当的做法，而且后续如果需要自定义配置的话更加方便，不至于发生太多关于包依赖的问题。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span> 安装 Apache</span><br><span class=\"line\">yum -y install httpd</span><br><span class=\"line\"><span class=\"meta\">#</span> 启动服务</span><br><span class=\"line\">systemctl start httpd.service</span><br><span class=\"line\"><span class=\"meta\">#</span> 设置开机自动启动</span><br><span class=\"line\">systemctl enable httpd.service</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"meta\">#</span> 安装 MySQL（在 CentOS 7 上其实是 MariaDB，但兼容 MySQL）</span><br><span class=\"line\">yum -y install mariadb mariadb-server</span><br><span class=\"line\"><span class=\"meta\">#</span> 启动服务</span><br><span class=\"line\">systemctl start mariadb.service</span><br><span class=\"line\"><span class=\"meta\">#</span> 设置开机启动服务</span><br><span class=\"line\">systemctl enable mariadb.service</span><br><span class=\"line\"><span class=\"meta\">#</span> 设置数据库管理员密码</span><br><span class=\"line\">mysql_secure_installation</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"meta\">#</span> 安装 PHP</span><br><span class=\"line\">yum -y install php</span><br><span class=\"line\"><span class=\"meta\">#</span> 安装各种 PHP 的组件</span><br><span class=\"line\">yum -y install php-gd php-ldap php-odbc php-pear php-xml php-xmlrpc php-mbstring php-snmp php-soap curl curl-devel php-mysql</span><br><span class=\"line\"><span class=\"meta\">#</span> 重启一下</span><br><span class=\"line\">systemctl restart httpd.service</span><br></pre></td></tr></table></figure>\n<p>这样基本就可以直接安装 WordPress 了。</p>\n"},{"title":"查看文件中的重复行","date":"2016-12-12T04:07:57.000Z","_content":"\n```shell\nsort <filename> | uniq -cd\n```\n\n`uniq` 命令用于报告重复的行，但只能用于相邻的两行，因此需要先用 `sort` 对文件中的个行进行排序。加入 `-d` 参数能把重复的行显示出来，加入 `-c` 参数能显示重复的行重复了多少次。\n","source":"_posts/how-to-find-duplicated-lines-in-files.md","raw":"---\ntitle: 查看文件中的重复行\ndate: 2016-12-12 12:07:57\ntags:\n  - Linux\n---\n\n```shell\nsort <filename> | uniq -cd\n```\n\n`uniq` 命令用于报告重复的行，但只能用于相邻的两行，因此需要先用 `sort` 对文件中的个行进行排序。加入 `-d` 参数能把重复的行显示出来，加入 `-c` 参数能显示重复的行重复了多少次。\n","slug":"how-to-find-duplicated-lines-in-files","published":1,"updated":"2019-03-26T13:00:08.982Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjtpshas8000flrpqrp5dpju9","content":"<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sort &lt;filename&gt; | uniq -cd</span><br></pre></td></tr></table></figure>\n<p><code>uniq</code> 命令用于报告重复的行，但只能用于相邻的两行，因此需要先用 <code>sort</code> 对文件中的个行进行排序。加入 <code>-d</code> 参数能把重复的行显示出来，加入 <code>-c</code> 参数能显示重复的行重复了多少次。</p>\n","site":{"data":{}},"excerpt":"","more":"<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sort &lt;filename&gt; | uniq -cd</span><br></pre></td></tr></table></figure>\n<p><code>uniq</code> 命令用于报告重复的行，但只能用于相邻的两行，因此需要先用 <code>sort</code> 对文件中的个行进行排序。加入 <code>-d</code> 参数能把重复的行显示出来，加入 <code>-c</code> 参数能显示重复的行重复了多少次。</p>\n"},{"title":"Windows 下 Python 字符编码异常解决方案","date":"2015-06-28T03:47:43.000Z","_content":"\n在中文 Windows 系统中，文件的默认字符编码为 GBK，如果将一段编码为 UTF-8 的数据流在 Windows 下写入文件，就可能会解析失败并抛出 UnicodeEncodeError 异常。\n\n解决方案是在打开要写入的文件时在 `encoding` 参数中指定数据流的编码，这样就能在先从数据流的编码转换为目的编码，然后写入文件。\n\n```python\nf = open('something.txt', 'w', encoding='utf-8')\n```\n\n对于一些编码不规范的文件，在读取是可能会遇到 UnicodeDecodeError 异常，因为在文件中有可能夹杂了一些非法编码的字符。这种情况下 `open()` 可以接受一个 `errors` 参数，来指定如果遇到编码错误时应该如何处理。这个参数有两个枚举值，分别是 `strict` 和 `ignore`，前者在遇到异常的时候直接抛出异常并退出，后者为直接忽略。\n\n```python\nf = open('something.txt', 'w', encoding='utf-8', errors='ignore')\n```\n","source":"_posts/how-to-fix-Python-UnicodeEncodeError-on-Windows.md","raw":"---\ntitle: Windows 下 Python 字符编码异常解决方案\ndate: 2015-06-28 11:47:43\ntags:\n  - Windows\n  - Python\n  - 编码\n---\n\n在中文 Windows 系统中，文件的默认字符编码为 GBK，如果将一段编码为 UTF-8 的数据流在 Windows 下写入文件，就可能会解析失败并抛出 UnicodeEncodeError 异常。\n\n解决方案是在打开要写入的文件时在 `encoding` 参数中指定数据流的编码，这样就能在先从数据流的编码转换为目的编码，然后写入文件。\n\n```python\nf = open('something.txt', 'w', encoding='utf-8')\n```\n\n对于一些编码不规范的文件，在读取是可能会遇到 UnicodeDecodeError 异常，因为在文件中有可能夹杂了一些非法编码的字符。这种情况下 `open()` 可以接受一个 `errors` 参数，来指定如果遇到编码错误时应该如何处理。这个参数有两个枚举值，分别是 `strict` 和 `ignore`，前者在遇到异常的时候直接抛出异常并退出，后者为直接忽略。\n\n```python\nf = open('something.txt', 'w', encoding='utf-8', errors='ignore')\n```\n","slug":"how-to-fix-Python-UnicodeEncodeError-on-Windows","published":1,"updated":"2019-03-26T13:00:08.982Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjtpshasa000hlrpqrg16406q","content":"<p>在中文 Windows 系统中，文件的默认字符编码为 GBK，如果将一段编码为 UTF-8 的数据流在 Windows 下写入文件，就可能会解析失败并抛出 UnicodeEncodeError 异常。</p>\n<p>解决方案是在打开要写入的文件时在 <code>encoding</code> 参数中指定数据流的编码，这样就能在先从数据流的编码转换为目的编码，然后写入文件。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">f = open(<span class=\"string\">'something.txt'</span>, <span class=\"string\">'w'</span>, encoding=<span class=\"string\">'utf-8'</span>)</span><br></pre></td></tr></table></figure>\n<p>对于一些编码不规范的文件，在读取是可能会遇到 UnicodeDecodeError 异常，因为在文件中有可能夹杂了一些非法编码的字符。这种情况下 <code>open()</code> 可以接受一个 <code>errors</code> 参数，来指定如果遇到编码错误时应该如何处理。这个参数有两个枚举值，分别是 <code>strict</code> 和 <code>ignore</code>，前者在遇到异常的时候直接抛出异常并退出，后者为直接忽略。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">f = open(<span class=\"string\">'something.txt'</span>, <span class=\"string\">'w'</span>, encoding=<span class=\"string\">'utf-8'</span>, errors=<span class=\"string\">'ignore'</span>)</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<p>在中文 Windows 系统中，文件的默认字符编码为 GBK，如果将一段编码为 UTF-8 的数据流在 Windows 下写入文件，就可能会解析失败并抛出 UnicodeEncodeError 异常。</p>\n<p>解决方案是在打开要写入的文件时在 <code>encoding</code> 参数中指定数据流的编码，这样就能在先从数据流的编码转换为目的编码，然后写入文件。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">f = open(<span class=\"string\">'something.txt'</span>, <span class=\"string\">'w'</span>, encoding=<span class=\"string\">'utf-8'</span>)</span><br></pre></td></tr></table></figure>\n<p>对于一些编码不规范的文件，在读取是可能会遇到 UnicodeDecodeError 异常，因为在文件中有可能夹杂了一些非法编码的字符。这种情况下 <code>open()</code> 可以接受一个 <code>errors</code> 参数，来指定如果遇到编码错误时应该如何处理。这个参数有两个枚举值，分别是 <code>strict</code> 和 <code>ignore</code>，前者在遇到异常的时候直接抛出异常并退出，后者为直接忽略。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">f = open(<span class=\"string\">'something.txt'</span>, <span class=\"string\">'w'</span>, encoding=<span class=\"string\">'utf-8'</span>, errors=<span class=\"string\">'ignore'</span>)</span><br></pre></td></tr></table></figure>\n"},{"title":"Linux 下普通用户获取 sudo 权限的方法","date":"2017-04-01T04:09:55.000Z","_content":"\n在 Linux 创建新用户后，如果需要使该用户能以 `sudo` 方式执行命令，需要把用户添加到 `sudoers` 文件中，否则在使用 `sudo` 的时候会报“{user} is not in the sudoers file”错误。此时需要将用户添加到 `sudoers` 文件中，并使其获得相应权限。\n\n首先需要使用 root 用户，执行命令：\n\n```shell\nvisudo\n```\n\n打开 `sudoers` 文件，然后在其中添加\n\n```\n{user} ALL=(ALL:ALL) ALL\n%{user} ALL=(ALL) NOPASSWD: ALL # 设置{user}组下面的用户使用 sudo 不需要输入密码\n```\n\n保存后，该用户即可使用 `sudo` 命令。\n\n4个 ALL 之中，第 1 个 ALL 是用户(user)，第 2 个 ALL 是机器，第 3 个 ALL 是新用户身分(run_as_user, 如 root, oracle)，第 4 个ALL 是命令。\n","source":"_posts/how-to-grant-sudo-privilege-to-a-normal-user.md","raw":"---\ntitle: Linux 下普通用户获取 sudo 权限的方法\ndate: 2017-04-01 12:09:55\ntags:\n  - Linux\n---\n\n在 Linux 创建新用户后，如果需要使该用户能以 `sudo` 方式执行命令，需要把用户添加到 `sudoers` 文件中，否则在使用 `sudo` 的时候会报“{user} is not in the sudoers file”错误。此时需要将用户添加到 `sudoers` 文件中，并使其获得相应权限。\n\n首先需要使用 root 用户，执行命令：\n\n```shell\nvisudo\n```\n\n打开 `sudoers` 文件，然后在其中添加\n\n```\n{user} ALL=(ALL:ALL) ALL\n%{user} ALL=(ALL) NOPASSWD: ALL # 设置{user}组下面的用户使用 sudo 不需要输入密码\n```\n\n保存后，该用户即可使用 `sudo` 命令。\n\n4个 ALL 之中，第 1 个 ALL 是用户(user)，第 2 个 ALL 是机器，第 3 个 ALL 是新用户身分(run_as_user, 如 root, oracle)，第 4 个ALL 是命令。\n","slug":"how-to-grant-sudo-privilege-to-a-normal-user","published":1,"updated":"2019-03-26T13:00:08.982Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjtpshasb000ilrpqbm7zdw2w","content":"<p>在 Linux 创建新用户后，如果需要使该用户能以 <code>sudo</code> 方式执行命令，需要把用户添加到 <code>sudoers</code> 文件中，否则在使用 <code>sudo</code> 的时候会报“{user} is not in the sudoers file”错误。此时需要将用户添加到 <code>sudoers</code> 文件中，并使其获得相应权限。</p>\n<p>首先需要使用 root 用户，执行命令：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">visudo</span><br></pre></td></tr></table></figure>\n<p>打开 <code>sudoers</code> 文件，然后在其中添加</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;user&#125; ALL=(ALL:ALL) ALL</span><br><span class=\"line\">%&#123;user&#125; ALL=(ALL) NOPASSWD: ALL # 设置&#123;user&#125;组下面的用户使用 sudo 不需要输入密码</span><br></pre></td></tr></table></figure>\n<p>保存后，该用户即可使用 <code>sudo</code> 命令。</p>\n<p>4个 ALL 之中，第 1 个 ALL 是用户(user)，第 2 个 ALL 是机器，第 3 个 ALL 是新用户身分(run_as_user, 如 root, oracle)，第 4 个ALL 是命令。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>在 Linux 创建新用户后，如果需要使该用户能以 <code>sudo</code> 方式执行命令，需要把用户添加到 <code>sudoers</code> 文件中，否则在使用 <code>sudo</code> 的时候会报“{user} is not in the sudoers file”错误。此时需要将用户添加到 <code>sudoers</code> 文件中，并使其获得相应权限。</p>\n<p>首先需要使用 root 用户，执行命令：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">visudo</span><br></pre></td></tr></table></figure>\n<p>打开 <code>sudoers</code> 文件，然后在其中添加</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;user&#125; ALL=(ALL:ALL) ALL</span><br><span class=\"line\">%&#123;user&#125; ALL=(ALL) NOPASSWD: ALL # 设置&#123;user&#125;组下面的用户使用 sudo 不需要输入密码</span><br></pre></td></tr></table></figure>\n<p>保存后，该用户即可使用 <code>sudo</code> 命令。</p>\n<p>4个 ALL 之中，第 1 个 ALL 是用户(user)，第 2 个 ALL 是机器，第 3 个 ALL 是新用户身分(run_as_user, 如 root, oracle)，第 4 个ALL 是命令。</p>\n"},{"title":"在新机器上快速安装 Python 3","date":"2016-02-14T05:55:31.000Z","_content":"\n对于以 Python 3 为主力开发语言的人来说，在一台新的机器上必须尽早安装上 Python 3。而对于绝大多数 Linux 发行版来说，都只默认安装了 Python 2 而没有 Python 3，而且有一些 Linux 自带的命令（例如 `yum`）会依赖 Python 2，这就需要在安装 Python 3 的同时保留 Python 2，并且使两者区分开来。\n\n快速安装如下：\n\n```shell\n# 版本号\nversion=\"3.6.2\"\n\n# 安装依赖包\nyum -y groupinstall \"Development tools\"\nyum -y install zlib-devel bzip2-devel openssl-devel ncurses-devel sqlite-devel readline-devel tk-devel gdbm-devel db4-devel libpcap-devel xz-devel\n\n# 下载 Python 3 源码，版本号可改\nwhich wget || yum -y install wget\nwget https://www.python.org/ftp/python/$version/Python-$version.tar.xz\n\n# 解包、编译、安装\nmkdir /usr/local/python3\nmv ./Python-$version.tar.xz /usr/local/python3\ncd /usr/local/python3\ntar -xvJf  Python-$version.tar.xz\ncd Python-$version\nwhich gcc || yum install -y gcc\n./configure --prefix=/usr/local/python3\nmake && make install\n\n# 设定 Python 3 和 pip3 的软连接\nln -s /usr/local/python3/bin/python3 /usr/bin/python3\nln -s /usr/local/python3/bin/pip3 /usr/bin/pip3\n```\n","source":"_posts/how-to-install-Python-3-quickly.md","raw":"---\ntitle: 在新机器上快速安装 Python 3\ndate: 2016-02-14 13:55:31\ntags:\n  - Linux\n  - Python\n  - 快速安装\n---\n\n对于以 Python 3 为主力开发语言的人来说，在一台新的机器上必须尽早安装上 Python 3。而对于绝大多数 Linux 发行版来说，都只默认安装了 Python 2 而没有 Python 3，而且有一些 Linux 自带的命令（例如 `yum`）会依赖 Python 2，这就需要在安装 Python 3 的同时保留 Python 2，并且使两者区分开来。\n\n快速安装如下：\n\n```shell\n# 版本号\nversion=\"3.6.2\"\n\n# 安装依赖包\nyum -y groupinstall \"Development tools\"\nyum -y install zlib-devel bzip2-devel openssl-devel ncurses-devel sqlite-devel readline-devel tk-devel gdbm-devel db4-devel libpcap-devel xz-devel\n\n# 下载 Python 3 源码，版本号可改\nwhich wget || yum -y install wget\nwget https://www.python.org/ftp/python/$version/Python-$version.tar.xz\n\n# 解包、编译、安装\nmkdir /usr/local/python3\nmv ./Python-$version.tar.xz /usr/local/python3\ncd /usr/local/python3\ntar -xvJf  Python-$version.tar.xz\ncd Python-$version\nwhich gcc || yum install -y gcc\n./configure --prefix=/usr/local/python3\nmake && make install\n\n# 设定 Python 3 和 pip3 的软连接\nln -s /usr/local/python3/bin/python3 /usr/bin/python3\nln -s /usr/local/python3/bin/pip3 /usr/bin/pip3\n```\n","slug":"how-to-install-Python-3-quickly","published":1,"updated":"2019-03-26T13:00:08.982Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjtpshasd000klrpqr5ltlbw5","content":"<p>对于以 Python 3 为主力开发语言的人来说，在一台新的机器上必须尽早安装上 Python 3。而对于绝大多数 Linux 发行版来说，都只默认安装了 Python 2 而没有 Python 3，而且有一些 Linux 自带的命令（例如 <code>yum</code>）会依赖 Python 2，这就需要在安装 Python 3 的同时保留 Python 2，并且使两者区分开来。</p>\n<p>快速安装如下：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span> 版本号</span><br><span class=\"line\">version=\"3.6.2\"</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span> 安装依赖包</span><br><span class=\"line\">yum -y groupinstall \"Development tools\"</span><br><span class=\"line\">yum -y install zlib-devel bzip2-devel openssl-devel ncurses-devel sqlite-devel readline-devel tk-devel gdbm-devel db4-devel libpcap-devel xz-devel</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span> 下载 Python 3 源码，版本号可改</span><br><span class=\"line\">which wget || yum -y install wget</span><br><span class=\"line\">wget https://www.python.org/ftp/python/$version/Python-$version.tar.xz</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span> 解包、编译、安装</span><br><span class=\"line\">mkdir /usr/local/python3</span><br><span class=\"line\">mv ./Python-$version.tar.xz /usr/local/python3</span><br><span class=\"line\">cd /usr/local/python3</span><br><span class=\"line\">tar -xvJf  Python-$version.tar.xz</span><br><span class=\"line\">cd Python-$version</span><br><span class=\"line\">which gcc || yum install -y gcc</span><br><span class=\"line\">./configure --prefix=/usr/local/python3</span><br><span class=\"line\">make &amp;&amp; make install</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span> 设定 Python 3 和 pip3 的软连接</span><br><span class=\"line\">ln -s /usr/local/python3/bin/python3 /usr/bin/python3</span><br><span class=\"line\">ln -s /usr/local/python3/bin/pip3 /usr/bin/pip3</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<p>对于以 Python 3 为主力开发语言的人来说，在一台新的机器上必须尽早安装上 Python 3。而对于绝大多数 Linux 发行版来说，都只默认安装了 Python 2 而没有 Python 3，而且有一些 Linux 自带的命令（例如 <code>yum</code>）会依赖 Python 2，这就需要在安装 Python 3 的同时保留 Python 2，并且使两者区分开来。</p>\n<p>快速安装如下：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span> 版本号</span><br><span class=\"line\">version=\"3.6.2\"</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span> 安装依赖包</span><br><span class=\"line\">yum -y groupinstall \"Development tools\"</span><br><span class=\"line\">yum -y install zlib-devel bzip2-devel openssl-devel ncurses-devel sqlite-devel readline-devel tk-devel gdbm-devel db4-devel libpcap-devel xz-devel</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span> 下载 Python 3 源码，版本号可改</span><br><span class=\"line\">which wget || yum -y install wget</span><br><span class=\"line\">wget https://www.python.org/ftp/python/$version/Python-$version.tar.xz</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span> 解包、编译、安装</span><br><span class=\"line\">mkdir /usr/local/python3</span><br><span class=\"line\">mv ./Python-$version.tar.xz /usr/local/python3</span><br><span class=\"line\">cd /usr/local/python3</span><br><span class=\"line\">tar -xvJf  Python-$version.tar.xz</span><br><span class=\"line\">cd Python-$version</span><br><span class=\"line\">which gcc || yum install -y gcc</span><br><span class=\"line\">./configure --prefix=/usr/local/python3</span><br><span class=\"line\">make &amp;&amp; make install</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span> 设定 Python 3 和 pip3 的软连接</span><br><span class=\"line\">ln -s /usr/local/python3/bin/python3 /usr/bin/python3</span><br><span class=\"line\">ln -s /usr/local/python3/bin/pip3 /usr/bin/pip3</span><br></pre></td></tr></table></figure>\n"},{"title":"如何安装及管理 Ruby","date":"2018-12-25T17:55:06.000Z","_content":"\n可以使用 rvm 管理 Ruby 及其软件包。\n\n预先安装 Ruby 需要使用到的软件包：\n\n```\nyum install -y gcc-c++ patch readline readline-devel zlib zlib-devel libyaml-devel libffi-devel openssl-devel make bzip2 autoconf automake libtool bison iconv-devel\n```\n\n使用 rvm 官方提供的脚本安装 rvm：\n\n```\ncurl -L get.rvm.io | sh -s stable\n```\n\n如果按照以上命令安装 rvm 失败，需要使用以下方式更新相关证书：\n\n```\ncurl -sSL https://rvm.io/mpapis.asc | gpg2 --import -\ncurl -sSL https://rvm.io/pkuczynski.asc | gpg2 --import -\n```\n\n证书更新之后再次执行 `curl -L get.rvm.io | sh -s stable` 安装 rvm。安装完成时候可以设置 `rvm` 命令：\n\n```\nsource /etc/profile.d/rvm.sh\n```\n\n查看当前 Ruby 版本：\n\n```\nruby -v\n```\n\n使用 rvm 安装指定版本的 Ruby：\n\n```\nrvm install {ruby_version}\n```\n\n如果安装过程太慢，可以考虑切换到其它安装源镜像，在 `/usr/local.rvm/user/db` 文件中加入：\n\n```\nruby_url={ruby_source_url}\n```\n\n即可。\n","source":"_posts/how-to-install-and-manage-ruby.md","raw":"---\ntitle: 如何安装及管理 Ruby\ndate: 2018-12-26 01:55:06\ntags:\n  - Ruby\n---\n\n可以使用 rvm 管理 Ruby 及其软件包。\n\n预先安装 Ruby 需要使用到的软件包：\n\n```\nyum install -y gcc-c++ patch readline readline-devel zlib zlib-devel libyaml-devel libffi-devel openssl-devel make bzip2 autoconf automake libtool bison iconv-devel\n```\n\n使用 rvm 官方提供的脚本安装 rvm：\n\n```\ncurl -L get.rvm.io | sh -s stable\n```\n\n如果按照以上命令安装 rvm 失败，需要使用以下方式更新相关证书：\n\n```\ncurl -sSL https://rvm.io/mpapis.asc | gpg2 --import -\ncurl -sSL https://rvm.io/pkuczynski.asc | gpg2 --import -\n```\n\n证书更新之后再次执行 `curl -L get.rvm.io | sh -s stable` 安装 rvm。安装完成时候可以设置 `rvm` 命令：\n\n```\nsource /etc/profile.d/rvm.sh\n```\n\n查看当前 Ruby 版本：\n\n```\nruby -v\n```\n\n使用 rvm 安装指定版本的 Ruby：\n\n```\nrvm install {ruby_version}\n```\n\n如果安装过程太慢，可以考虑切换到其它安装源镜像，在 `/usr/local.rvm/user/db` 文件中加入：\n\n```\nruby_url={ruby_source_url}\n```\n\n即可。\n","slug":"how-to-install-and-manage-ruby","published":1,"updated":"2019-03-26T13:00:08.982Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjtpshasm000llrpq4wtyuys1","content":"<p>可以使用 rvm 管理 Ruby 及其软件包。</p>\n<p>预先安装 Ruby 需要使用到的软件包：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum install -y gcc-c++ patch readline readline-devel zlib zlib-devel libyaml-devel libffi-devel openssl-devel make bzip2 autoconf automake libtool bison iconv-devel</span><br></pre></td></tr></table></figure>\n<p>使用 rvm 官方提供的脚本安装 rvm：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl -L get.rvm.io | sh -s stable</span><br></pre></td></tr></table></figure>\n<p>如果按照以上命令安装 rvm 失败，需要使用以下方式更新相关证书：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl -sSL https://rvm.io/mpapis.asc | gpg2 --import -</span><br><span class=\"line\">curl -sSL https://rvm.io/pkuczynski.asc | gpg2 --import -</span><br></pre></td></tr></table></figure>\n<p>证书更新之后再次执行 <code>curl -L get.rvm.io | sh -s stable</code> 安装 rvm。安装完成时候可以设置 <code>rvm</code> 命令：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">source /etc/profile.d/rvm.sh</span><br></pre></td></tr></table></figure>\n<p>查看当前 Ruby 版本：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ruby -v</span><br></pre></td></tr></table></figure>\n<p>使用 rvm 安装指定版本的 Ruby：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">rvm install &#123;ruby_version&#125;</span><br></pre></td></tr></table></figure>\n<p>如果安装过程太慢，可以考虑切换到其它安装源镜像，在 <code>/usr/local.rvm/user/db</code> 文件中加入：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ruby_url=&#123;ruby_source_url&#125;</span><br></pre></td></tr></table></figure>\n<p>即可。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>可以使用 rvm 管理 Ruby 及其软件包。</p>\n<p>预先安装 Ruby 需要使用到的软件包：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum install -y gcc-c++ patch readline readline-devel zlib zlib-devel libyaml-devel libffi-devel openssl-devel make bzip2 autoconf automake libtool bison iconv-devel</span><br></pre></td></tr></table></figure>\n<p>使用 rvm 官方提供的脚本安装 rvm：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl -L get.rvm.io | sh -s stable</span><br></pre></td></tr></table></figure>\n<p>如果按照以上命令安装 rvm 失败，需要使用以下方式更新相关证书：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl -sSL https://rvm.io/mpapis.asc | gpg2 --import -</span><br><span class=\"line\">curl -sSL https://rvm.io/pkuczynski.asc | gpg2 --import -</span><br></pre></td></tr></table></figure>\n<p>证书更新之后再次执行 <code>curl -L get.rvm.io | sh -s stable</code> 安装 rvm。安装完成时候可以设置 <code>rvm</code> 命令：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">source /etc/profile.d/rvm.sh</span><br></pre></td></tr></table></figure>\n<p>查看当前 Ruby 版本：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ruby -v</span><br></pre></td></tr></table></figure>\n<p>使用 rvm 安装指定版本的 Ruby：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">rvm install &#123;ruby_version&#125;</span><br></pre></td></tr></table></figure>\n<p>如果安装过程太慢，可以考虑切换到其它安装源镜像，在 <code>/usr/local.rvm/user/db</code> 文件中加入：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ruby_url=&#123;ruby_source_url&#125;</span><br></pre></td></tr></table></figure>\n<p>即可。</p>\n"},{"title":"快速安装 zsh","date":"2017-04-28T04:10:27.000Z","_content":"\n在新机器上快速安装比 bash 不知道高到哪里去了的 zsh。\n\n```shell\n# 安装 zsh\nyum -y install zsh\n# 把默认 shell 替换为 zsh\nchsh -s /bin/zsh\n\n# 安装 oh-my-zsh\nwhich curl || yum -y install curl\ncurl -L https://raw.github.com/robbyrussell/oh-my-zsh/master/tools/install.sh | sh\n```\n","source":"_posts/how-to-install-zsh-quickly.md","raw":"---\ntitle: 快速安装 zsh\ndate: 2017-04-28 12:10:27\ntags:\n  - zsh\n---\n\n在新机器上快速安装比 bash 不知道高到哪里去了的 zsh。\n\n```shell\n# 安装 zsh\nyum -y install zsh\n# 把默认 shell 替换为 zsh\nchsh -s /bin/zsh\n\n# 安装 oh-my-zsh\nwhich curl || yum -y install curl\ncurl -L https://raw.github.com/robbyrussell/oh-my-zsh/master/tools/install.sh | sh\n```\n","slug":"how-to-install-zsh-quickly","published":1,"updated":"2019-03-26T13:00:08.983Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjtpshasn000mlrpqqyvt2x0i","content":"<p>在新机器上快速安装比 bash 不知道高到哪里去了的 zsh。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span> 安装 zsh</span><br><span class=\"line\">yum -y install zsh</span><br><span class=\"line\"><span class=\"meta\">#</span> 把默认 shell 替换为 zsh</span><br><span class=\"line\">chsh -s /bin/zsh</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span> 安装 oh-my-zsh</span><br><span class=\"line\">which curl || yum -y install curl</span><br><span class=\"line\">curl -L https://raw.github.com/robbyrussell/oh-my-zsh/master/tools/install.sh | sh</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<p>在新机器上快速安装比 bash 不知道高到哪里去了的 zsh。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span> 安装 zsh</span><br><span class=\"line\">yum -y install zsh</span><br><span class=\"line\"><span class=\"meta\">#</span> 把默认 shell 替换为 zsh</span><br><span class=\"line\">chsh -s /bin/zsh</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span> 安装 oh-my-zsh</span><br><span class=\"line\">which curl || yum -y install curl</span><br><span class=\"line\">curl -L https://raw.github.com/robbyrussell/oh-my-zsh/master/tools/install.sh | sh</span><br></pre></td></tr></table></figure>\n"},{"title":"使用 pymysql 模块时查询返回字典的方法","date":"2016-12-01T02:10:14.000Z","_content":"\n使用 `pymysql` 模块在 MySQL 中进行查询时，如果是使用以下这种默认的查询方法时，调用 `fetchone()` 和 `fetchall()` 返回的查询结果将会分别是元组和嵌套元组，只能使用下标去访问查询出来的每个字段的值，相当不方便，也不灵活。\n\n```python\nimport pymysql\n\nconnection = {\n    \"host\": \"\",\n    \"user\": \"\",\n    \"passwd\": \"\",\n    \"db\": \"\",\n    \"charset\": \"utf8\"\n}\n\nconn = pymysql.connect(**connection)\ncursor = conn.cursor()\nsql = \"blabla\"\ncursor.execute(sql)\nresult = cursor.fetchall()\n```\n\n最方便的返回莫过于字典了，字段名作为键名，查询出来的值作为键值，与字段的顺序无关。需要在查询的时候返回字典，只需要在连接参数中指定一个 `cursorclass` 参数为 `pymysql.cursors.DictCursor` 即可，使用 `fetchone()` 和 `fetchall()` 返回的查询结果分别为字典和以每一行为一个字典组成的列表。\n\n```python\nimport pymysql\n\nconnection = {\n    \"host\": \"\",\n    \"user\": \"\",\n    \"passwd\": \"\",\n    \"db\": \"\",\n    \"charset\": \"utf8\",\n    \"cursorclass\": pymysql.cursors.DictCursor\n}\nconn = pymysql.connect(**connection)\ncursor = conn.cursor()\nsql = \"blabla\"\ncursor.execute(sql)\nresult = cursor.fetchall()\n```\n","source":"_posts/how-to-return-dictionary-when-using-pymysql-module-for-querying.md","raw":"---\ntitle: 使用 pymysql 模块时查询返回字典的方法\ndate: 2016-12-01 10:10:14\ntags:\n  - MySQL\n  - Python\n  - 奇技淫巧\n---\n\n使用 `pymysql` 模块在 MySQL 中进行查询时，如果是使用以下这种默认的查询方法时，调用 `fetchone()` 和 `fetchall()` 返回的查询结果将会分别是元组和嵌套元组，只能使用下标去访问查询出来的每个字段的值，相当不方便，也不灵活。\n\n```python\nimport pymysql\n\nconnection = {\n    \"host\": \"\",\n    \"user\": \"\",\n    \"passwd\": \"\",\n    \"db\": \"\",\n    \"charset\": \"utf8\"\n}\n\nconn = pymysql.connect(**connection)\ncursor = conn.cursor()\nsql = \"blabla\"\ncursor.execute(sql)\nresult = cursor.fetchall()\n```\n\n最方便的返回莫过于字典了，字段名作为键名，查询出来的值作为键值，与字段的顺序无关。需要在查询的时候返回字典，只需要在连接参数中指定一个 `cursorclass` 参数为 `pymysql.cursors.DictCursor` 即可，使用 `fetchone()` 和 `fetchall()` 返回的查询结果分别为字典和以每一行为一个字典组成的列表。\n\n```python\nimport pymysql\n\nconnection = {\n    \"host\": \"\",\n    \"user\": \"\",\n    \"passwd\": \"\",\n    \"db\": \"\",\n    \"charset\": \"utf8\",\n    \"cursorclass\": pymysql.cursors.DictCursor\n}\nconn = pymysql.connect(**connection)\ncursor = conn.cursor()\nsql = \"blabla\"\ncursor.execute(sql)\nresult = cursor.fetchall()\n```\n","slug":"how-to-return-dictionary-when-using-pymysql-module-for-querying","published":1,"updated":"2019-03-26T13:00:08.983Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjtpshasp000plrpqgsyj6676","content":"<p>使用 <code>pymysql</code> 模块在 MySQL 中进行查询时，如果是使用以下这种默认的查询方法时，调用 <code>fetchone()</code> 和 <code>fetchall()</code> 返回的查询结果将会分别是元组和嵌套元组，只能使用下标去访问查询出来的每个字段的值，相当不方便，也不灵活。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> pymysql</span><br><span class=\"line\"></span><br><span class=\"line\">connection = &#123;</span><br><span class=\"line\">    <span class=\"string\">\"host\"</span>: <span class=\"string\">\"\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"user\"</span>: <span class=\"string\">\"\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"passwd\"</span>: <span class=\"string\">\"\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"db\"</span>: <span class=\"string\">\"\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"charset\"</span>: <span class=\"string\">\"utf8\"</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">conn = pymysql.connect(**connection)</span><br><span class=\"line\">cursor = conn.cursor()</span><br><span class=\"line\">sql = <span class=\"string\">\"blabla\"</span></span><br><span class=\"line\">cursor.execute(sql)</span><br><span class=\"line\">result = cursor.fetchall()</span><br></pre></td></tr></table></figure>\n<p>最方便的返回莫过于字典了，字段名作为键名，查询出来的值作为键值，与字段的顺序无关。需要在查询的时候返回字典，只需要在连接参数中指定一个 <code>cursorclass</code> 参数为 <code>pymysql.cursors.DictCursor</code> 即可，使用 <code>fetchone()</code> 和 <code>fetchall()</code> 返回的查询结果分别为字典和以每一行为一个字典组成的列表。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> pymysql</span><br><span class=\"line\"></span><br><span class=\"line\">connection = &#123;</span><br><span class=\"line\">    <span class=\"string\">\"host\"</span>: <span class=\"string\">\"\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"user\"</span>: <span class=\"string\">\"\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"passwd\"</span>: <span class=\"string\">\"\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"db\"</span>: <span class=\"string\">\"\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"charset\"</span>: <span class=\"string\">\"utf8\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"cursorclass\"</span>: pymysql.cursors.DictCursor</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">conn = pymysql.connect(**connection)</span><br><span class=\"line\">cursor = conn.cursor()</span><br><span class=\"line\">sql = <span class=\"string\">\"blabla\"</span></span><br><span class=\"line\">cursor.execute(sql)</span><br><span class=\"line\">result = cursor.fetchall()</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<p>使用 <code>pymysql</code> 模块在 MySQL 中进行查询时，如果是使用以下这种默认的查询方法时，调用 <code>fetchone()</code> 和 <code>fetchall()</code> 返回的查询结果将会分别是元组和嵌套元组，只能使用下标去访问查询出来的每个字段的值，相当不方便，也不灵活。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> pymysql</span><br><span class=\"line\"></span><br><span class=\"line\">connection = &#123;</span><br><span class=\"line\">    <span class=\"string\">\"host\"</span>: <span class=\"string\">\"\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"user\"</span>: <span class=\"string\">\"\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"passwd\"</span>: <span class=\"string\">\"\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"db\"</span>: <span class=\"string\">\"\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"charset\"</span>: <span class=\"string\">\"utf8\"</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">conn = pymysql.connect(**connection)</span><br><span class=\"line\">cursor = conn.cursor()</span><br><span class=\"line\">sql = <span class=\"string\">\"blabla\"</span></span><br><span class=\"line\">cursor.execute(sql)</span><br><span class=\"line\">result = cursor.fetchall()</span><br></pre></td></tr></table></figure>\n<p>最方便的返回莫过于字典了，字段名作为键名，查询出来的值作为键值，与字段的顺序无关。需要在查询的时候返回字典，只需要在连接参数中指定一个 <code>cursorclass</code> 参数为 <code>pymysql.cursors.DictCursor</code> 即可，使用 <code>fetchone()</code> 和 <code>fetchall()</code> 返回的查询结果分别为字典和以每一行为一个字典组成的列表。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> pymysql</span><br><span class=\"line\"></span><br><span class=\"line\">connection = &#123;</span><br><span class=\"line\">    <span class=\"string\">\"host\"</span>: <span class=\"string\">\"\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"user\"</span>: <span class=\"string\">\"\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"passwd\"</span>: <span class=\"string\">\"\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"db\"</span>: <span class=\"string\">\"\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"charset\"</span>: <span class=\"string\">\"utf8\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"cursorclass\"</span>: pymysql.cursors.DictCursor</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">conn = pymysql.connect(**connection)</span><br><span class=\"line\">cursor = conn.cursor()</span><br><span class=\"line\">sql = <span class=\"string\">\"blabla\"</span></span><br><span class=\"line\">cursor.execute(sql)</span><br><span class=\"line\">result = cursor.fetchall()</span><br></pre></td></tr></table></figure>\n"},{"title":"在 Vim 内 sudo 保存文件","date":"2016-01-29T05:54:59.000Z","_content":"\n有时候未使用 root 用户在一些较为重要的目录下使用 Vim 编辑文件时，往往会因为权限不足而无法保存，而退出去 `sudo` 后重新编辑又比较浪费时间。这个时候需要在 Vim 中执行下面这个命令，就可以在不退出 Vim 的前提下 `sudo` 保存文件。\n\n```\n:w !sudo tee %\n```\n\n:w 在 Vim 中是保存文件，这是毫无疑问的。\n\n！后面跟一个命令，表示让 Vim 执行一个外部命令。\n\ntee 是一个把 stdin 保存到文件的小工具，具体用法是：\n\n```\ntee {filename}\n```\n\n就能将 stdin 流保存到指定的文件中。\n\n% 是 Vim 当中一个只读寄存器的名字，总保存着当前编辑文件的文件路径。\n","source":"_posts/how-to-save-files-using-sudo-without-quitting-vim.md","raw":"---\ntitle: 在 Vim 内 sudo 保存文件\ndate: 2016-01-29 13:54:59\ntags:\n  - vim\n  - 奇技淫巧\n---\n\n有时候未使用 root 用户在一些较为重要的目录下使用 Vim 编辑文件时，往往会因为权限不足而无法保存，而退出去 `sudo` 后重新编辑又比较浪费时间。这个时候需要在 Vim 中执行下面这个命令，就可以在不退出 Vim 的前提下 `sudo` 保存文件。\n\n```\n:w !sudo tee %\n```\n\n:w 在 Vim 中是保存文件，这是毫无疑问的。\n\n！后面跟一个命令，表示让 Vim 执行一个外部命令。\n\ntee 是一个把 stdin 保存到文件的小工具，具体用法是：\n\n```\ntee {filename}\n```\n\n就能将 stdin 流保存到指定的文件中。\n\n% 是 Vim 当中一个只读寄存器的名字，总保存着当前编辑文件的文件路径。\n","slug":"how-to-save-files-using-sudo-without-quitting-vim","published":1,"updated":"2019-03-26T13:00:08.983Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjtpshasq000rlrpq8k29fqsm","content":"<p>有时候未使用 root 用户在一些较为重要的目录下使用 Vim 编辑文件时，往往会因为权限不足而无法保存，而退出去 <code>sudo</code> 后重新编辑又比较浪费时间。这个时候需要在 Vim 中执行下面这个命令，就可以在不退出 Vim 的前提下 <code>sudo</code> 保存文件。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">:w !sudo tee %</span><br></pre></td></tr></table></figure>\n<p>:w 在 Vim 中是保存文件，这是毫无疑问的。</p>\n<p>！后面跟一个命令，表示让 Vim 执行一个外部命令。</p>\n<p>tee 是一个把 stdin 保存到文件的小工具，具体用法是：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tee &#123;filename&#125;</span><br></pre></td></tr></table></figure>\n<p>就能将 stdin 流保存到指定的文件中。</p>\n<p>% 是 Vim 当中一个只读寄存器的名字，总保存着当前编辑文件的文件路径。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>有时候未使用 root 用户在一些较为重要的目录下使用 Vim 编辑文件时，往往会因为权限不足而无法保存，而退出去 <code>sudo</code> 后重新编辑又比较浪费时间。这个时候需要在 Vim 中执行下面这个命令，就可以在不退出 Vim 的前提下 <code>sudo</code> 保存文件。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">:w !sudo tee %</span><br></pre></td></tr></table></figure>\n<p>:w 在 Vim 中是保存文件，这是毫无疑问的。</p>\n<p>！后面跟一个命令，表示让 Vim 执行一个外部命令。</p>\n<p>tee 是一个把 stdin 保存到文件的小工具，具体用法是：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tee &#123;filename&#125;</span><br></pre></td></tr></table></figure>\n<p>就能将 stdin 流保存到指定的文件中。</p>\n<p>% 是 Vim 当中一个只读寄存器的名字，总保存着当前编辑文件的文件路径。</p>\n"},{"title":"Selenium 使用 Firefox 无头浏览器","date":"2017-03-04T04:08:59.000Z","_content":"\n目前 Selenium 已经停止对 PhantomJS 的支持。虽然 `webdriver.PhantomJS()` 仍然可以使用，但最佳选择应该是 Firefox 或者 Chrome 对应的无头浏览器，如果需要使用 Firefox 无头浏览器，可以按照以下方式开启：\n\n```python\nfrom selenium import webdriver\nfrom selenium.webdriver.firefox.options import Options\n\noptions = Options()\noptions.add_argument(\"-headless\")\ndriver = Firefox(firefox_options=options)\n```\n\n此时建立的 `webdriver` 对象就是一个 Firefox 的无头浏览器，如果需要使用 Chrome 无头浏览器，建立方法与 Firefox 差异不大。与 PhantomJS 无头浏览器相比，Firefox 无头浏览器建立对象的速度比较慢。\n","source":"_posts/how-to-use-headless-browser-of-firefox.md","raw":"---\ntitle: Selenium 使用 Firefox 无头浏览器\ndate: 2017-03-04 12:08:59\ntags:\n  - Firefox\n  - PhantomJS\n  - Python\n  - Selenium\n---\n\n目前 Selenium 已经停止对 PhantomJS 的支持。虽然 `webdriver.PhantomJS()` 仍然可以使用，但最佳选择应该是 Firefox 或者 Chrome 对应的无头浏览器，如果需要使用 Firefox 无头浏览器，可以按照以下方式开启：\n\n```python\nfrom selenium import webdriver\nfrom selenium.webdriver.firefox.options import Options\n\noptions = Options()\noptions.add_argument(\"-headless\")\ndriver = Firefox(firefox_options=options)\n```\n\n此时建立的 `webdriver` 对象就是一个 Firefox 的无头浏览器，如果需要使用 Chrome 无头浏览器，建立方法与 Firefox 差异不大。与 PhantomJS 无头浏览器相比，Firefox 无头浏览器建立对象的速度比较慢。\n","slug":"how-to-use-headless-browser-of-firefox","published":1,"updated":"2019-03-26T13:00:08.983Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjtpshasw000ulrpqhohsyzon","content":"<p>目前 Selenium 已经停止对 PhantomJS 的支持。虽然 <code>webdriver.PhantomJS()</code> 仍然可以使用，但最佳选择应该是 Firefox 或者 Chrome 对应的无头浏览器，如果需要使用 Firefox 无头浏览器，可以按照以下方式开启：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> selenium <span class=\"keyword\">import</span> webdriver</span><br><span class=\"line\"><span class=\"keyword\">from</span> selenium.webdriver.firefox.options <span class=\"keyword\">import</span> Options</span><br><span class=\"line\"></span><br><span class=\"line\">options = Options()</span><br><span class=\"line\">options.add_argument(<span class=\"string\">\"-headless\"</span>)</span><br><span class=\"line\">driver = Firefox(firefox_options=options)</span><br></pre></td></tr></table></figure>\n<p>此时建立的 <code>webdriver</code> 对象就是一个 Firefox 的无头浏览器，如果需要使用 Chrome 无头浏览器，建立方法与 Firefox 差异不大。与 PhantomJS 无头浏览器相比，Firefox 无头浏览器建立对象的速度比较慢。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>目前 Selenium 已经停止对 PhantomJS 的支持。虽然 <code>webdriver.PhantomJS()</code> 仍然可以使用，但最佳选择应该是 Firefox 或者 Chrome 对应的无头浏览器，如果需要使用 Firefox 无头浏览器，可以按照以下方式开启：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> selenium <span class=\"keyword\">import</span> webdriver</span><br><span class=\"line\"><span class=\"keyword\">from</span> selenium.webdriver.firefox.options <span class=\"keyword\">import</span> Options</span><br><span class=\"line\"></span><br><span class=\"line\">options = Options()</span><br><span class=\"line\">options.add_argument(<span class=\"string\">\"-headless\"</span>)</span><br><span class=\"line\">driver = Firefox(firefox_options=options)</span><br></pre></td></tr></table></figure>\n<p>此时建立的 <code>webdriver</code> 对象就是一个 Firefox 的无头浏览器，如果需要使用 Chrome 无头浏览器，建立方法与 Firefox 差异不大。与 PhantomJS 无头浏览器相比，Firefox 无头浏览器建立对象的速度比较慢。</p>\n"},{"title":"MySQL 5.6 无口令 dump","date":"2018-04-09T03:44:33.000Z","_content":"\n为了提高安全性，MySQL 5.6 开始在 `mysql` 和 `mysqldump` 命令中明文输入口令时报 Warning: Using apassword on the command line interface can be insecure. 的警告。\n\n在使用 shell 脚本来导出数据的时候，还是不要使用明文口令为妙。对于 MySQL 5.6+，可以在配置文件（CentOS 7 中为 `/etc/my.cnf`）中加入以下内容，再使用 `mysqldump` 就不需要使用口令了。\n\n```\n[mysqldump]\nuser={MySQL 用户名}\npassword={口令}\n```\n","source":"_posts/how-to-use-mysqldump-without-password.md","raw":"---\ntitle: MySQL 5.6 无口令 dump\ndate: 2018-04-09 11:44:33\ntags:\n  - Linux\n  - MySQL\n---\n\n为了提高安全性，MySQL 5.6 开始在 `mysql` 和 `mysqldump` 命令中明文输入口令时报 Warning: Using apassword on the command line interface can be insecure. 的警告。\n\n在使用 shell 脚本来导出数据的时候，还是不要使用明文口令为妙。对于 MySQL 5.6+，可以在配置文件（CentOS 7 中为 `/etc/my.cnf`）中加入以下内容，再使用 `mysqldump` 就不需要使用口令了。\n\n```\n[mysqldump]\nuser={MySQL 用户名}\npassword={口令}\n```\n","slug":"how-to-use-mysqldump-without-password","published":1,"updated":"2019-03-26T13:00:08.983Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjtpshatb000vlrpq5ps4h2zz","content":"<p>为了提高安全性，MySQL 5.6 开始在 <code>mysql</code> 和 <code>mysqldump</code> 命令中明文输入口令时报 Warning: Using apassword on the command line interface can be insecure. 的警告。</p>\n<p>在使用 shell 脚本来导出数据的时候，还是不要使用明文口令为妙。对于 MySQL 5.6+，可以在配置文件（CentOS 7 中为 <code>/etc/my.cnf</code>）中加入以下内容，再使用 <code>mysqldump</code> 就不需要使用口令了。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[mysqldump]</span><br><span class=\"line\">user=&#123;MySQL 用户名&#125;</span><br><span class=\"line\">password=&#123;口令&#125;</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<p>为了提高安全性，MySQL 5.6 开始在 <code>mysql</code> 和 <code>mysqldump</code> 命令中明文输入口令时报 Warning: Using apassword on the command line interface can be insecure. 的警告。</p>\n<p>在使用 shell 脚本来导出数据的时候，还是不要使用明文口令为妙。对于 MySQL 5.6+，可以在配置文件（CentOS 7 中为 <code>/etc/my.cnf</code>）中加入以下内容，再使用 <code>mysqldump</code> 就不需要使用口令了。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[mysqldump]</span><br><span class=\"line\">user=&#123;MySQL 用户名&#125;</span><br><span class=\"line\">password=&#123;口令&#125;</span><br></pre></td></tr></table></figure>\n"},{"title":"Saltstack 初始化部署","date":"2018-07-10T06:26:12.000Z","_content":"\n主控端安装 salt-master：\n\n```shell\nyum install -y salt-master\nsystemctl enable salt-master.service\nsystemctl start salt-master.service\n```\n\n被控端安装 salt-minion：\n\n```shell\nyum install -y salt-minion\nsystemctl enable salt-minion.service\nsystemctl start salt-minion.service\n```\n\n在主控端添加 TCP 4505、TCP 4506 的规则，在被控端无需配置防火墙。原理是被控端直接与主控端的 zeroMQ 建立长连接，接受广播到的任务信息并执行。\n\n```shell\niptables -I INPUT -m state --state new -m tcp -p tcp --dport 4505 -j ACCEPT\niptables -I INPUT -m state --state new -m tcp -p tcp --dport 4506 -j ACCEPT\n```\n\n在主控端进行角色配置，修改主控端配置文件 `/etc/salt/master`：\n\n```\ninterface: {主控端 IP 地址}\n\n# 自动认证，如果不打开，需要通过 `salt-key -a {id}` 进行 key 的认证\nauto_accept: true\n\n# 指定 Saltstack 文件根目录位置\nfile_roots:\n    base:\n        - /srv/salt\n```\n\n然后重启主控端的 Saltstack 服务。\n\n在被控端进行角色配置，修改被控端配置文件 `/etc/salt/minion`：\n\n```\nmaster: {主控端 IP 地址}\n\n# 修改被控端主机识别 id\nid: {id}\n```\n\n然后重启被控端的 Saltstack 服务。\n","source":"_posts/initiation-of-saltstack.md","raw":"---\ntitle: Saltstack 初始化部署\ndate: 2018-07-10 14:26:12\ntags:\n  - Linux\n  - Python\n  - Saltstack\n---\n\n主控端安装 salt-master：\n\n```shell\nyum install -y salt-master\nsystemctl enable salt-master.service\nsystemctl start salt-master.service\n```\n\n被控端安装 salt-minion：\n\n```shell\nyum install -y salt-minion\nsystemctl enable salt-minion.service\nsystemctl start salt-minion.service\n```\n\n在主控端添加 TCP 4505、TCP 4506 的规则，在被控端无需配置防火墙。原理是被控端直接与主控端的 zeroMQ 建立长连接，接受广播到的任务信息并执行。\n\n```shell\niptables -I INPUT -m state --state new -m tcp -p tcp --dport 4505 -j ACCEPT\niptables -I INPUT -m state --state new -m tcp -p tcp --dport 4506 -j ACCEPT\n```\n\n在主控端进行角色配置，修改主控端配置文件 `/etc/salt/master`：\n\n```\ninterface: {主控端 IP 地址}\n\n# 自动认证，如果不打开，需要通过 `salt-key -a {id}` 进行 key 的认证\nauto_accept: true\n\n# 指定 Saltstack 文件根目录位置\nfile_roots:\n    base:\n        - /srv/salt\n```\n\n然后重启主控端的 Saltstack 服务。\n\n在被控端进行角色配置，修改被控端配置文件 `/etc/salt/minion`：\n\n```\nmaster: {主控端 IP 地址}\n\n# 修改被控端主机识别 id\nid: {id}\n```\n\n然后重启被控端的 Saltstack 服务。\n","slug":"initiation-of-saltstack","published":1,"updated":"2019-03-26T13:00:08.983Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjtpshatd000xlrpqxted04zo","content":"<p>主控端安装 salt-master：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum install -y salt-master</span><br><span class=\"line\">systemctl enable salt-master.service</span><br><span class=\"line\">systemctl start salt-master.service</span><br></pre></td></tr></table></figure>\n<p>被控端安装 salt-minion：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum install -y salt-minion</span><br><span class=\"line\">systemctl enable salt-minion.service</span><br><span class=\"line\">systemctl start salt-minion.service</span><br></pre></td></tr></table></figure>\n<p>在主控端添加 TCP 4505、TCP 4506 的规则，在被控端无需配置防火墙。原理是被控端直接与主控端的 zeroMQ 建立长连接，接受广播到的任务信息并执行。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">iptables -I INPUT -m state --state new -m tcp -p tcp --dport 4505 -j ACCEPT</span><br><span class=\"line\">iptables -I INPUT -m state --state new -m tcp -p tcp --dport 4506 -j ACCEPT</span><br></pre></td></tr></table></figure>\n<p>在主控端进行角色配置，修改主控端配置文件 <code>/etc/salt/master</code>：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">interface: &#123;主控端 IP 地址&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"># 自动认证，如果不打开，需要通过 `salt-key -a &#123;id&#125;` 进行 key 的认证</span><br><span class=\"line\">auto_accept: true</span><br><span class=\"line\"></span><br><span class=\"line\"># 指定 Saltstack 文件根目录位置</span><br><span class=\"line\">file_roots:</span><br><span class=\"line\">    base:</span><br><span class=\"line\">        - /srv/salt</span><br></pre></td></tr></table></figure>\n<p>然后重启主控端的 Saltstack 服务。</p>\n<p>在被控端进行角色配置，修改被控端配置文件 <code>/etc/salt/minion</code>：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">master: &#123;主控端 IP 地址&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"># 修改被控端主机识别 id</span><br><span class=\"line\">id: &#123;id&#125;</span><br></pre></td></tr></table></figure>\n<p>然后重启被控端的 Saltstack 服务。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>主控端安装 salt-master：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum install -y salt-master</span><br><span class=\"line\">systemctl enable salt-master.service</span><br><span class=\"line\">systemctl start salt-master.service</span><br></pre></td></tr></table></figure>\n<p>被控端安装 salt-minion：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum install -y salt-minion</span><br><span class=\"line\">systemctl enable salt-minion.service</span><br><span class=\"line\">systemctl start salt-minion.service</span><br></pre></td></tr></table></figure>\n<p>在主控端添加 TCP 4505、TCP 4506 的规则，在被控端无需配置防火墙。原理是被控端直接与主控端的 zeroMQ 建立长连接，接受广播到的任务信息并执行。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">iptables -I INPUT -m state --state new -m tcp -p tcp --dport 4505 -j ACCEPT</span><br><span class=\"line\">iptables -I INPUT -m state --state new -m tcp -p tcp --dport 4506 -j ACCEPT</span><br></pre></td></tr></table></figure>\n<p>在主控端进行角色配置，修改主控端配置文件 <code>/etc/salt/master</code>：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">interface: &#123;主控端 IP 地址&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"># 自动认证，如果不打开，需要通过 `salt-key -a &#123;id&#125;` 进行 key 的认证</span><br><span class=\"line\">auto_accept: true</span><br><span class=\"line\"></span><br><span class=\"line\"># 指定 Saltstack 文件根目录位置</span><br><span class=\"line\">file_roots:</span><br><span class=\"line\">    base:</span><br><span class=\"line\">        - /srv/salt</span><br></pre></td></tr></table></figure>\n<p>然后重启主控端的 Saltstack 服务。</p>\n<p>在被控端进行角色配置，修改被控端配置文件 <code>/etc/salt/minion</code>：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">master: &#123;主控端 IP 地址&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"># 修改被控端主机识别 id</span><br><span class=\"line\">id: &#123;id&#125;</span><br></pre></td></tr></table></figure>\n<p>然后重启被控端的 Saltstack 服务。</p>\n"},{"title":"Python 中的列表去重","date":"2015-10-13T04:01:38.000Z","_content":"\n在 Python 中，普通列表可以使用 `set()` 来进行去重，这是使用了集合的唯一性，把列表转换为集合之后保证没有重复的元素，然后再使用 `list()` 把集合转换为列表。但这种方法并不保证元素之间的顺序，而且如果原列表之中含有不能被 hash 的元素（如字典、集合之类），原列表更无法转换为集合类型。\n\n这种情况下应该保持列表的类型，使用 lambda 表达式进行去重：\n\n```python\nimport functools.reduce\nlst = [2, 3, 3, 1]\nfunc = lambda x, y: x if y in x else x + [y]\nfunctools.reduce(func, [[], ] + lst)\n```\n\n这个时候列表 lst 就是 [2, 3, 1] 了。\n","source":"_posts/list-deduplication-in-Python.md","raw":"---\ntitle: Python 中的列表去重\ndate: 2015-10-13 12:01:38\ntags:\n  - Python\n---\n\n在 Python 中，普通列表可以使用 `set()` 来进行去重，这是使用了集合的唯一性，把列表转换为集合之后保证没有重复的元素，然后再使用 `list()` 把集合转换为列表。但这种方法并不保证元素之间的顺序，而且如果原列表之中含有不能被 hash 的元素（如字典、集合之类），原列表更无法转换为集合类型。\n\n这种情况下应该保持列表的类型，使用 lambda 表达式进行去重：\n\n```python\nimport functools.reduce\nlst = [2, 3, 3, 1]\nfunc = lambda x, y: x if y in x else x + [y]\nfunctools.reduce(func, [[], ] + lst)\n```\n\n这个时候列表 lst 就是 [2, 3, 1] 了。\n","slug":"list-deduplication-in-Python","published":1,"updated":"2019-03-26T13:00:08.983Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjtpshate000ylrpq1ewa203b","content":"<p>在 Python 中，普通列表可以使用 <code>set()</code> 来进行去重，这是使用了集合的唯一性，把列表转换为集合之后保证没有重复的元素，然后再使用 <code>list()</code> 把集合转换为列表。但这种方法并不保证元素之间的顺序，而且如果原列表之中含有不能被 hash 的元素（如字典、集合之类），原列表更无法转换为集合类型。</p>\n<p>这种情况下应该保持列表的类型，使用 lambda 表达式进行去重：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> functools.reduce</span><br><span class=\"line\">lst = [<span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">3</span>, <span class=\"number\">1</span>]</span><br><span class=\"line\">func = <span class=\"keyword\">lambda</span> x, y: x <span class=\"keyword\">if</span> y <span class=\"keyword\">in</span> x <span class=\"keyword\">else</span> x + [y]</span><br><span class=\"line\">functools.reduce(func, [[], ] + lst)</span><br></pre></td></tr></table></figure>\n<p>这个时候列表 lst 就是 [2, 3, 1] 了。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>在 Python 中，普通列表可以使用 <code>set()</code> 来进行去重，这是使用了集合的唯一性，把列表转换为集合之后保证没有重复的元素，然后再使用 <code>list()</code> 把集合转换为列表。但这种方法并不保证元素之间的顺序，而且如果原列表之中含有不能被 hash 的元素（如字典、集合之类），原列表更无法转换为集合类型。</p>\n<p>这种情况下应该保持列表的类型，使用 lambda 表达式进行去重：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> functools.reduce</span><br><span class=\"line\">lst = [<span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">3</span>, <span class=\"number\">1</span>]</span><br><span class=\"line\">func = <span class=\"keyword\">lambda</span> x, y: x <span class=\"keyword\">if</span> y <span class=\"keyword\">in</span> x <span class=\"keyword\">else</span> x + [y]</span><br><span class=\"line\">functools.reduce(func, [[], ] + lst)</span><br></pre></td></tr></table></figure>\n<p>这个时候列表 lst 就是 [2, 3, 1] 了。</p>\n"},{"title":"Python 的新式类和经典类","date":"2015-08-19T03:50:09.000Z","_content":"\n在 Python 中声明一个类的时候，如果这个类继承 `object` 类，这个类就是新式类；如果这个类没有继承任何类，这个类就是经典类。\n\n```python\n# 声明一个新式类\nclass new_class(object)：\n    pass\n\n# 声明一个经典类\nclass classic_class(object):\n    pass\n```\n\nPython 的新式类已经兼容经典类，而且新式类已经解决了经典类中关于多继承的缺陷，因此在 Python 中推荐使用新式类。\n\n```python\nclass A:\n    def foo(self):\n        print('called A.foo()')\n\nclass B(A):\n    pass\n\nclass C(A):\n    def foo(self):\n        print('called C.foo()')\n\nclass D(B, C):\n    pass\n\nif __name__ == '__main__':\n    d = D()\n    d.foo()\n```\n\nB、C 是 A 的子类，D 多继承了 B、C 两个类，其中 C 重写了 A 中的 `foo()` 方法。\n\n如果 A 是经典类，当调用 D 的实例的 `foo()` 方法时，Python 会按照深度优先的方法去搜索 `foo()` ，路径是 B-A-C ，执行的是 A 中的 `foo()`；\n\n如果 A 是新式类，当调用 D 的实例的 `foo()` 方法时，Python 会按照广度优先的方法去搜索 `foo()` ，路径是 B-C-A ，执行的是 C 中的 `foo()`。\n\n因为 D 是直接继承 C 的，从逻辑上说，执行 C 中的 `foo()` 更加合理，因此新式类对多继承的处理更为合乎逻辑。\n\n在 Python 3.x 中的新式类已经兼容了经典类，无论 A 是否继承 `object` 类， D 实例中的 `foo()` 都会执行 C 中的 `foo()`。但是在 Python 2.7 中这种差异仍然存在，因此还是推荐使用新式类，要继承 `object` 类。\n","source":"_posts/new-class-and-classic-class-in-Python.md","raw":"---\ntitle: Python 的新式类和经典类\ndate: 2015-08-19 11:50:09\ntags:\n  - Python\n  - 类\n---\n\n在 Python 中声明一个类的时候，如果这个类继承 `object` 类，这个类就是新式类；如果这个类没有继承任何类，这个类就是经典类。\n\n```python\n# 声明一个新式类\nclass new_class(object)：\n    pass\n\n# 声明一个经典类\nclass classic_class(object):\n    pass\n```\n\nPython 的新式类已经兼容经典类，而且新式类已经解决了经典类中关于多继承的缺陷，因此在 Python 中推荐使用新式类。\n\n```python\nclass A:\n    def foo(self):\n        print('called A.foo()')\n\nclass B(A):\n    pass\n\nclass C(A):\n    def foo(self):\n        print('called C.foo()')\n\nclass D(B, C):\n    pass\n\nif __name__ == '__main__':\n    d = D()\n    d.foo()\n```\n\nB、C 是 A 的子类，D 多继承了 B、C 两个类，其中 C 重写了 A 中的 `foo()` 方法。\n\n如果 A 是经典类，当调用 D 的实例的 `foo()` 方法时，Python 会按照深度优先的方法去搜索 `foo()` ，路径是 B-A-C ，执行的是 A 中的 `foo()`；\n\n如果 A 是新式类，当调用 D 的实例的 `foo()` 方法时，Python 会按照广度优先的方法去搜索 `foo()` ，路径是 B-C-A ，执行的是 C 中的 `foo()`。\n\n因为 D 是直接继承 C 的，从逻辑上说，执行 C 中的 `foo()` 更加合理，因此新式类对多继承的处理更为合乎逻辑。\n\n在 Python 3.x 中的新式类已经兼容了经典类，无论 A 是否继承 `object` 类， D 实例中的 `foo()` 都会执行 C 中的 `foo()`。但是在 Python 2.7 中这种差异仍然存在，因此还是推荐使用新式类，要继承 `object` 类。\n","slug":"new-class-and-classic-class-in-Python","published":1,"updated":"2019-03-26T13:00:08.983Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjtpshatg0010lrpqwrwburlq","content":"<p>在 Python 中声明一个类的时候，如果这个类继承 <code>object</code> 类，这个类就是新式类；如果这个类没有继承任何类，这个类就是经典类。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 声明一个新式类</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">new_class</span><span class=\"params\">(object)</span>：</span></span><br><span class=\"line\"><span class=\"class\">    <span class=\"title\">pass</span></span></span><br><span class=\"line\"><span class=\"class\"></span></span><br><span class=\"line\"><span class=\"class\"># 声明一个经典类</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"title\">class</span> <span class=\"title\">classic_class</span><span class=\"params\">(object)</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">pass</span></span><br></pre></td></tr></table></figure>\n<p>Python 的新式类已经兼容经典类，而且新式类已经解决了经典类中关于多继承的缺陷，因此在 Python 中推荐使用新式类。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">A</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">foo</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        print(<span class=\"string\">'called A.foo()'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">B</span><span class=\"params\">(A)</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">pass</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">C</span><span class=\"params\">(A)</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">foo</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        print(<span class=\"string\">'called C.foo()'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">D</span><span class=\"params\">(B, C)</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">pass</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">'__main__'</span>:</span><br><span class=\"line\">    d = D()</span><br><span class=\"line\">    d.foo()</span><br></pre></td></tr></table></figure>\n<p>B、C 是 A 的子类，D 多继承了 B、C 两个类，其中 C 重写了 A 中的 <code>foo()</code> 方法。</p>\n<p>如果 A 是经典类，当调用 D 的实例的 <code>foo()</code> 方法时，Python 会按照深度优先的方法去搜索 <code>foo()</code> ，路径是 B-A-C ，执行的是 A 中的 <code>foo()</code>；</p>\n<p>如果 A 是新式类，当调用 D 的实例的 <code>foo()</code> 方法时，Python 会按照广度优先的方法去搜索 <code>foo()</code> ，路径是 B-C-A ，执行的是 C 中的 <code>foo()</code>。</p>\n<p>因为 D 是直接继承 C 的，从逻辑上说，执行 C 中的 <code>foo()</code> 更加合理，因此新式类对多继承的处理更为合乎逻辑。</p>\n<p>在 Python 3.x 中的新式类已经兼容了经典类，无论 A 是否继承 <code>object</code> 类， D 实例中的 <code>foo()</code> 都会执行 C 中的 <code>foo()</code>。但是在 Python 2.7 中这种差异仍然存在，因此还是推荐使用新式类，要继承 <code>object</code> 类。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>在 Python 中声明一个类的时候，如果这个类继承 <code>object</code> 类，这个类就是新式类；如果这个类没有继承任何类，这个类就是经典类。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 声明一个新式类</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">new_class</span><span class=\"params\">(object)</span>：</span></span><br><span class=\"line\"><span class=\"class\">    <span class=\"title\">pass</span></span></span><br><span class=\"line\"><span class=\"class\"></span></span><br><span class=\"line\"><span class=\"class\"># 声明一个经典类</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"title\">class</span> <span class=\"title\">classic_class</span><span class=\"params\">(object)</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">pass</span></span><br></pre></td></tr></table></figure>\n<p>Python 的新式类已经兼容经典类，而且新式类已经解决了经典类中关于多继承的缺陷，因此在 Python 中推荐使用新式类。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">A</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">foo</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        print(<span class=\"string\">'called A.foo()'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">B</span><span class=\"params\">(A)</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">pass</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">C</span><span class=\"params\">(A)</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">foo</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        print(<span class=\"string\">'called C.foo()'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">D</span><span class=\"params\">(B, C)</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">pass</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">'__main__'</span>:</span><br><span class=\"line\">    d = D()</span><br><span class=\"line\">    d.foo()</span><br></pre></td></tr></table></figure>\n<p>B、C 是 A 的子类，D 多继承了 B、C 两个类，其中 C 重写了 A 中的 <code>foo()</code> 方法。</p>\n<p>如果 A 是经典类，当调用 D 的实例的 <code>foo()</code> 方法时，Python 会按照深度优先的方法去搜索 <code>foo()</code> ，路径是 B-A-C ，执行的是 A 中的 <code>foo()</code>；</p>\n<p>如果 A 是新式类，当调用 D 的实例的 <code>foo()</code> 方法时，Python 会按照广度优先的方法去搜索 <code>foo()</code> ，路径是 B-C-A ，执行的是 C 中的 <code>foo()</code>。</p>\n<p>因为 D 是直接继承 C 的，从逻辑上说，执行 C 中的 <code>foo()</code> 更加合理，因此新式类对多继承的处理更为合乎逻辑。</p>\n<p>在 Python 3.x 中的新式类已经兼容了经典类，无论 A 是否继承 <code>object</code> 类， D 实例中的 <code>foo()</code> 都会执行 C 中的 <code>foo()</code>。但是在 Python 2.7 中这种差异仍然存在，因此还是推荐使用新式类，要继承 <code>object</code> 类。</p>\n"},{"title":"在 WordPress 上在线安装插件的坑","date":"2015-02-13T02:38:25.000Z","_content":"\n通过 WordPress 在线安装插件，目前遇到过两个坑：\n\n* 如果通过 WordPress 在线安装插件，可能会遇到“无法连接到文件系统，请确认您的凭据”的提示。这种情况下一般不是 FTP 账号密码错误，而是安装插件所需要的操作权限不够。需要把 `wordpress/`、`wordpress/wp-content/`、`wordpress/wp-content/plugins/` 这三个目录的权限设置为 777，并且在配置文件 `wp-config.php` 中加入以下几行：\n\n```php\ndefine(\"FS_METHOD\",\"direct\");\ndefine(\"FS_CHMOD_DIR\", 0777);\ndefine(\"FS_CHMOD_FILE\", 0777);\n```\n\n* 开始安装后，可能会提示安装失败。这种情况下很可能是 DNS 被封的原因导致，把系统配置文件 `/etc/resolv.conf` 中的两个 `nameserver` 值改为 Google 的 8.8.8.8 和 8.8.4.4 后保存即可。\n","source":"_posts/pitfalls-of-online-installing-plugin-in-WordPress.md","raw":"---\ntitle: 在 WordPress 上在线安装插件的坑\ndate: 2015-02-13 10:38:25\ntags:\n  - PHP\n  - WordPress\n  - 坑\n---\n\n通过 WordPress 在线安装插件，目前遇到过两个坑：\n\n* 如果通过 WordPress 在线安装插件，可能会遇到“无法连接到文件系统，请确认您的凭据”的提示。这种情况下一般不是 FTP 账号密码错误，而是安装插件所需要的操作权限不够。需要把 `wordpress/`、`wordpress/wp-content/`、`wordpress/wp-content/plugins/` 这三个目录的权限设置为 777，并且在配置文件 `wp-config.php` 中加入以下几行：\n\n```php\ndefine(\"FS_METHOD\",\"direct\");\ndefine(\"FS_CHMOD_DIR\", 0777);\ndefine(\"FS_CHMOD_FILE\", 0777);\n```\n\n* 开始安装后，可能会提示安装失败。这种情况下很可能是 DNS 被封的原因导致，把系统配置文件 `/etc/resolv.conf` 中的两个 `nameserver` 值改为 Google 的 8.8.8.8 和 8.8.4.4 后保存即可。\n","slug":"pitfalls-of-online-installing-plugin-in-WordPress","published":1,"updated":"2019-03-26T13:00:08.983Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjtpshati0012lrpqmkza5z5r","content":"<p>通过 WordPress 在线安装插件，目前遇到过两个坑：</p>\n<ul>\n<li>如果通过 WordPress 在线安装插件，可能会遇到“无法连接到文件系统，请确认您的凭据”的提示。这种情况下一般不是 FTP 账号密码错误，而是安装插件所需要的操作权限不够。需要把 <code>wordpress/</code>、<code>wordpress/wp-content/</code>、<code>wordpress/wp-content/plugins/</code> 这三个目录的权限设置为 777，并且在配置文件 <code>wp-config.php</code> 中加入以下几行：</li>\n</ul>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">define(<span class=\"string\">\"FS_METHOD\"</span>,<span class=\"string\">\"direct\"</span>);</span><br><span class=\"line\">define(<span class=\"string\">\"FS_CHMOD_DIR\"</span>, <span class=\"number\">0777</span>);</span><br><span class=\"line\">define(<span class=\"string\">\"FS_CHMOD_FILE\"</span>, <span class=\"number\">0777</span>);</span><br></pre></td></tr></table></figure>\n<ul>\n<li>开始安装后，可能会提示安装失败。这种情况下很可能是 DNS 被封的原因导致，把系统配置文件 <code>/etc/resolv.conf</code> 中的两个 <code>nameserver</code> 值改为 Google 的 8.8.8.8 和 8.8.4.4 后保存即可。</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<p>通过 WordPress 在线安装插件，目前遇到过两个坑：</p>\n<ul>\n<li>如果通过 WordPress 在线安装插件，可能会遇到“无法连接到文件系统，请确认您的凭据”的提示。这种情况下一般不是 FTP 账号密码错误，而是安装插件所需要的操作权限不够。需要把 <code>wordpress/</code>、<code>wordpress/wp-content/</code>、<code>wordpress/wp-content/plugins/</code> 这三个目录的权限设置为 777，并且在配置文件 <code>wp-config.php</code> 中加入以下几行：</li>\n</ul>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">define(<span class=\"string\">\"FS_METHOD\"</span>,<span class=\"string\">\"direct\"</span>);</span><br><span class=\"line\">define(<span class=\"string\">\"FS_CHMOD_DIR\"</span>, <span class=\"number\">0777</span>);</span><br><span class=\"line\">define(<span class=\"string\">\"FS_CHMOD_FILE\"</span>, <span class=\"number\">0777</span>);</span><br></pre></td></tr></table></figure>\n<ul>\n<li>开始安装后，可能会提示安装失败。这种情况下很可能是 DNS 被封的原因导致，把系统配置文件 <code>/etc/resolv.conf</code> 中的两个 <code>nameserver</code> 值改为 Google 的 8.8.8.8 和 8.8.4.4 后保存即可。</li>\n</ul>\n"},{"title":"为远程主机设置别名","date":"2015-03-01T03:38:55.000Z","_content":"\n在进行 `ssh` 或者 `scp` 的时候，为了减少输入量和降低输入错误的概率，可以为常用的远程主机设置别名。\n\n方法是修改 `~/.ssh/config` 文件（如果不存在这个文件则创建），指定以下几个字段值即可：\n\n```\nhost {自定义的主机别名}\nhostname {主机的 IP}\nport {连接主机的端口}\nuser {连接主机的用户名}\n```\n","source":"_posts/set-alias-for-remote-hosts.md","raw":"---\ntitle: 为远程主机设置别名\ndate: 2015-03-01 11:38:55\ntags:\n  - Linux\n  - ssh\n---\n\n在进行 `ssh` 或者 `scp` 的时候，为了减少输入量和降低输入错误的概率，可以为常用的远程主机设置别名。\n\n方法是修改 `~/.ssh/config` 文件（如果不存在这个文件则创建），指定以下几个字段值即可：\n\n```\nhost {自定义的主机别名}\nhostname {主机的 IP}\nport {连接主机的端口}\nuser {连接主机的用户名}\n```\n","slug":"set-alias-for-remote-hosts","published":1,"updated":"2019-03-26T13:00:08.983Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjtpshatj0015lrpqcp7av9s1","content":"<p>在进行 <code>ssh</code> 或者 <code>scp</code> 的时候，为了减少输入量和降低输入错误的概率，可以为常用的远程主机设置别名。</p>\n<p>方法是修改 <code>~/.ssh/config</code> 文件（如果不存在这个文件则创建），指定以下几个字段值即可：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">host &#123;自定义的主机别名&#125;</span><br><span class=\"line\">hostname &#123;主机的 IP&#125;</span><br><span class=\"line\">port &#123;连接主机的端口&#125;</span><br><span class=\"line\">user &#123;连接主机的用户名&#125;</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<p>在进行 <code>ssh</code> 或者 <code>scp</code> 的时候，为了减少输入量和降低输入错误的概率，可以为常用的远程主机设置别名。</p>\n<p>方法是修改 <code>~/.ssh/config</code> 文件（如果不存在这个文件则创建），指定以下几个字段值即可：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">host &#123;自定义的主机别名&#125;</span><br><span class=\"line\">hostname &#123;主机的 IP&#125;</span><br><span class=\"line\">port &#123;连接主机的端口&#125;</span><br><span class=\"line\">user &#123;连接主机的用户名&#125;</span><br></pre></td></tr></table></figure>\n"},{"title":"Ansible 的各个模块及相关参数","date":"2017-02-16T04:08:32.000Z","_content":"\n* command：在被控节点上执行命令\n  * command 是 Ansible 的默认模块，可以不通过 -m 指明使用该模块\n  * 可以直接执行 -a 中的命令，但由于不通过 shell 执行，所以与 shell 有关的变量、重定向、管道等功能无法使用\n  * kwargs：\n    * chdir：目录名。首先跳转到该目录后再执行命令\n* shell：在被控节点上通过 shell 执行命令\n  * 与 command 模块基本相同，而且由于通过 shell 执行，所以可以使用变量、重定向、管道等功能，并且使用所选用户的默认 shell\n  * kwargs：\n    * chdir：目录名。首先跳转到该目录后再执行命令\n* script：在被控节点上执行主控节点上的脚本\n  * 直接在 -a 中指明主控节点上的脚本位置即可，且这个脚本需要有 x 权限\n* ping：检测某个目的节点是否响应\n  * 这个检测过程并不向目的节点发送 ping 包，只是反映目的节点是否可控，目的节点即使在可达的情况下也不一定可控\n  * 不指定 -a\n* yum：在被控节点上通过 yum 管理软件\n  * kwargs：\n    * name：软件包名称。如果为 * ，则执行 yum -y updtae；名称前面加 @ 为安装软件包组；名称前面加 @^ 为安装环境组；这个参数也可以是 url，此时通过指定的 rpm 文件进行安装\n    * state：软件安装状态。如果为 present、latest 或 installed 则执行安装软件；如果为 absent 或 removed 则执行移除软件\n* copy：从主控节点向被控节点复制文件\n  * kwargs：\n    * src：主控节点的文件位置。可以是绝对路径或相对路径，如果是一个目录，将会进行递归复制\n    * dest：被控节点的文件位置。必须为绝对路径，且如果 src 是一个目录，dest 也必须为一个目录\n    * directory_mode：递归设定目录的权限。默认为系统默认权限\n    * force：是否覆盖。默认为 yes，即当目标文件和源文件不同时，强制覆盖文件，如果为 no 则只有在目标文件不存在时才复制\n* fetch：从被控节点向主控节点复制文件\n  * 与 copy 模块并不仅仅是方向相反，copy 可以复制文件和目录，而 fetch 模块只能复制文件\n  * kwargs：\n    * src：被控节点的文件位置。\n    * dest：文件在主控节点中的保存位置。真实的保存目录需要注意，如果指定了 dest 参数为 /foo，被控节点为 bar，则文件将会保存在 /foo/bar/ 下\n    * fail_on_missing：被控节点中的文件不存在时是否报错。默认为 no，当为 no 时即使文件不存在也不会报错，此时主控节点也不会创建相应的目录\n* synchronize：通过 rsync 传输文件\n  * kwargs：\n    * src：源文件的位置。\n    * dest：目标文件的位置。\n    * mode：推送模式或拉取模式。默认为推送模式 push，从主控节点向被控节点传输文件\n    * delete：是否删除文件使两方一致。两方的一致性以推送方为准，默认为 no\n* service：用于管理服务\n  * kwargs：\n    * name：服务名称。\n    * state：对服务的操作。包括启动(started)、停止(stopped)、重启(restarted)、重新加载(reloaded)\n    * enabled：是否开机启动。且 state 和 enabled 两个参数中至少要有一个\n    * sleep：在 state=restarted 的时候，指定在 stop 和 start 之间暂停的秒数\n* get_url：通过 http/https/ftp 下载文件\n  * kwargs：\n    * url：下载的 uri\n    * dest：文件下载目标位置。如果 dest 为目录，则使用服务器提供的文件名，或者如果没有提供，将使用远程服务器上的 url 的基本名称。\n    * timeout：设置超时时间。默认为 10s\n    * headers：指定访问时的请求头。以 key: value 的格式填写\n\n","source":"_posts/some-modules-and-related-parameters-in-Ansible.md","raw":"---\ntitle: Ansible 的各个模块及相关参数\ndate: 2017-02-16 12:08:32\ntags:\n  - Ansible\n---\n\n* command：在被控节点上执行命令\n  * command 是 Ansible 的默认模块，可以不通过 -m 指明使用该模块\n  * 可以直接执行 -a 中的命令，但由于不通过 shell 执行，所以与 shell 有关的变量、重定向、管道等功能无法使用\n  * kwargs：\n    * chdir：目录名。首先跳转到该目录后再执行命令\n* shell：在被控节点上通过 shell 执行命令\n  * 与 command 模块基本相同，而且由于通过 shell 执行，所以可以使用变量、重定向、管道等功能，并且使用所选用户的默认 shell\n  * kwargs：\n    * chdir：目录名。首先跳转到该目录后再执行命令\n* script：在被控节点上执行主控节点上的脚本\n  * 直接在 -a 中指明主控节点上的脚本位置即可，且这个脚本需要有 x 权限\n* ping：检测某个目的节点是否响应\n  * 这个检测过程并不向目的节点发送 ping 包，只是反映目的节点是否可控，目的节点即使在可达的情况下也不一定可控\n  * 不指定 -a\n* yum：在被控节点上通过 yum 管理软件\n  * kwargs：\n    * name：软件包名称。如果为 * ，则执行 yum -y updtae；名称前面加 @ 为安装软件包组；名称前面加 @^ 为安装环境组；这个参数也可以是 url，此时通过指定的 rpm 文件进行安装\n    * state：软件安装状态。如果为 present、latest 或 installed 则执行安装软件；如果为 absent 或 removed 则执行移除软件\n* copy：从主控节点向被控节点复制文件\n  * kwargs：\n    * src：主控节点的文件位置。可以是绝对路径或相对路径，如果是一个目录，将会进行递归复制\n    * dest：被控节点的文件位置。必须为绝对路径，且如果 src 是一个目录，dest 也必须为一个目录\n    * directory_mode：递归设定目录的权限。默认为系统默认权限\n    * force：是否覆盖。默认为 yes，即当目标文件和源文件不同时，强制覆盖文件，如果为 no 则只有在目标文件不存在时才复制\n* fetch：从被控节点向主控节点复制文件\n  * 与 copy 模块并不仅仅是方向相反，copy 可以复制文件和目录，而 fetch 模块只能复制文件\n  * kwargs：\n    * src：被控节点的文件位置。\n    * dest：文件在主控节点中的保存位置。真实的保存目录需要注意，如果指定了 dest 参数为 /foo，被控节点为 bar，则文件将会保存在 /foo/bar/ 下\n    * fail_on_missing：被控节点中的文件不存在时是否报错。默认为 no，当为 no 时即使文件不存在也不会报错，此时主控节点也不会创建相应的目录\n* synchronize：通过 rsync 传输文件\n  * kwargs：\n    * src：源文件的位置。\n    * dest：目标文件的位置。\n    * mode：推送模式或拉取模式。默认为推送模式 push，从主控节点向被控节点传输文件\n    * delete：是否删除文件使两方一致。两方的一致性以推送方为准，默认为 no\n* service：用于管理服务\n  * kwargs：\n    * name：服务名称。\n    * state：对服务的操作。包括启动(started)、停止(stopped)、重启(restarted)、重新加载(reloaded)\n    * enabled：是否开机启动。且 state 和 enabled 两个参数中至少要有一个\n    * sleep：在 state=restarted 的时候，指定在 stop 和 start 之间暂停的秒数\n* get_url：通过 http/https/ftp 下载文件\n  * kwargs：\n    * url：下载的 uri\n    * dest：文件下载目标位置。如果 dest 为目录，则使用服务器提供的文件名，或者如果没有提供，将使用远程服务器上的 url 的基本名称。\n    * timeout：设置超时时间。默认为 10s\n    * headers：指定访问时的请求头。以 key: value 的格式填写\n\n","slug":"some-modules-and-related-parameters-in-Ansible","published":1,"updated":"2019-03-26T13:00:08.983Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjtpshatm0017lrpqii3f0htv","content":"<ul>\n<li>command：在被控节点上执行命令<ul>\n<li>command 是 Ansible 的默认模块，可以不通过 -m 指明使用该模块</li>\n<li>可以直接执行 -a 中的命令，但由于不通过 shell 执行，所以与 shell 有关的变量、重定向、管道等功能无法使用</li>\n<li>kwargs：<ul>\n<li>chdir：目录名。首先跳转到该目录后再执行命令</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>shell：在被控节点上通过 shell 执行命令<ul>\n<li>与 command 模块基本相同，而且由于通过 shell 执行，所以可以使用变量、重定向、管道等功能，并且使用所选用户的默认 shell</li>\n<li>kwargs：<ul>\n<li>chdir：目录名。首先跳转到该目录后再执行命令</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>script：在被控节点上执行主控节点上的脚本<ul>\n<li>直接在 -a 中指明主控节点上的脚本位置即可，且这个脚本需要有 x 权限</li>\n</ul>\n</li>\n<li>ping：检测某个目的节点是否响应<ul>\n<li>这个检测过程并不向目的节点发送 ping 包，只是反映目的节点是否可控，目的节点即使在可达的情况下也不一定可控</li>\n<li>不指定 -a</li>\n</ul>\n</li>\n<li>yum：在被控节点上通过 yum 管理软件<ul>\n<li>kwargs：<ul>\n<li>name：软件包名称。如果为 * ，则执行 yum -y updtae；名称前面加 @ 为安装软件包组；名称前面加 @^ 为安装环境组；这个参数也可以是 url，此时通过指定的 rpm 文件进行安装</li>\n<li>state：软件安装状态。如果为 present、latest 或 installed 则执行安装软件；如果为 absent 或 removed 则执行移除软件</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>copy：从主控节点向被控节点复制文件<ul>\n<li>kwargs：<ul>\n<li>src：主控节点的文件位置。可以是绝对路径或相对路径，如果是一个目录，将会进行递归复制</li>\n<li>dest：被控节点的文件位置。必须为绝对路径，且如果 src 是一个目录，dest 也必须为一个目录</li>\n<li>directory_mode：递归设定目录的权限。默认为系统默认权限</li>\n<li>force：是否覆盖。默认为 yes，即当目标文件和源文件不同时，强制覆盖文件，如果为 no 则只有在目标文件不存在时才复制</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>fetch：从被控节点向主控节点复制文件<ul>\n<li>与 copy 模块并不仅仅是方向相反，copy 可以复制文件和目录，而 fetch 模块只能复制文件</li>\n<li>kwargs：<ul>\n<li>src：被控节点的文件位置。</li>\n<li>dest：文件在主控节点中的保存位置。真实的保存目录需要注意，如果指定了 dest 参数为 /foo，被控节点为 bar，则文件将会保存在 /foo/bar/ 下</li>\n<li>fail_on_missing：被控节点中的文件不存在时是否报错。默认为 no，当为 no 时即使文件不存在也不会报错，此时主控节点也不会创建相应的目录</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>synchronize：通过 rsync 传输文件<ul>\n<li>kwargs：<ul>\n<li>src：源文件的位置。</li>\n<li>dest：目标文件的位置。</li>\n<li>mode：推送模式或拉取模式。默认为推送模式 push，从主控节点向被控节点传输文件</li>\n<li>delete：是否删除文件使两方一致。两方的一致性以推送方为准，默认为 no</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>service：用于管理服务<ul>\n<li>kwargs：<ul>\n<li>name：服务名称。</li>\n<li>state：对服务的操作。包括启动(started)、停止(stopped)、重启(restarted)、重新加载(reloaded)</li>\n<li>enabled：是否开机启动。且 state 和 enabled 两个参数中至少要有一个</li>\n<li>sleep：在 state=restarted 的时候，指定在 stop 和 start 之间暂停的秒数</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>get_url：通过 http/https/ftp 下载文件<ul>\n<li>kwargs：<ul>\n<li>url：下载的 uri</li>\n<li>dest：文件下载目标位置。如果 dest 为目录，则使用服务器提供的文件名，或者如果没有提供，将使用远程服务器上的 url 的基本名称。</li>\n<li>timeout：设置超时时间。默认为 10s</li>\n<li>headers：指定访问时的请求头。以 key: value 的格式填写</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<ul>\n<li>command：在被控节点上执行命令<ul>\n<li>command 是 Ansible 的默认模块，可以不通过 -m 指明使用该模块</li>\n<li>可以直接执行 -a 中的命令，但由于不通过 shell 执行，所以与 shell 有关的变量、重定向、管道等功能无法使用</li>\n<li>kwargs：<ul>\n<li>chdir：目录名。首先跳转到该目录后再执行命令</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>shell：在被控节点上通过 shell 执行命令<ul>\n<li>与 command 模块基本相同，而且由于通过 shell 执行，所以可以使用变量、重定向、管道等功能，并且使用所选用户的默认 shell</li>\n<li>kwargs：<ul>\n<li>chdir：目录名。首先跳转到该目录后再执行命令</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>script：在被控节点上执行主控节点上的脚本<ul>\n<li>直接在 -a 中指明主控节点上的脚本位置即可，且这个脚本需要有 x 权限</li>\n</ul>\n</li>\n<li>ping：检测某个目的节点是否响应<ul>\n<li>这个检测过程并不向目的节点发送 ping 包，只是反映目的节点是否可控，目的节点即使在可达的情况下也不一定可控</li>\n<li>不指定 -a</li>\n</ul>\n</li>\n<li>yum：在被控节点上通过 yum 管理软件<ul>\n<li>kwargs：<ul>\n<li>name：软件包名称。如果为 * ，则执行 yum -y updtae；名称前面加 @ 为安装软件包组；名称前面加 @^ 为安装环境组；这个参数也可以是 url，此时通过指定的 rpm 文件进行安装</li>\n<li>state：软件安装状态。如果为 present、latest 或 installed 则执行安装软件；如果为 absent 或 removed 则执行移除软件</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>copy：从主控节点向被控节点复制文件<ul>\n<li>kwargs：<ul>\n<li>src：主控节点的文件位置。可以是绝对路径或相对路径，如果是一个目录，将会进行递归复制</li>\n<li>dest：被控节点的文件位置。必须为绝对路径，且如果 src 是一个目录，dest 也必须为一个目录</li>\n<li>directory_mode：递归设定目录的权限。默认为系统默认权限</li>\n<li>force：是否覆盖。默认为 yes，即当目标文件和源文件不同时，强制覆盖文件，如果为 no 则只有在目标文件不存在时才复制</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>fetch：从被控节点向主控节点复制文件<ul>\n<li>与 copy 模块并不仅仅是方向相反，copy 可以复制文件和目录，而 fetch 模块只能复制文件</li>\n<li>kwargs：<ul>\n<li>src：被控节点的文件位置。</li>\n<li>dest：文件在主控节点中的保存位置。真实的保存目录需要注意，如果指定了 dest 参数为 /foo，被控节点为 bar，则文件将会保存在 /foo/bar/ 下</li>\n<li>fail_on_missing：被控节点中的文件不存在时是否报错。默认为 no，当为 no 时即使文件不存在也不会报错，此时主控节点也不会创建相应的目录</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>synchronize：通过 rsync 传输文件<ul>\n<li>kwargs：<ul>\n<li>src：源文件的位置。</li>\n<li>dest：目标文件的位置。</li>\n<li>mode：推送模式或拉取模式。默认为推送模式 push，从主控节点向被控节点传输文件</li>\n<li>delete：是否删除文件使两方一致。两方的一致性以推送方为准，默认为 no</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>service：用于管理服务<ul>\n<li>kwargs：<ul>\n<li>name：服务名称。</li>\n<li>state：对服务的操作。包括启动(started)、停止(stopped)、重启(restarted)、重新加载(reloaded)</li>\n<li>enabled：是否开机启动。且 state 和 enabled 两个参数中至少要有一个</li>\n<li>sleep：在 state=restarted 的时候，指定在 stop 和 start 之间暂停的秒数</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>get_url：通过 http/https/ftp 下载文件<ul>\n<li>kwargs：<ul>\n<li>url：下载的 uri</li>\n<li>dest：文件下载目标位置。如果 dest 为目录，则使用服务器提供的文件名，或者如果没有提供，将使用远程服务器上的 url 的基本名称。</li>\n<li>timeout：设置超时时间。默认为 10s</li>\n<li>headers：指定访问时的请求头。以 key: value 的格式填写</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n"},{"title":"Python 按照多个键进行排序","date":"2017-08-16T06:25:44.000Z","_content":"\n在 Python 中，可以使用 `list.sort()` 或 `sorted(list)` 对列表进行排序，而且可以使用 `key` 参数使列表按照一定的键值来排序。\n\n有一些情况下，需要首先对列表按照键值1来进行排序，排序后有多个元素的键值1相等，在每批键值1相等的元素当中，需要再按照键值2进行排序，甚至后续还有更多用以排序的键值。此时可以把 `key` 参数中 lambda 表达式的返回值修改为一个元组，其中元组的每个元素依次是需要依据排序的键值。\n\n```python\nfrom pprint import pprint\n \nlst = [\n    (2, 1),\n    (1, 2),\n    (1, 3), \n    (1, 1) \n]\n \npprint(sorted(lst), key=lambda x: x[0])\n# 此时仅对第一个元素进行排序\n# [\n#     (1, 2),\n#     (1, 3), \n#     (1, 1), \n#     (2, 1) \n# ]\n \npprint(sorted(lst), key=lambda x: (x[0], x[1]))\n# 此时先对第一个元素进行排序，在第一个元素相同的情况下，按第二个元素进行排序\n# [\n#     (1, 1),\n#     (1, 2), \n#     (1, 3), \n#     (2, 1) \n# ]\n```\n","source":"_posts/sorting-with-multi-keys-in-Python.md","raw":"---\ntitle: Python 按照多个键进行排序\ndate: 2017-08-16 14:25:44\ntags:\n  - Python\n---\n\n在 Python 中，可以使用 `list.sort()` 或 `sorted(list)` 对列表进行排序，而且可以使用 `key` 参数使列表按照一定的键值来排序。\n\n有一些情况下，需要首先对列表按照键值1来进行排序，排序后有多个元素的键值1相等，在每批键值1相等的元素当中，需要再按照键值2进行排序，甚至后续还有更多用以排序的键值。此时可以把 `key` 参数中 lambda 表达式的返回值修改为一个元组，其中元组的每个元素依次是需要依据排序的键值。\n\n```python\nfrom pprint import pprint\n \nlst = [\n    (2, 1),\n    (1, 2),\n    (1, 3), \n    (1, 1) \n]\n \npprint(sorted(lst), key=lambda x: x[0])\n# 此时仅对第一个元素进行排序\n# [\n#     (1, 2),\n#     (1, 3), \n#     (1, 1), \n#     (2, 1) \n# ]\n \npprint(sorted(lst), key=lambda x: (x[0], x[1]))\n# 此时先对第一个元素进行排序，在第一个元素相同的情况下，按第二个元素进行排序\n# [\n#     (1, 1),\n#     (1, 2), \n#     (1, 3), \n#     (2, 1) \n# ]\n```\n","slug":"sorting-with-multi-keys-in-Python","published":1,"updated":"2019-03-26T13:00:08.983Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjtpshatp001alrpq4zs8x30q","content":"<p>在 Python 中，可以使用 <code>list.sort()</code> 或 <code>sorted(list)</code> 对列表进行排序，而且可以使用 <code>key</code> 参数使列表按照一定的键值来排序。</p>\n<p>有一些情况下，需要首先对列表按照键值1来进行排序，排序后有多个元素的键值1相等，在每批键值1相等的元素当中，需要再按照键值2进行排序，甚至后续还有更多用以排序的键值。此时可以把 <code>key</code> 参数中 lambda 表达式的返回值修改为一个元组，其中元组的每个元素依次是需要依据排序的键值。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> pprint <span class=\"keyword\">import</span> pprint</span><br><span class=\"line\"> </span><br><span class=\"line\">lst = [</span><br><span class=\"line\">    (<span class=\"number\">2</span>, <span class=\"number\">1</span>),</span><br><span class=\"line\">    (<span class=\"number\">1</span>, <span class=\"number\">2</span>),</span><br><span class=\"line\">    (<span class=\"number\">1</span>, <span class=\"number\">3</span>), </span><br><span class=\"line\">    (<span class=\"number\">1</span>, <span class=\"number\">1</span>) </span><br><span class=\"line\">]</span><br><span class=\"line\"> </span><br><span class=\"line\">pprint(sorted(lst), key=<span class=\"keyword\">lambda</span> x: x[<span class=\"number\">0</span>])</span><br><span class=\"line\"><span class=\"comment\"># 此时仅对第一个元素进行排序</span></span><br><span class=\"line\"><span class=\"comment\"># [</span></span><br><span class=\"line\"><span class=\"comment\">#     (1, 2),</span></span><br><span class=\"line\"><span class=\"comment\">#     (1, 3), </span></span><br><span class=\"line\"><span class=\"comment\">#     (1, 1), </span></span><br><span class=\"line\"><span class=\"comment\">#     (2, 1) </span></span><br><span class=\"line\"><span class=\"comment\"># ]</span></span><br><span class=\"line\"> </span><br><span class=\"line\">pprint(sorted(lst), key=<span class=\"keyword\">lambda</span> x: (x[<span class=\"number\">0</span>], x[<span class=\"number\">1</span>]))</span><br><span class=\"line\"><span class=\"comment\"># 此时先对第一个元素进行排序，在第一个元素相同的情况下，按第二个元素进行排序</span></span><br><span class=\"line\"><span class=\"comment\"># [</span></span><br><span class=\"line\"><span class=\"comment\">#     (1, 1),</span></span><br><span class=\"line\"><span class=\"comment\">#     (1, 2), </span></span><br><span class=\"line\"><span class=\"comment\">#     (1, 3), </span></span><br><span class=\"line\"><span class=\"comment\">#     (2, 1) </span></span><br><span class=\"line\"><span class=\"comment\"># ]</span></span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<p>在 Python 中，可以使用 <code>list.sort()</code> 或 <code>sorted(list)</code> 对列表进行排序，而且可以使用 <code>key</code> 参数使列表按照一定的键值来排序。</p>\n<p>有一些情况下，需要首先对列表按照键值1来进行排序，排序后有多个元素的键值1相等，在每批键值1相等的元素当中，需要再按照键值2进行排序，甚至后续还有更多用以排序的键值。此时可以把 <code>key</code> 参数中 lambda 表达式的返回值修改为一个元组，其中元组的每个元素依次是需要依据排序的键值。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> pprint <span class=\"keyword\">import</span> pprint</span><br><span class=\"line\"> </span><br><span class=\"line\">lst = [</span><br><span class=\"line\">    (<span class=\"number\">2</span>, <span class=\"number\">1</span>),</span><br><span class=\"line\">    (<span class=\"number\">1</span>, <span class=\"number\">2</span>),</span><br><span class=\"line\">    (<span class=\"number\">1</span>, <span class=\"number\">3</span>), </span><br><span class=\"line\">    (<span class=\"number\">1</span>, <span class=\"number\">1</span>) </span><br><span class=\"line\">]</span><br><span class=\"line\"> </span><br><span class=\"line\">pprint(sorted(lst), key=<span class=\"keyword\">lambda</span> x: x[<span class=\"number\">0</span>])</span><br><span class=\"line\"><span class=\"comment\"># 此时仅对第一个元素进行排序</span></span><br><span class=\"line\"><span class=\"comment\"># [</span></span><br><span class=\"line\"><span class=\"comment\">#     (1, 2),</span></span><br><span class=\"line\"><span class=\"comment\">#     (1, 3), </span></span><br><span class=\"line\"><span class=\"comment\">#     (1, 1), </span></span><br><span class=\"line\"><span class=\"comment\">#     (2, 1) </span></span><br><span class=\"line\"><span class=\"comment\"># ]</span></span><br><span class=\"line\"> </span><br><span class=\"line\">pprint(sorted(lst), key=<span class=\"keyword\">lambda</span> x: (x[<span class=\"number\">0</span>], x[<span class=\"number\">1</span>]))</span><br><span class=\"line\"><span class=\"comment\"># 此时先对第一个元素进行排序，在第一个元素相同的情况下，按第二个元素进行排序</span></span><br><span class=\"line\"><span class=\"comment\"># [</span></span><br><span class=\"line\"><span class=\"comment\">#     (1, 1),</span></span><br><span class=\"line\"><span class=\"comment\">#     (1, 2), </span></span><br><span class=\"line\"><span class=\"comment\">#     (1, 3), </span></span><br><span class=\"line\"><span class=\"comment\">#     (2, 1) </span></span><br><span class=\"line\"><span class=\"comment\"># ]</span></span><br></pre></td></tr></table></figure>\n"},{"title":"CentOS 7 上的 systemctl 配置","date":"2016-09-09T02:07:54.000Z","_content":"\nCentOS 7 的服务 `systemctl` 脚本存放在目录 `/usr/lib/systemd/` 下，有系统（system）和用户（user）之分，需要开机不登陆就能运行的程序，存在系统服务即 `/usr/lib/systemd/system/` 目录下。\n\nCentOS 7 的每一个服务以 .service 结尾，一般会分为 3 部分：[Unit]、[Service] 和 [Install]。\n\n[Unit]部分主要是对这个服务的说明，内容包括Description和After，Description 用于描述服务，After用于描述服务类别\n\n[Service]部分是服务的关键，是服务的一些具体运行参数的设置。\nType=forking 是后台运行的形式，\nUser=users 是设置服务运行的用户,\nGroup=users 是设置服务运行的用户组,\nPIDFile 为存放 PID 的文件路径，\nExecStart 为服务的具体运行命令,\nExecReload 为重启命令，\nExecStop 为停止命令，\nPrivateTmp=True 表示给服务分配独立的临时空间。\n\n[Install]部分是服务安装的相关设置，可设置为多用户的。\n\n注意：[Service]部分的启动、重启、停止命令全部要求使用绝对路径，使用相对路径则会报错。\n","source":"_posts/systemctl-configurations-on-CentOS-7.md","raw":"---\ntitle: CentOS 7 上的 systemctl 配置\ndate: 2016-09-09 10:07:54\ntags:\n  - Linux\n---\n\nCentOS 7 的服务 `systemctl` 脚本存放在目录 `/usr/lib/systemd/` 下，有系统（system）和用户（user）之分，需要开机不登陆就能运行的程序，存在系统服务即 `/usr/lib/systemd/system/` 目录下。\n\nCentOS 7 的每一个服务以 .service 结尾，一般会分为 3 部分：[Unit]、[Service] 和 [Install]。\n\n[Unit]部分主要是对这个服务的说明，内容包括Description和After，Description 用于描述服务，After用于描述服务类别\n\n[Service]部分是服务的关键，是服务的一些具体运行参数的设置。\nType=forking 是后台运行的形式，\nUser=users 是设置服务运行的用户,\nGroup=users 是设置服务运行的用户组,\nPIDFile 为存放 PID 的文件路径，\nExecStart 为服务的具体运行命令,\nExecReload 为重启命令，\nExecStop 为停止命令，\nPrivateTmp=True 表示给服务分配独立的临时空间。\n\n[Install]部分是服务安装的相关设置，可设置为多用户的。\n\n注意：[Service]部分的启动、重启、停止命令全部要求使用绝对路径，使用相对路径则会报错。\n","slug":"systemctl-configurations-on-CentOS-7","published":1,"updated":"2019-03-26T13:00:08.983Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjtpshatr001clrpqhburyy3t","content":"<p>CentOS 7 的服务 <code>systemctl</code> 脚本存放在目录 <code>/usr/lib/systemd/</code> 下，有系统（system）和用户（user）之分，需要开机不登陆就能运行的程序，存在系统服务即 <code>/usr/lib/systemd/system/</code> 目录下。</p>\n<p>CentOS 7 的每一个服务以 .service 结尾，一般会分为 3 部分：[Unit]、[Service] 和 [Install]。</p>\n<p>[Unit]部分主要是对这个服务的说明，内容包括Description和After，Description 用于描述服务，After用于描述服务类别</p>\n<p>[Service]部分是服务的关键，是服务的一些具体运行参数的设置。<br>Type=forking 是后台运行的形式，<br>User=users 是设置服务运行的用户,<br>Group=users 是设置服务运行的用户组,<br>PIDFile 为存放 PID 的文件路径，<br>ExecStart 为服务的具体运行命令,<br>ExecReload 为重启命令，<br>ExecStop 为停止命令，<br>PrivateTmp=True 表示给服务分配独立的临时空间。</p>\n<p>[Install]部分是服务安装的相关设置，可设置为多用户的。</p>\n<p>注意：[Service]部分的启动、重启、停止命令全部要求使用绝对路径，使用相对路径则会报错。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>CentOS 7 的服务 <code>systemctl</code> 脚本存放在目录 <code>/usr/lib/systemd/</code> 下，有系统（system）和用户（user）之分，需要开机不登陆就能运行的程序，存在系统服务即 <code>/usr/lib/systemd/system/</code> 目录下。</p>\n<p>CentOS 7 的每一个服务以 .service 结尾，一般会分为 3 部分：[Unit]、[Service] 和 [Install]。</p>\n<p>[Unit]部分主要是对这个服务的说明，内容包括Description和After，Description 用于描述服务，After用于描述服务类别</p>\n<p>[Service]部分是服务的关键，是服务的一些具体运行参数的设置。<br>Type=forking 是后台运行的形式，<br>User=users 是设置服务运行的用户,<br>Group=users 是设置服务运行的用户组,<br>PIDFile 为存放 PID 的文件路径，<br>ExecStart 为服务的具体运行命令,<br>ExecReload 为重启命令，<br>ExecStop 为停止命令，<br>PrivateTmp=True 表示给服务分配独立的临时空间。</p>\n<p>[Install]部分是服务安装的相关设置，可设置为多用户的。</p>\n<p>注意：[Service]部分的启动、重启、停止命令全部要求使用绝对路径，使用相对路径则会报错。</p>\n"},{"title":"MySQL 引擎 MyISAM 和 InnoDB 的区别","date":"2015-12-13T05:53:33.000Z","_content":"\nMySQL 5.5 开始 InnoDB 成为 MySQL 的默认引擎（之前是 MyISAM）。\n\n1. MyISAM 不支持事务，InnoDB 支持事务。对于 InnoDB 每一条 SQL 语句都默认封装成事务自动提交，但会影响速度。所以最好把多条 SQL 语句放在 begin 和 commit 之间组成一个事务。\n2. MyISAM 不支持外键，InnoDB 支持外键。如果一个 InnoDB 表包含外键，这个表转为 MyISAM 表的时候会失败。\n3. MyISAM 是非聚集索引，数据文件是分离的，索引保存的是数据文件的指针，主键索引和辅助索引是独立的。InnoDB 是聚集索引，数据文件和索引绑定在一起，因此必须要有主键，且通过主键索引的效率很高。但辅助索引需要两次查询，先查询到主键，然后再通过主键查询到数据。\n4. MyISAM 用一个变量保存了整个表的行数，执行 `SELECT COUNT(*)` 的时候直接读出该变量即可，速度很快。InnoDB 不保存表的具体行数，执行 `SELECT COUNT(*)` 的时候需要全表扫描。\n5. MyISAM 支持全文索引，查询效率较高。InnoDB 不支持全文索引。\n6. MyISAM 更强调性能，更适用于执行 SELECT 较多的情况。InnoDB 更适用于 INSERT 和 UPDATE 较多的情况。\n7. MyISAM 在 DELETE 操作时会重新建立一个表，InnoDB 会一行一行地删除记录。\n8. MyISAM 不支持行锁，只支持表锁。MyISAM 同一个表上的读锁和写锁是互斥的，MyISAM 并发读写时如果等待队列中同时有读和写请求，默认写请求的优先级高，但 MyISAM 的写操作性能较低，会导致进程阻塞。InnoDB 支持行锁。\n\n","source":"_posts/the-difference-between-MyISAM-and-InnoDB-in-MySQL.md","raw":"---\ntitle: MySQL 引擎 MyISAM 和 InnoDB 的区别\ndate: 2015-12-13 13:53:33\ntags:\n  - MySQL\n---\n\nMySQL 5.5 开始 InnoDB 成为 MySQL 的默认引擎（之前是 MyISAM）。\n\n1. MyISAM 不支持事务，InnoDB 支持事务。对于 InnoDB 每一条 SQL 语句都默认封装成事务自动提交，但会影响速度。所以最好把多条 SQL 语句放在 begin 和 commit 之间组成一个事务。\n2. MyISAM 不支持外键，InnoDB 支持外键。如果一个 InnoDB 表包含外键，这个表转为 MyISAM 表的时候会失败。\n3. MyISAM 是非聚集索引，数据文件是分离的，索引保存的是数据文件的指针，主键索引和辅助索引是独立的。InnoDB 是聚集索引，数据文件和索引绑定在一起，因此必须要有主键，且通过主键索引的效率很高。但辅助索引需要两次查询，先查询到主键，然后再通过主键查询到数据。\n4. MyISAM 用一个变量保存了整个表的行数，执行 `SELECT COUNT(*)` 的时候直接读出该变量即可，速度很快。InnoDB 不保存表的具体行数，执行 `SELECT COUNT(*)` 的时候需要全表扫描。\n5. MyISAM 支持全文索引，查询效率较高。InnoDB 不支持全文索引。\n6. MyISAM 更强调性能，更适用于执行 SELECT 较多的情况。InnoDB 更适用于 INSERT 和 UPDATE 较多的情况。\n7. MyISAM 在 DELETE 操作时会重新建立一个表，InnoDB 会一行一行地删除记录。\n8. MyISAM 不支持行锁，只支持表锁。MyISAM 同一个表上的读锁和写锁是互斥的，MyISAM 并发读写时如果等待队列中同时有读和写请求，默认写请求的优先级高，但 MyISAM 的写操作性能较低，会导致进程阻塞。InnoDB 支持行锁。\n\n","slug":"the-difference-between-MyISAM-and-InnoDB-in-MySQL","published":1,"updated":"2019-03-26T13:00:08.984Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjtpshats001elrpqhb04qa9n","content":"<p>MySQL 5.5 开始 InnoDB 成为 MySQL 的默认引擎（之前是 MyISAM）。</p>\n<ol>\n<li>MyISAM 不支持事务，InnoDB 支持事务。对于 InnoDB 每一条 SQL 语句都默认封装成事务自动提交，但会影响速度。所以最好把多条 SQL 语句放在 begin 和 commit 之间组成一个事务。</li>\n<li>MyISAM 不支持外键，InnoDB 支持外键。如果一个 InnoDB 表包含外键，这个表转为 MyISAM 表的时候会失败。</li>\n<li>MyISAM 是非聚集索引，数据文件是分离的，索引保存的是数据文件的指针，主键索引和辅助索引是独立的。InnoDB 是聚集索引，数据文件和索引绑定在一起，因此必须要有主键，且通过主键索引的效率很高。但辅助索引需要两次查询，先查询到主键，然后再通过主键查询到数据。</li>\n<li>MyISAM 用一个变量保存了整个表的行数，执行 <code>SELECT COUNT(*)</code> 的时候直接读出该变量即可，速度很快。InnoDB 不保存表的具体行数，执行 <code>SELECT COUNT(*)</code> 的时候需要全表扫描。</li>\n<li>MyISAM 支持全文索引，查询效率较高。InnoDB 不支持全文索引。</li>\n<li>MyISAM 更强调性能，更适用于执行 SELECT 较多的情况。InnoDB 更适用于 INSERT 和 UPDATE 较多的情况。</li>\n<li>MyISAM 在 DELETE 操作时会重新建立一个表，InnoDB 会一行一行地删除记录。</li>\n<li>MyISAM 不支持行锁，只支持表锁。MyISAM 同一个表上的读锁和写锁是互斥的，MyISAM 并发读写时如果等待队列中同时有读和写请求，默认写请求的优先级高，但 MyISAM 的写操作性能较低，会导致进程阻塞。InnoDB 支持行锁。</li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<p>MySQL 5.5 开始 InnoDB 成为 MySQL 的默认引擎（之前是 MyISAM）。</p>\n<ol>\n<li>MyISAM 不支持事务，InnoDB 支持事务。对于 InnoDB 每一条 SQL 语句都默认封装成事务自动提交，但会影响速度。所以最好把多条 SQL 语句放在 begin 和 commit 之间组成一个事务。</li>\n<li>MyISAM 不支持外键，InnoDB 支持外键。如果一个 InnoDB 表包含外键，这个表转为 MyISAM 表的时候会失败。</li>\n<li>MyISAM 是非聚集索引，数据文件是分离的，索引保存的是数据文件的指针，主键索引和辅助索引是独立的。InnoDB 是聚集索引，数据文件和索引绑定在一起，因此必须要有主键，且通过主键索引的效率很高。但辅助索引需要两次查询，先查询到主键，然后再通过主键查询到数据。</li>\n<li>MyISAM 用一个变量保存了整个表的行数，执行 <code>SELECT COUNT(*)</code> 的时候直接读出该变量即可，速度很快。InnoDB 不保存表的具体行数，执行 <code>SELECT COUNT(*)</code> 的时候需要全表扫描。</li>\n<li>MyISAM 支持全文索引，查询效率较高。InnoDB 不支持全文索引。</li>\n<li>MyISAM 更强调性能，更适用于执行 SELECT 较多的情况。InnoDB 更适用于 INSERT 和 UPDATE 较多的情况。</li>\n<li>MyISAM 在 DELETE 操作时会重新建立一个表，InnoDB 会一行一行地删除记录。</li>\n<li>MyISAM 不支持行锁，只支持表锁。MyISAM 同一个表上的读锁和写锁是互斥的，MyISAM 并发读写时如果等待队列中同时有读和写请求，默认写请求的优先级高，但 MyISAM 的写操作性能较低，会导致进程阻塞。InnoDB 支持行锁。</li>\n</ol>\n"},{"title":"json.dumps() 中的 ensure_ascii 参数","date":"2018-10-20T02:08:37.000Z","_content":"\n在使用 `json.dumps()` 的时候，如果数据中包含中文，需要指定一个参数 `ensure_ascii` 的值为 `False`。\n\n这是因为 `json.dumps()` 在序列化时，对中文默认使用 ASCII 编码。\n\n```python\nimport json\n\nprint(json.dumps(\"中\"))\n# \"\\u4e2d\"\n\nprint(json.dumps(\"中\", ensure_ascii=False))\n# \"中\"\n```\n","source":"_posts/the-parameter-ensure-ascii-in-json-dumps.md","raw":"---\ntitle: json.dumps() 中的 ensure_ascii 参数\ndate: 2018-10-20 10:08:37\ntags:\n  - Python\n---\n\n在使用 `json.dumps()` 的时候，如果数据中包含中文，需要指定一个参数 `ensure_ascii` 的值为 `False`。\n\n这是因为 `json.dumps()` 在序列化时，对中文默认使用 ASCII 编码。\n\n```python\nimport json\n\nprint(json.dumps(\"中\"))\n# \"\\u4e2d\"\n\nprint(json.dumps(\"中\", ensure_ascii=False))\n# \"中\"\n```\n","slug":"the-parameter-ensure-ascii-in-json-dumps","published":1,"updated":"2019-03-26T13:00:08.984Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjtpshatu001hlrpq9ajpp7em","content":"<p>在使用 <code>json.dumps()</code> 的时候，如果数据中包含中文，需要指定一个参数 <code>ensure_ascii</code> 的值为 <code>False</code>。</p>\n<p>这是因为 <code>json.dumps()</code> 在序列化时，对中文默认使用 ASCII 编码。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> json</span><br><span class=\"line\"></span><br><span class=\"line\">print(json.dumps(<span class=\"string\">\"中\"</span>))</span><br><span class=\"line\"><span class=\"comment\"># \"\\u4e2d\"</span></span><br><span class=\"line\"></span><br><span class=\"line\">print(json.dumps(<span class=\"string\">\"中\"</span>, ensure_ascii=<span class=\"keyword\">False</span>))</span><br><span class=\"line\"><span class=\"comment\"># \"中\"</span></span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<p>在使用 <code>json.dumps()</code> 的时候，如果数据中包含中文，需要指定一个参数 <code>ensure_ascii</code> 的值为 <code>False</code>。</p>\n<p>这是因为 <code>json.dumps()</code> 在序列化时，对中文默认使用 ASCII 编码。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> json</span><br><span class=\"line\"></span><br><span class=\"line\">print(json.dumps(<span class=\"string\">\"中\"</span>))</span><br><span class=\"line\"><span class=\"comment\"># \"\\u4e2d\"</span></span><br><span class=\"line\"></span><br><span class=\"line\">print(json.dumps(<span class=\"string\">\"中\"</span>, ensure_ascii=<span class=\"keyword\">False</span>))</span><br><span class=\"line\"><span class=\"comment\"># \"中\"</span></span><br></pre></td></tr></table></figure>\n"},{"title":"Python 中时间戳、格式化时间、时间数组、datetime 之间的转换","date":"2014-12-03T02:12:33.000Z","_content":"\n```python\nimport time\nfrom datetime import datetime\n \n# 获得时间戳\ntimestamp = time.time()\n \n# 时间戳转为时间数组\ntime_array = time.localtime(timestamp)\n \n# 时间数组转为时间戳\ntimestamp = time.mktime(time_array())\n \n# 格式化时间转为时间数组\ntime_array = time.strptime(format_time, '%Y-%m-%d %H:%M:%S')\n \n# 时间数组转为格式化时间\nformat_time = time.strftime('%Y-%m-%d %H:%M:%S', time_array)\n \n# datetime 转为时间戳\nts = dt.timestamp()\n \n# 时间戳转为 datetime\ndt = datetime.fromtimestamp(ts)\n \n# 直接输出当前的格式化时间\ntime.strftime('%Y-%m-%d %H:%M:%S')\n```\n","source":"_posts/the-transformation-among-timestamp-formatted-time-datetime-and-time-tuple-in-Python.md","raw":"---\ntitle: Python 中时间戳、格式化时间、时间数组、datetime 之间的转换\ndate: 2014-12-03 10:12:33\ntags: \n  - Python\n---\n\n```python\nimport time\nfrom datetime import datetime\n \n# 获得时间戳\ntimestamp = time.time()\n \n# 时间戳转为时间数组\ntime_array = time.localtime(timestamp)\n \n# 时间数组转为时间戳\ntimestamp = time.mktime(time_array())\n \n# 格式化时间转为时间数组\ntime_array = time.strptime(format_time, '%Y-%m-%d %H:%M:%S')\n \n# 时间数组转为格式化时间\nformat_time = time.strftime('%Y-%m-%d %H:%M:%S', time_array)\n \n# datetime 转为时间戳\nts = dt.timestamp()\n \n# 时间戳转为 datetime\ndt = datetime.fromtimestamp(ts)\n \n# 直接输出当前的格式化时间\ntime.strftime('%Y-%m-%d %H:%M:%S')\n```\n","slug":"the-transformation-among-timestamp-formatted-time-datetime-and-time-tuple-in-Python","published":1,"updated":"2019-03-26T13:00:08.984Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjtpshatv001jlrpqz99rlq1j","content":"<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> time</span><br><span class=\"line\"><span class=\"keyword\">from</span> datetime <span class=\"keyword\">import</span> datetime</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\"># 获得时间戳</span></span><br><span class=\"line\">timestamp = time.time()</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\"># 时间戳转为时间数组</span></span><br><span class=\"line\">time_array = time.localtime(timestamp)</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\"># 时间数组转为时间戳</span></span><br><span class=\"line\">timestamp = time.mktime(time_array())</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\"># 格式化时间转为时间数组</span></span><br><span class=\"line\">time_array = time.strptime(format_time, <span class=\"string\">'%Y-%m-%d %H:%M:%S'</span>)</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\"># 时间数组转为格式化时间</span></span><br><span class=\"line\">format_time = time.strftime(<span class=\"string\">'%Y-%m-%d %H:%M:%S'</span>, time_array)</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\"># datetime 转为时间戳</span></span><br><span class=\"line\">ts = dt.timestamp()</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\"># 时间戳转为 datetime</span></span><br><span class=\"line\">dt = datetime.fromtimestamp(ts)</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\"># 直接输出当前的格式化时间</span></span><br><span class=\"line\">time.strftime(<span class=\"string\">'%Y-%m-%d %H:%M:%S'</span>)</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> time</span><br><span class=\"line\"><span class=\"keyword\">from</span> datetime <span class=\"keyword\">import</span> datetime</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\"># 获得时间戳</span></span><br><span class=\"line\">timestamp = time.time()</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\"># 时间戳转为时间数组</span></span><br><span class=\"line\">time_array = time.localtime(timestamp)</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\"># 时间数组转为时间戳</span></span><br><span class=\"line\">timestamp = time.mktime(time_array())</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\"># 格式化时间转为时间数组</span></span><br><span class=\"line\">time_array = time.strptime(format_time, <span class=\"string\">'%Y-%m-%d %H:%M:%S'</span>)</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\"># 时间数组转为格式化时间</span></span><br><span class=\"line\">format_time = time.strftime(<span class=\"string\">'%Y-%m-%d %H:%M:%S'</span>, time_array)</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\"># datetime 转为时间戳</span></span><br><span class=\"line\">ts = dt.timestamp()</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\"># 时间戳转为 datetime</span></span><br><span class=\"line\">dt = datetime.fromtimestamp(ts)</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\"># 直接输出当前的格式化时间</span></span><br><span class=\"line\">time.strftime(<span class=\"string\">'%Y-%m-%d %H:%M:%S'</span>)</span><br></pre></td></tr></table></figure>\n"},{"title":"为什么读写文件推荐使用 with 语句块？","date":"2015-10-11T03:56:17.000Z","_content":"\n```python\nwith open('file_name') as f:\n    data = f.read()\n```\n\n能够使用 with 语句块的条件是 with 所求值的对象必须有一个 `__enter__()` 方法，一个 `__exit__()` 方法。\n\n而紧跟在 with 关键字后面的语句被求值后，返回对象的 `__enter__()` 方法被调用，这个方法的返回值将被赋值给 `as` 后面的变量。当 with 语句块中的全部语句被执行完之后，将调用前面返回对象的 `__exit__()` 方法。\n\n对于读写文件来说，使用 with 语句块一般较为保险。在读文件时，如果使用了 with 语句块，在代码块结束后，由于自动执行了 `__exit__()` 方法，因此不需要手动使用 `close()` 方法来关闭被读的文件；当写文件时，操作系统往往不会立刻把数据写入磁盘，而是放到内存中缓存起来，空闲的时候再进行写入，只有调用 `close()` 方法时，操作系统才保证把没有写入的数据全部写入磁盘，忘记调用 `close()` 的后果是数据可能只写了一部分到磁盘，剩下的丢失了，而使用 with语句块就有效避免了这个问题。\n","source":"_posts/why-WITH-block-is-recommended-for-reading-and-writing-files.md","raw":"---\ntitle: 为什么读写文件推荐使用 with 语句块？\ndate: 2015-10-11 11:56:17\ntags:\n  - Python\n---\n\n```python\nwith open('file_name') as f:\n    data = f.read()\n```\n\n能够使用 with 语句块的条件是 with 所求值的对象必须有一个 `__enter__()` 方法，一个 `__exit__()` 方法。\n\n而紧跟在 with 关键字后面的语句被求值后，返回对象的 `__enter__()` 方法被调用，这个方法的返回值将被赋值给 `as` 后面的变量。当 with 语句块中的全部语句被执行完之后，将调用前面返回对象的 `__exit__()` 方法。\n\n对于读写文件来说，使用 with 语句块一般较为保险。在读文件时，如果使用了 with 语句块，在代码块结束后，由于自动执行了 `__exit__()` 方法，因此不需要手动使用 `close()` 方法来关闭被读的文件；当写文件时，操作系统往往不会立刻把数据写入磁盘，而是放到内存中缓存起来，空闲的时候再进行写入，只有调用 `close()` 方法时，操作系统才保证把没有写入的数据全部写入磁盘，忘记调用 `close()` 的后果是数据可能只写了一部分到磁盘，剩下的丢失了，而使用 with语句块就有效避免了这个问题。\n","slug":"why-WITH-block-is-recommended-for-reading-and-writing-files","published":1,"updated":"2019-03-26T13:00:08.984Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjtpshatx001mlrpqas67q43v","content":"<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">with</span> open(<span class=\"string\">'file_name'</span>) <span class=\"keyword\">as</span> f:</span><br><span class=\"line\">    data = f.read()</span><br></pre></td></tr></table></figure>\n<p>能够使用 with 语句块的条件是 with 所求值的对象必须有一个 <code>__enter__()</code> 方法，一个 <code>__exit__()</code> 方法。</p>\n<p>而紧跟在 with 关键字后面的语句被求值后，返回对象的 <code>__enter__()</code> 方法被调用，这个方法的返回值将被赋值给 <code>as</code> 后面的变量。当 with 语句块中的全部语句被执行完之后，将调用前面返回对象的 <code>__exit__()</code> 方法。</p>\n<p>对于读写文件来说，使用 with 语句块一般较为保险。在读文件时，如果使用了 with 语句块，在代码块结束后，由于自动执行了 <code>__exit__()</code> 方法，因此不需要手动使用 <code>close()</code> 方法来关闭被读的文件；当写文件时，操作系统往往不会立刻把数据写入磁盘，而是放到内存中缓存起来，空闲的时候再进行写入，只有调用 <code>close()</code> 方法时，操作系统才保证把没有写入的数据全部写入磁盘，忘记调用 <code>close()</code> 的后果是数据可能只写了一部分到磁盘，剩下的丢失了，而使用 with语句块就有效避免了这个问题。</p>\n","site":{"data":{}},"excerpt":"","more":"<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">with</span> open(<span class=\"string\">'file_name'</span>) <span class=\"keyword\">as</span> f:</span><br><span class=\"line\">    data = f.read()</span><br></pre></td></tr></table></figure>\n<p>能够使用 with 语句块的条件是 with 所求值的对象必须有一个 <code>__enter__()</code> 方法，一个 <code>__exit__()</code> 方法。</p>\n<p>而紧跟在 with 关键字后面的语句被求值后，返回对象的 <code>__enter__()</code> 方法被调用，这个方法的返回值将被赋值给 <code>as</code> 后面的变量。当 with 语句块中的全部语句被执行完之后，将调用前面返回对象的 <code>__exit__()</code> 方法。</p>\n<p>对于读写文件来说，使用 with 语句块一般较为保险。在读文件时，如果使用了 with 语句块，在代码块结束后，由于自动执行了 <code>__exit__()</code> 方法，因此不需要手动使用 <code>close()</code> 方法来关闭被读的文件；当写文件时，操作系统往往不会立刻把数据写入磁盘，而是放到内存中缓存起来，空闲的时候再进行写入，只有调用 <code>close()</code> 方法时，操作系统才保证把没有写入的数据全部写入磁盘，忘记调用 <code>close()</code> 的后果是数据可能只写了一部分到磁盘，剩下的丢失了，而使用 with语句块就有效避免了这个问题。</p>\n"}],"PostAsset":[],"PostCategory":[],"PostTag":[{"post_id":"cjtpshar40000lrpqpixvlw9n","tag_id":"cjtpsharp0004lrpq7g64qwla","_id":"cjtpshas10009lrpqjre3ge3z"},{"post_id":"cjtpsharh0002lrpqocchjs0g","tag_id":"cjtpsharz0008lrpqu71s8f8m","_id":"cjtpshas7000elrpqq08y3alw"},{"post_id":"cjtpshars0005lrpqfkqgrrq8","tag_id":"cjtpshas6000clrpqfqmvlzb0","_id":"cjtpshasp000olrpqahwyplhw"},{"post_id":"cjtpshars0005lrpqfkqgrrq8","tag_id":"cjtpshas9000glrpqmbpbarjo","_id":"cjtpshasq000qlrpqrfi4gbms"},{"post_id":"cjtpshars0005lrpqfkqgrrq8","tag_id":"cjtpshasd000jlrpqr1wjrapg","_id":"cjtpshasv000tlrpq58t817fo"},{"post_id":"cjtpsharv0006lrpqdbk2h2t4","tag_id":"cjtpshaso000nlrpqxg0zlm15","_id":"cjtpshath0011lrpq43s29eos"},{"post_id":"cjtpsharv0006lrpqdbk2h2t4","tag_id":"cjtpshasd000jlrpqr1wjrapg","_id":"cjtpshatj0013lrpqsr0rjaer"},{"post_id":"cjtpsharv0006lrpqdbk2h2t4","tag_id":"cjtpshatd000wlrpqtdxbk36l","_id":"cjtpshatl0016lrpqtzazkuj7"},{"post_id":"cjtpshate000ylrpq1ewa203b","tag_id":"cjtpshaso000nlrpqxg0zlm15","_id":"cjtpshatn0018lrpqt9gqiv4s"},{"post_id":"cjtpsharx0007lrpqoulflu82","tag_id":"cjtpshatg000zlrpq2lqvq51p","_id":"cjtpshatq001blrpqodjwcgqa"},{"post_id":"cjtpshatm0017lrpqii3f0htv","tag_id":"cjtpsharp0004lrpq7g64qwla","_id":"cjtpshats001dlrpqwrwh1z9y"},{"post_id":"cjtpshatp001alrpq4zs8x30q","tag_id":"cjtpshaso000nlrpqxg0zlm15","_id":"cjtpshatt001glrpqyp9cluxv"},{"post_id":"cjtpshas1000alrpq1t27f1nt","tag_id":"cjtpshaso000nlrpqxg0zlm15","_id":"cjtpshatv001ilrpqt8pu5zzf"},{"post_id":"cjtpshas1000alrpq1t27f1nt","tag_id":"cjtpshatn0019lrpqr1ncsrms","_id":"cjtpshatx001llrpqjnbc5h26"},{"post_id":"cjtpshats001elrpqhb04qa9n","tag_id":"cjtpshas9000glrpqmbpbarjo","_id":"cjtpshaty001nlrpq2a0aiiz2"},{"post_id":"cjtpshatu001hlrpq9ajpp7em","tag_id":"cjtpshaso000nlrpqxg0zlm15","_id":"cjtpshaty001olrpqc53nk4op"},{"post_id":"cjtpshatv001jlrpqz99rlq1j","tag_id":"cjtpshaso000nlrpqxg0zlm15","_id":"cjtpshatz001qlrpqii32qecd"},{"post_id":"cjtpshatx001mlrpqas67q43v","tag_id":"cjtpshaso000nlrpqxg0zlm15","_id":"cjtpshatz001rlrpqqx5sdz50"},{"post_id":"cjtpshas4000blrpq2vpopaxd","tag_id":"cjtpshatt001flrpqdkewkmc0","_id":"cjtpshau0001tlrpq3otrxj6f"},{"post_id":"cjtpshas4000blrpq2vpopaxd","tag_id":"cjtpshatw001klrpqjak0o4a5","_id":"cjtpshau0001ulrpqytg0r4vr"},{"post_id":"cjtpshas6000dlrpqxrwjjvn1","tag_id":"cjtpshatz001plrpq410lxn24","_id":"cjtpshau3001ylrpqhxewzqu6"},{"post_id":"cjtpshas6000dlrpqxrwjjvn1","tag_id":"cjtpshatz001slrpqjhkc3gzm","_id":"cjtpshau3001zlrpqxaz9jmdv"},{"post_id":"cjtpshas6000dlrpqxrwjjvn1","tag_id":"cjtpshas9000glrpqmbpbarjo","_id":"cjtpshau30021lrpqz9wdcx5t"},{"post_id":"cjtpshas6000dlrpqxrwjjvn1","tag_id":"cjtpshau2001wlrpq5ohdro2n","_id":"cjtpshau30022lrpqp4i73e56"},{"post_id":"cjtpshas8000flrpqrp5dpju9","tag_id":"cjtpshatt001flrpqdkewkmc0","_id":"cjtpshau40024lrpq0fcnhe4h"},{"post_id":"cjtpshasa000hlrpqrg16406q","tag_id":"cjtpshau30020lrpqy1z2az9v","_id":"cjtpshau50027lrpq8gm7ytwu"},{"post_id":"cjtpshasa000hlrpqrg16406q","tag_id":"cjtpshaso000nlrpqxg0zlm15","_id":"cjtpshau50028lrpqicun789m"},{"post_id":"cjtpshasa000hlrpqrg16406q","tag_id":"cjtpshau40025lrpqusxe2pk2","_id":"cjtpshau6002alrpqtxsp4fzo"},{"post_id":"cjtpshasb000ilrpqbm7zdw2w","tag_id":"cjtpshatt001flrpqdkewkmc0","_id":"cjtpshau6002blrpqxhnsba6s"},{"post_id":"cjtpshasd000klrpqr5ltlbw5","tag_id":"cjtpshatt001flrpqdkewkmc0","_id":"cjtpshau8002flrpqktjz6osu"},{"post_id":"cjtpshasd000klrpqr5ltlbw5","tag_id":"cjtpshaso000nlrpqxg0zlm15","_id":"cjtpshau8002glrpqcw60sz0q"},{"post_id":"cjtpshasd000klrpqr5ltlbw5","tag_id":"cjtpshau7002dlrpqdrh9ehuy","_id":"cjtpshau9002ilrpq6dm8i6mn"},{"post_id":"cjtpshasm000llrpq4wtyuys1","tag_id":"cjtpshau8002elrpqtupwb7no","_id":"cjtpshau9002jlrpqhjn2hwax"},{"post_id":"cjtpshasn000mlrpqqyvt2x0i","tag_id":"cjtpshau8002hlrpqmg9dy75l","_id":"cjtpshaua002llrpqo5s1wdue"},{"post_id":"cjtpshasp000plrpqgsyj6676","tag_id":"cjtpshas9000glrpqmbpbarjo","_id":"cjtpshaua002nlrpq5a6x7ldr"},{"post_id":"cjtpshasp000plrpqgsyj6676","tag_id":"cjtpshaso000nlrpqxg0zlm15","_id":"cjtpshaua002olrpqnaazf73b"},{"post_id":"cjtpshasp000plrpqgsyj6676","tag_id":"cjtpshatn0019lrpqr1ncsrms","_id":"cjtpshaud002qlrpqaeymusxv"},{"post_id":"cjtpshasq000rlrpq8k29fqsm","tag_id":"cjtpshaua002mlrpqksulptcu","_id":"cjtpshaue002slrpqkcshamjv"},{"post_id":"cjtpshasq000rlrpq8k29fqsm","tag_id":"cjtpshatn0019lrpqr1ncsrms","_id":"cjtpshaue002tlrpqle0bt6f4"},{"post_id":"cjtpshasw000ulrpqhohsyzon","tag_id":"cjtpshaue002rlrpqb4lyqkpr","_id":"cjtpshaug002xlrpqlnku4ajt"},{"post_id":"cjtpshasw000ulrpqhohsyzon","tag_id":"cjtpshaue002ulrpqvho1q2kv","_id":"cjtpshaug002ylrpqb7wrkouk"},{"post_id":"cjtpshasw000ulrpqhohsyzon","tag_id":"cjtpshaso000nlrpqxg0zlm15","_id":"cjtpshauh0030lrpqr1y14zm3"},{"post_id":"cjtpshasw000ulrpqhohsyzon","tag_id":"cjtpshauf002vlrpqp2i8qllr","_id":"cjtpshauh0031lrpqsx1u4mek"},{"post_id":"cjtpshatb000vlrpq5ps4h2zz","tag_id":"cjtpshatt001flrpqdkewkmc0","_id":"cjtpshauh0033lrpq2bae4712"},{"post_id":"cjtpshatb000vlrpq5ps4h2zz","tag_id":"cjtpshas9000glrpqmbpbarjo","_id":"cjtpshauh0034lrpq1dylzqg6"},{"post_id":"cjtpshatd000xlrpqxted04zo","tag_id":"cjtpshatt001flrpqdkewkmc0","_id":"cjtpshaui0036lrpqeqgc1256"},{"post_id":"cjtpshatd000xlrpqxted04zo","tag_id":"cjtpshaso000nlrpqxg0zlm15","_id":"cjtpshaui0037lrpqszu7apfq"},{"post_id":"cjtpshatd000xlrpqxted04zo","tag_id":"cjtpshauh0032lrpq2mo59gdk","_id":"cjtpshauj0039lrpqrjkfla98"},{"post_id":"cjtpshatg0010lrpqwrwburlq","tag_id":"cjtpshaso000nlrpqxg0zlm15","_id":"cjtpshauj003alrpq3cad5ocl"},{"post_id":"cjtpshatg0010lrpqwrwburlq","tag_id":"cjtpshaui0035lrpqbrj2jkk0","_id":"cjtpshauk003clrpqwdw0aglk"},{"post_id":"cjtpshati0012lrpqmkza5z5r","tag_id":"cjtpshau2001wlrpq5ohdro2n","_id":"cjtpshaul003elrpqb7sc2yfc"},{"post_id":"cjtpshati0012lrpqmkza5z5r","tag_id":"cjtpshauj003blrpqv34btn9k","_id":"cjtpshaul003flrpqua9iv467"},{"post_id":"cjtpshati0012lrpqmkza5z5r","tag_id":"cjtpshasd000jlrpqr1wjrapg","_id":"cjtpshaum003hlrpqe7d83pfg"},{"post_id":"cjtpshatj0015lrpqcp7av9s1","tag_id":"cjtpshatt001flrpqdkewkmc0","_id":"cjtpshaun003jlrpqtunnbojd"},{"post_id":"cjtpshatj0015lrpqcp7av9s1","tag_id":"cjtpshatw001klrpqjak0o4a5","_id":"cjtpshaun003klrpqkooh5w2i"},{"post_id":"cjtpshatr001clrpqhburyy3t","tag_id":"cjtpshatt001flrpqdkewkmc0","_id":"cjtpshauo003llrpq0rt1z0kl"}],"Tag":[{"name":"Ansible","_id":"cjtpsharp0004lrpq7g64qwla"},{"name":"YAML","_id":"cjtpsharz0008lrpqu71s8f8m"},{"name":"Docker","_id":"cjtpshas6000clrpqfqmvlzb0"},{"name":"MySQL","_id":"cjtpshas9000glrpqmbpbarjo"},{"name":"坑","_id":"cjtpshasd000jlrpqr1wjrapg"},{"name":"Python","_id":"cjtpshaso000nlrpqxg0zlm15"},{"name":"正则表达式","_id":"cjtpshatd000wlrpqtdxbk36l"},{"name":"文档","_id":"cjtpshatg000zlrpq2lqvq51p"},{"name":"奇技淫巧","_id":"cjtpshatn0019lrpqr1ncsrms"},{"name":"Linux","_id":"cjtpshatt001flrpqdkewkmc0"},{"name":"ssh","_id":"cjtpshatw001klrpqjak0o4a5"},{"name":"Apache","_id":"cjtpshatz001plrpq410lxn24"},{"name":"LAMP","_id":"cjtpshatz001slrpqjhkc3gzm"},{"name":"PHP","_id":"cjtpshau2001wlrpq5ohdro2n"},{"name":"Windows","_id":"cjtpshau30020lrpqy1z2az9v"},{"name":"编码","_id":"cjtpshau40025lrpqusxe2pk2"},{"name":"快速安装","_id":"cjtpshau7002dlrpqdrh9ehuy"},{"name":"Ruby","_id":"cjtpshau8002elrpqtupwb7no"},{"name":"zsh","_id":"cjtpshau8002hlrpqmg9dy75l"},{"name":"vim","_id":"cjtpshaua002mlrpqksulptcu"},{"name":"Firefox","_id":"cjtpshaue002rlrpqb4lyqkpr"},{"name":"PhantomJS","_id":"cjtpshaue002ulrpqvho1q2kv"},{"name":"Selenium","_id":"cjtpshauf002vlrpqp2i8qllr"},{"name":"Saltstack","_id":"cjtpshauh0032lrpq2mo59gdk"},{"name":"类","_id":"cjtpshaui0035lrpqbrj2jkk0"},{"name":"WordPress","_id":"cjtpshauj003blrpqv34btn9k"}]}}